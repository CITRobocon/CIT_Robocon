
fourLeg_Prot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006164  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000238  08006330  08006330  00016330  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006568  08006568  00016568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006570  08006570  00016570  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006574  08006574  00016574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000007c  20000000  08006578  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000394  20000080  080065f4  00020080  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  20000414  080065f4  00020414  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00018b77  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002a50  00000000  00000000  00038c23  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000084c2  00000000  00000000  0003b673  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000ac0  00000000  00000000  00043b38  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000de8  00000000  00000000  000445f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000605e  00000000  00000000  000453e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000043c3  00000000  00000000  0004b43e  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0004f801  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000026a0  00000000  00000000  0004f880  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000080 	.word	0x20000080
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08006314 	.word	0x08006314

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000084 	.word	0x20000084
 8000204:	08006314 	.word	0x08006314

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000346:	f1a4 0401 	sub.w	r4, r4, #1
 800034a:	d1e9      	bne.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f092 0f00 	teq	r2, #0
 80004f2:	bf14      	ite	ne
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000508:	e720      	b.n	800034c <__adddf3+0x138>
 800050a:	bf00      	nop

0800050c <__aeabi_ul2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	e00a      	b.n	8000532 <__aeabi_l2d+0x16>

0800051c <__aeabi_l2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800052a:	d502      	bpl.n	8000532 <__aeabi_l2d+0x16>
 800052c:	4240      	negs	r0, r0
 800052e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000532:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000536:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053e:	f43f aedc 	beq.w	80002fa <__adddf3+0xe6>
 8000542:	f04f 0203 	mov.w	r2, #3
 8000546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054a:	bf18      	it	ne
 800054c:	3203      	addne	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000562:	fa20 f002 	lsr.w	r0, r0, r2
 8000566:	fa01 fe03 	lsl.w	lr, r1, r3
 800056a:	ea40 000e 	orr.w	r0, r0, lr
 800056e:	fa21 f102 	lsr.w	r1, r1, r2
 8000572:	4414      	add	r4, r2
 8000574:	e6c1      	b.n	80002fa <__adddf3+0xe6>
 8000576:	bf00      	nop

08000578 <__aeabi_dmul>:
 8000578:	b570      	push	{r4, r5, r6, lr}
 800057a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800057e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000582:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000586:	bf1d      	ittte	ne
 8000588:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800058c:	ea94 0f0c 	teqne	r4, ip
 8000590:	ea95 0f0c 	teqne	r5, ip
 8000594:	f000 f8de 	bleq	8000754 <__aeabi_dmul+0x1dc>
 8000598:	442c      	add	r4, r5
 800059a:	ea81 0603 	eor.w	r6, r1, r3
 800059e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005aa:	bf18      	it	ne
 80005ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005b8:	d038      	beq.n	800062c <__aeabi_dmul+0xb4>
 80005ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ce:	f04f 0600 	mov.w	r6, #0
 80005d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005d6:	f09c 0f00 	teq	ip, #0
 80005da:	bf18      	it	ne
 80005dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ec:	d204      	bcs.n	80005f8 <__aeabi_dmul+0x80>
 80005ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f2:	416d      	adcs	r5, r5
 80005f4:	eb46 0606 	adc.w	r6, r6, r6
 80005f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000600:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000604:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000608:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800060c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000610:	bf88      	it	hi
 8000612:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000616:	d81e      	bhi.n	8000656 <__aeabi_dmul+0xde>
 8000618:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800061c:	bf08      	it	eq
 800061e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000622:	f150 0000 	adcs.w	r0, r0, #0
 8000626:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000630:	ea46 0101 	orr.w	r1, r6, r1
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	ea81 0103 	eor.w	r1, r1, r3
 800063c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000640:	bfc2      	ittt	gt
 8000642:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000646:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064a:	bd70      	popgt	{r4, r5, r6, pc}
 800064c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000650:	f04f 0e00 	mov.w	lr, #0
 8000654:	3c01      	subs	r4, #1
 8000656:	f300 80ab 	bgt.w	80007b0 <__aeabi_dmul+0x238>
 800065a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800065e:	bfde      	ittt	le
 8000660:	2000      	movle	r0, #0
 8000662:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd70      	pople	{r4, r5, r6, pc}
 8000668:	f1c4 0400 	rsb	r4, r4, #0
 800066c:	3c20      	subs	r4, #32
 800066e:	da35      	bge.n	80006dc <__aeabi_dmul+0x164>
 8000670:	340c      	adds	r4, #12
 8000672:	dc1b      	bgt.n	80006ac <__aeabi_dmul+0x134>
 8000674:	f104 0414 	add.w	r4, r4, #20
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f305 	lsl.w	r3, r0, r5
 8000680:	fa20 f004 	lsr.w	r0, r0, r4
 8000684:	fa01 f205 	lsl.w	r2, r1, r5
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000690:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000694:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000698:	fa21 f604 	lsr.w	r6, r1, r4
 800069c:	eb42 0106 	adc.w	r1, r2, r6
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 040c 	rsb	r4, r4, #12
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f304 	lsl.w	r3, r0, r4
 80006b8:	fa20 f005 	lsr.w	r0, r0, r5
 80006bc:	fa01 f204 	lsl.w	r2, r1, r4
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006cc:	f141 0100 	adc.w	r1, r1, #0
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f205 	lsl.w	r2, r0, r5
 80006e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ec:	fa01 f205 	lsl.w	r2, r1, r5
 80006f0:	ea43 0302 	orr.w	r3, r3, r2
 80006f4:	fa21 f004 	lsr.w	r0, r1, r4
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	fa21 f204 	lsr.w	r2, r1, r4
 8000700:	ea20 0002 	bic.w	r0, r0, r2
 8000704:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f094 0f00 	teq	r4, #0
 8000718:	d10f      	bne.n	800073a <__aeabi_dmul+0x1c2>
 800071a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800071e:	0040      	lsls	r0, r0, #1
 8000720:	eb41 0101 	adc.w	r1, r1, r1
 8000724:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3c01      	subeq	r4, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1a6>
 800072e:	ea41 0106 	orr.w	r1, r1, r6
 8000732:	f095 0f00 	teq	r5, #0
 8000736:	bf18      	it	ne
 8000738:	4770      	bxne	lr
 800073a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800073e:	0052      	lsls	r2, r2, #1
 8000740:	eb43 0303 	adc.w	r3, r3, r3
 8000744:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3d01      	subeq	r5, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1c6>
 800074e:	ea43 0306 	orr.w	r3, r3, r6
 8000752:	4770      	bx	lr
 8000754:	ea94 0f0c 	teq	r4, ip
 8000758:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800075c:	bf18      	it	ne
 800075e:	ea95 0f0c 	teqne	r5, ip
 8000762:	d00c      	beq.n	800077e <__aeabi_dmul+0x206>
 8000764:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000768:	bf18      	it	ne
 800076a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076e:	d1d1      	bne.n	8000714 <__aeabi_dmul+0x19c>
 8000770:	ea81 0103 	eor.w	r1, r1, r3
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	bd70      	pop	{r4, r5, r6, pc}
 800077e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000782:	bf06      	itte	eq
 8000784:	4610      	moveq	r0, r2
 8000786:	4619      	moveq	r1, r3
 8000788:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078c:	d019      	beq.n	80007c2 <__aeabi_dmul+0x24a>
 800078e:	ea94 0f0c 	teq	r4, ip
 8000792:	d102      	bne.n	800079a <__aeabi_dmul+0x222>
 8000794:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000798:	d113      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 800079a:	ea95 0f0c 	teq	r5, ip
 800079e:	d105      	bne.n	80007ac <__aeabi_dmul+0x234>
 80007a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a4:	bf1c      	itt	ne
 80007a6:	4610      	movne	r0, r2
 80007a8:	4619      	movne	r1, r3
 80007aa:	d10a      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 80007ac:	ea81 0103 	eor.w	r1, r1, r3
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	bd70      	pop	{r4, r5, r6, pc}
 80007c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ca:	bd70      	pop	{r4, r5, r6, pc}

080007cc <__aeabi_ddiv>:
 80007cc:	b570      	push	{r4, r5, r6, lr}
 80007ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007da:	bf1d      	ittte	ne
 80007dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e0:	ea94 0f0c 	teqne	r4, ip
 80007e4:	ea95 0f0c 	teqne	r5, ip
 80007e8:	f000 f8a7 	bleq	800093a <__aeabi_ddiv+0x16e>
 80007ec:	eba4 0405 	sub.w	r4, r4, r5
 80007f0:	ea81 0e03 	eor.w	lr, r1, r3
 80007f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007fc:	f000 8088 	beq.w	8000910 <__aeabi_ddiv+0x144>
 8000800:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000804:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000808:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800080c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000810:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000814:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000818:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800081c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000820:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000824:	429d      	cmp	r5, r3
 8000826:	bf08      	it	eq
 8000828:	4296      	cmpeq	r6, r2
 800082a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800082e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000832:	d202      	bcs.n	800083a <__aeabi_ddiv+0x6e>
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	1ab6      	subs	r6, r6, r2
 800083c:	eb65 0503 	sbc.w	r5, r5, r3
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800084a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ac:	d018      	beq.n	80008e0 <__aeabi_ddiv+0x114>
 80008ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ca:	d1c0      	bne.n	800084e <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d0:	d10b      	bne.n	80008ea <__aeabi_ddiv+0x11e>
 80008d2:	ea41 0100 	orr.w	r1, r1, r0
 80008d6:	f04f 0000 	mov.w	r0, #0
 80008da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008de:	e7b6      	b.n	800084e <__aeabi_ddiv+0x82>
 80008e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e4:	bf04      	itt	eq
 80008e6:	4301      	orreq	r1, r0
 80008e8:	2000      	moveq	r0, #0
 80008ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ee:	bf88      	it	hi
 80008f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008f4:	f63f aeaf 	bhi.w	8000656 <__aeabi_dmul+0xde>
 80008f8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008fc:	bf04      	itt	eq
 80008fe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000902:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000906:	f150 0000 	adcs.w	r0, r0, #0
 800090a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800090e:	bd70      	pop	{r4, r5, r6, pc}
 8000910:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000914:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000918:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800091c:	bfc2      	ittt	gt
 800091e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000922:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000926:	bd70      	popgt	{r4, r5, r6, pc}
 8000928:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092c:	f04f 0e00 	mov.w	lr, #0
 8000930:	3c01      	subs	r4, #1
 8000932:	e690      	b.n	8000656 <__aeabi_dmul+0xde>
 8000934:	ea45 0e06 	orr.w	lr, r5, r6
 8000938:	e68d      	b.n	8000656 <__aeabi_dmul+0xde>
 800093a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800093e:	ea94 0f0c 	teq	r4, ip
 8000942:	bf08      	it	eq
 8000944:	ea95 0f0c 	teqeq	r5, ip
 8000948:	f43f af3b 	beq.w	80007c2 <__aeabi_dmul+0x24a>
 800094c:	ea94 0f0c 	teq	r4, ip
 8000950:	d10a      	bne.n	8000968 <__aeabi_ddiv+0x19c>
 8000952:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000956:	f47f af34 	bne.w	80007c2 <__aeabi_dmul+0x24a>
 800095a:	ea95 0f0c 	teq	r5, ip
 800095e:	f47f af25 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e72c      	b.n	80007c2 <__aeabi_dmul+0x24a>
 8000968:	ea95 0f0c 	teq	r5, ip
 800096c:	d106      	bne.n	800097c <__aeabi_ddiv+0x1b0>
 800096e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000972:	f43f aefd 	beq.w	8000770 <__aeabi_dmul+0x1f8>
 8000976:	4610      	mov	r0, r2
 8000978:	4619      	mov	r1, r3
 800097a:	e722      	b.n	80007c2 <__aeabi_dmul+0x24a>
 800097c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000986:	f47f aec5 	bne.w	8000714 <__aeabi_dmul+0x19c>
 800098a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800098e:	f47f af0d 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000992:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000996:	f47f aeeb 	bne.w	8000770 <__aeabi_dmul+0x1f8>
 800099a:	e712      	b.n	80007c2 <__aeabi_dmul+0x24a>

0800099c <__gedf2>:
 800099c:	f04f 3cff 	mov.w	ip, #4294967295
 80009a0:	e006      	b.n	80009b0 <__cmpdf2+0x4>
 80009a2:	bf00      	nop

080009a4 <__ledf2>:
 80009a4:	f04f 0c01 	mov.w	ip, #1
 80009a8:	e002      	b.n	80009b0 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__cmpdf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009c6:	d01b      	beq.n	8000a00 <__cmpdf2+0x54>
 80009c8:	b001      	add	sp, #4
 80009ca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ce:	bf0c      	ite	eq
 80009d0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009d4:	ea91 0f03 	teqne	r1, r3
 80009d8:	bf02      	ittt	eq
 80009da:	ea90 0f02 	teqeq	r0, r2
 80009de:	2000      	moveq	r0, #0
 80009e0:	4770      	bxeq	lr
 80009e2:	f110 0f00 	cmn.w	r0, #0
 80009e6:	ea91 0f03 	teq	r1, r3
 80009ea:	bf58      	it	pl
 80009ec:	4299      	cmppl	r1, r3
 80009ee:	bf08      	it	eq
 80009f0:	4290      	cmpeq	r0, r2
 80009f2:	bf2c      	ite	cs
 80009f4:	17d8      	asrcs	r0, r3, #31
 80009f6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009fa:	f040 0001 	orr.w	r0, r0, #1
 80009fe:	4770      	bx	lr
 8000a00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d102      	bne.n	8000a10 <__cmpdf2+0x64>
 8000a0a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0e:	d107      	bne.n	8000a20 <__cmpdf2+0x74>
 8000a10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a18:	d1d6      	bne.n	80009c8 <__cmpdf2+0x1c>
 8000a1a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1e:	d0d3      	beq.n	80009c8 <__cmpdf2+0x1c>
 8000a20:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdrcmple>:
 8000a28:	4684      	mov	ip, r0
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4662      	mov	r2, ip
 8000a2e:	468c      	mov	ip, r1
 8000a30:	4619      	mov	r1, r3
 8000a32:	4663      	mov	r3, ip
 8000a34:	e000      	b.n	8000a38 <__aeabi_cdcmpeq>
 8000a36:	bf00      	nop

08000a38 <__aeabi_cdcmpeq>:
 8000a38:	b501      	push	{r0, lr}
 8000a3a:	f7ff ffb7 	bl	80009ac <__cmpdf2>
 8000a3e:	2800      	cmp	r0, #0
 8000a40:	bf48      	it	mi
 8000a42:	f110 0f00 	cmnmi.w	r0, #0
 8000a46:	bd01      	pop	{r0, pc}

08000a48 <__aeabi_dcmpeq>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff fff4 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a50:	bf0c      	ite	eq
 8000a52:	2001      	moveq	r0, #1
 8000a54:	2000      	movne	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmplt>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffea 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a64:	bf34      	ite	cc
 8000a66:	2001      	movcc	r0, #1
 8000a68:	2000      	movcs	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmple>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffe0 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a78:	bf94      	ite	ls
 8000a7a:	2001      	movls	r0, #1
 8000a7c:	2000      	movhi	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpge>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffce 	bl	8000a28 <__aeabi_cdrcmple>
 8000a8c:	bf94      	ite	ls
 8000a8e:	2001      	movls	r0, #1
 8000a90:	2000      	movhi	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmpgt>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffc4 	bl	8000a28 <__aeabi_cdrcmple>
 8000aa0:	bf34      	ite	cc
 8000aa2:	2001      	movcc	r0, #1
 8000aa4:	2000      	movcs	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmpun>:
 8000aac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab4:	d102      	bne.n	8000abc <__aeabi_dcmpun+0x10>
 8000ab6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aba:	d10a      	bne.n	8000ad2 <__aeabi_dcmpun+0x26>
 8000abc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac4:	d102      	bne.n	8000acc <__aeabi_dcmpun+0x20>
 8000ac6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aca:	d102      	bne.n	8000ad2 <__aeabi_dcmpun+0x26>
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	f04f 0001 	mov.w	r0, #1
 8000ad6:	4770      	bx	lr

08000ad8 <__aeabi_d2iz>:
 8000ad8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000adc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ae0:	d215      	bcs.n	8000b0e <__aeabi_d2iz+0x36>
 8000ae2:	d511      	bpl.n	8000b08 <__aeabi_d2iz+0x30>
 8000ae4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ae8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aec:	d912      	bls.n	8000b14 <__aeabi_d2iz+0x3c>
 8000aee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000af6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000afa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000afe:	fa23 f002 	lsr.w	r0, r3, r2
 8000b02:	bf18      	it	ne
 8000b04:	4240      	negne	r0, r0
 8000b06:	4770      	bx	lr
 8000b08:	f04f 0000 	mov.w	r0, #0
 8000b0c:	4770      	bx	lr
 8000b0e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b12:	d105      	bne.n	8000b20 <__aeabi_d2iz+0x48>
 8000b14:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b18:	bf08      	it	eq
 8000b1a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b1e:	4770      	bx	lr
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_d2uiz>:
 8000b28:	004a      	lsls	r2, r1, #1
 8000b2a:	d211      	bcs.n	8000b50 <__aeabi_d2uiz+0x28>
 8000b2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b30:	d211      	bcs.n	8000b56 <__aeabi_d2uiz+0x2e>
 8000b32:	d50d      	bpl.n	8000b50 <__aeabi_d2uiz+0x28>
 8000b34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b3c:	d40e      	bmi.n	8000b5c <__aeabi_d2uiz+0x34>
 8000b3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_d2uiz+0x3a>
 8000b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0000 	mov.w	r0, #0
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_uldivmod>:
 8000b68:	b953      	cbnz	r3, 8000b80 <__aeabi_uldivmod+0x18>
 8000b6a:	b94a      	cbnz	r2, 8000b80 <__aeabi_uldivmod+0x18>
 8000b6c:	2900      	cmp	r1, #0
 8000b6e:	bf08      	it	eq
 8000b70:	2800      	cmpeq	r0, #0
 8000b72:	bf1c      	itt	ne
 8000b74:	f04f 31ff 	movne.w	r1, #4294967295
 8000b78:	f04f 30ff 	movne.w	r0, #4294967295
 8000b7c:	f000 b97a 	b.w	8000e74 <__aeabi_idiv0>
 8000b80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b88:	f000 f806 	bl	8000b98 <__udivmoddi4>
 8000b8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b94:	b004      	add	sp, #16
 8000b96:	4770      	bx	lr

08000b98 <__udivmoddi4>:
 8000b98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b9c:	468c      	mov	ip, r1
 8000b9e:	460d      	mov	r5, r1
 8000ba0:	4604      	mov	r4, r0
 8000ba2:	9e08      	ldr	r6, [sp, #32]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d151      	bne.n	8000c4c <__udivmoddi4+0xb4>
 8000ba8:	428a      	cmp	r2, r1
 8000baa:	4617      	mov	r7, r2
 8000bac:	d96d      	bls.n	8000c8a <__udivmoddi4+0xf2>
 8000bae:	fab2 fe82 	clz	lr, r2
 8000bb2:	f1be 0f00 	cmp.w	lr, #0
 8000bb6:	d00b      	beq.n	8000bd0 <__udivmoddi4+0x38>
 8000bb8:	f1ce 0c20 	rsb	ip, lr, #32
 8000bbc:	fa01 f50e 	lsl.w	r5, r1, lr
 8000bc0:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000bc4:	fa02 f70e 	lsl.w	r7, r2, lr
 8000bc8:	ea4c 0c05 	orr.w	ip, ip, r5
 8000bcc:	fa00 f40e 	lsl.w	r4, r0, lr
 8000bd0:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000bd4:	0c25      	lsrs	r5, r4, #16
 8000bd6:	fbbc f8fa 	udiv	r8, ip, sl
 8000bda:	fa1f f987 	uxth.w	r9, r7
 8000bde:	fb0a cc18 	mls	ip, sl, r8, ip
 8000be2:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000be6:	fb08 f309 	mul.w	r3, r8, r9
 8000bea:	42ab      	cmp	r3, r5
 8000bec:	d90a      	bls.n	8000c04 <__udivmoddi4+0x6c>
 8000bee:	19ed      	adds	r5, r5, r7
 8000bf0:	f108 32ff 	add.w	r2, r8, #4294967295
 8000bf4:	f080 8123 	bcs.w	8000e3e <__udivmoddi4+0x2a6>
 8000bf8:	42ab      	cmp	r3, r5
 8000bfa:	f240 8120 	bls.w	8000e3e <__udivmoddi4+0x2a6>
 8000bfe:	f1a8 0802 	sub.w	r8, r8, #2
 8000c02:	443d      	add	r5, r7
 8000c04:	1aed      	subs	r5, r5, r3
 8000c06:	b2a4      	uxth	r4, r4
 8000c08:	fbb5 f0fa 	udiv	r0, r5, sl
 8000c0c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000c10:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c14:	fb00 f909 	mul.w	r9, r0, r9
 8000c18:	45a1      	cmp	r9, r4
 8000c1a:	d909      	bls.n	8000c30 <__udivmoddi4+0x98>
 8000c1c:	19e4      	adds	r4, r4, r7
 8000c1e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c22:	f080 810a 	bcs.w	8000e3a <__udivmoddi4+0x2a2>
 8000c26:	45a1      	cmp	r9, r4
 8000c28:	f240 8107 	bls.w	8000e3a <__udivmoddi4+0x2a2>
 8000c2c:	3802      	subs	r0, #2
 8000c2e:	443c      	add	r4, r7
 8000c30:	eba4 0409 	sub.w	r4, r4, r9
 8000c34:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c38:	2100      	movs	r1, #0
 8000c3a:	2e00      	cmp	r6, #0
 8000c3c:	d061      	beq.n	8000d02 <__udivmoddi4+0x16a>
 8000c3e:	fa24 f40e 	lsr.w	r4, r4, lr
 8000c42:	2300      	movs	r3, #0
 8000c44:	6034      	str	r4, [r6, #0]
 8000c46:	6073      	str	r3, [r6, #4]
 8000c48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4c:	428b      	cmp	r3, r1
 8000c4e:	d907      	bls.n	8000c60 <__udivmoddi4+0xc8>
 8000c50:	2e00      	cmp	r6, #0
 8000c52:	d054      	beq.n	8000cfe <__udivmoddi4+0x166>
 8000c54:	2100      	movs	r1, #0
 8000c56:	e886 0021 	stmia.w	r6, {r0, r5}
 8000c5a:	4608      	mov	r0, r1
 8000c5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c60:	fab3 f183 	clz	r1, r3
 8000c64:	2900      	cmp	r1, #0
 8000c66:	f040 808e 	bne.w	8000d86 <__udivmoddi4+0x1ee>
 8000c6a:	42ab      	cmp	r3, r5
 8000c6c:	d302      	bcc.n	8000c74 <__udivmoddi4+0xdc>
 8000c6e:	4282      	cmp	r2, r0
 8000c70:	f200 80fa 	bhi.w	8000e68 <__udivmoddi4+0x2d0>
 8000c74:	1a84      	subs	r4, r0, r2
 8000c76:	eb65 0503 	sbc.w	r5, r5, r3
 8000c7a:	2001      	movs	r0, #1
 8000c7c:	46ac      	mov	ip, r5
 8000c7e:	2e00      	cmp	r6, #0
 8000c80:	d03f      	beq.n	8000d02 <__udivmoddi4+0x16a>
 8000c82:	e886 1010 	stmia.w	r6, {r4, ip}
 8000c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8a:	b912      	cbnz	r2, 8000c92 <__udivmoddi4+0xfa>
 8000c8c:	2701      	movs	r7, #1
 8000c8e:	fbb7 f7f2 	udiv	r7, r7, r2
 8000c92:	fab7 fe87 	clz	lr, r7
 8000c96:	f1be 0f00 	cmp.w	lr, #0
 8000c9a:	d134      	bne.n	8000d06 <__udivmoddi4+0x16e>
 8000c9c:	1beb      	subs	r3, r5, r7
 8000c9e:	0c3a      	lsrs	r2, r7, #16
 8000ca0:	fa1f fc87 	uxth.w	ip, r7
 8000ca4:	2101      	movs	r1, #1
 8000ca6:	fbb3 f8f2 	udiv	r8, r3, r2
 8000caa:	0c25      	lsrs	r5, r4, #16
 8000cac:	fb02 3318 	mls	r3, r2, r8, r3
 8000cb0:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000cb4:	fb0c f308 	mul.w	r3, ip, r8
 8000cb8:	42ab      	cmp	r3, r5
 8000cba:	d907      	bls.n	8000ccc <__udivmoddi4+0x134>
 8000cbc:	19ed      	adds	r5, r5, r7
 8000cbe:	f108 30ff 	add.w	r0, r8, #4294967295
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0x132>
 8000cc4:	42ab      	cmp	r3, r5
 8000cc6:	f200 80d1 	bhi.w	8000e6c <__udivmoddi4+0x2d4>
 8000cca:	4680      	mov	r8, r0
 8000ccc:	1aed      	subs	r5, r5, r3
 8000cce:	b2a3      	uxth	r3, r4
 8000cd0:	fbb5 f0f2 	udiv	r0, r5, r2
 8000cd4:	fb02 5510 	mls	r5, r2, r0, r5
 8000cd8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000cdc:	fb0c fc00 	mul.w	ip, ip, r0
 8000ce0:	45a4      	cmp	ip, r4
 8000ce2:	d907      	bls.n	8000cf4 <__udivmoddi4+0x15c>
 8000ce4:	19e4      	adds	r4, r4, r7
 8000ce6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x15a>
 8000cec:	45a4      	cmp	ip, r4
 8000cee:	f200 80b8 	bhi.w	8000e62 <__udivmoddi4+0x2ca>
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	eba4 040c 	sub.w	r4, r4, ip
 8000cf8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cfc:	e79d      	b.n	8000c3a <__udivmoddi4+0xa2>
 8000cfe:	4631      	mov	r1, r6
 8000d00:	4630      	mov	r0, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	f1ce 0420 	rsb	r4, lr, #32
 8000d0a:	fa05 f30e 	lsl.w	r3, r5, lr
 8000d0e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d12:	fa20 f804 	lsr.w	r8, r0, r4
 8000d16:	0c3a      	lsrs	r2, r7, #16
 8000d18:	fa25 f404 	lsr.w	r4, r5, r4
 8000d1c:	ea48 0803 	orr.w	r8, r8, r3
 8000d20:	fbb4 f1f2 	udiv	r1, r4, r2
 8000d24:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000d28:	fb02 4411 	mls	r4, r2, r1, r4
 8000d2c:	fa1f fc87 	uxth.w	ip, r7
 8000d30:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000d34:	fb01 f30c 	mul.w	r3, r1, ip
 8000d38:	42ab      	cmp	r3, r5
 8000d3a:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x1bc>
 8000d40:	19ed      	adds	r5, r5, r7
 8000d42:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d46:	f080 808a 	bcs.w	8000e5e <__udivmoddi4+0x2c6>
 8000d4a:	42ab      	cmp	r3, r5
 8000d4c:	f240 8087 	bls.w	8000e5e <__udivmoddi4+0x2c6>
 8000d50:	3902      	subs	r1, #2
 8000d52:	443d      	add	r5, r7
 8000d54:	1aeb      	subs	r3, r5, r3
 8000d56:	fa1f f588 	uxth.w	r5, r8
 8000d5a:	fbb3 f0f2 	udiv	r0, r3, r2
 8000d5e:	fb02 3310 	mls	r3, r2, r0, r3
 8000d62:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d66:	fb00 f30c 	mul.w	r3, r0, ip
 8000d6a:	42ab      	cmp	r3, r5
 8000d6c:	d907      	bls.n	8000d7e <__udivmoddi4+0x1e6>
 8000d6e:	19ed      	adds	r5, r5, r7
 8000d70:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d74:	d26f      	bcs.n	8000e56 <__udivmoddi4+0x2be>
 8000d76:	42ab      	cmp	r3, r5
 8000d78:	d96d      	bls.n	8000e56 <__udivmoddi4+0x2be>
 8000d7a:	3802      	subs	r0, #2
 8000d7c:	443d      	add	r5, r7
 8000d7e:	1aeb      	subs	r3, r5, r3
 8000d80:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d84:	e78f      	b.n	8000ca6 <__udivmoddi4+0x10e>
 8000d86:	f1c1 0720 	rsb	r7, r1, #32
 8000d8a:	fa22 f807 	lsr.w	r8, r2, r7
 8000d8e:	408b      	lsls	r3, r1
 8000d90:	fa05 f401 	lsl.w	r4, r5, r1
 8000d94:	ea48 0303 	orr.w	r3, r8, r3
 8000d98:	fa20 fe07 	lsr.w	lr, r0, r7
 8000d9c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000da0:	40fd      	lsrs	r5, r7
 8000da2:	ea4e 0e04 	orr.w	lr, lr, r4
 8000da6:	fbb5 f9fc 	udiv	r9, r5, ip
 8000daa:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000dae:	fb0c 5519 	mls	r5, ip, r9, r5
 8000db2:	fa1f f883 	uxth.w	r8, r3
 8000db6:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000dba:	fb09 f408 	mul.w	r4, r9, r8
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	fa02 f201 	lsl.w	r2, r2, r1
 8000dc4:	fa00 fa01 	lsl.w	sl, r0, r1
 8000dc8:	d908      	bls.n	8000ddc <__udivmoddi4+0x244>
 8000dca:	18ed      	adds	r5, r5, r3
 8000dcc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dd0:	d243      	bcs.n	8000e5a <__udivmoddi4+0x2c2>
 8000dd2:	42ac      	cmp	r4, r5
 8000dd4:	d941      	bls.n	8000e5a <__udivmoddi4+0x2c2>
 8000dd6:	f1a9 0902 	sub.w	r9, r9, #2
 8000dda:	441d      	add	r5, r3
 8000ddc:	1b2d      	subs	r5, r5, r4
 8000dde:	fa1f fe8e 	uxth.w	lr, lr
 8000de2:	fbb5 f0fc 	udiv	r0, r5, ip
 8000de6:	fb0c 5510 	mls	r5, ip, r0, r5
 8000dea:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000dee:	fb00 f808 	mul.w	r8, r0, r8
 8000df2:	45a0      	cmp	r8, r4
 8000df4:	d907      	bls.n	8000e06 <__udivmoddi4+0x26e>
 8000df6:	18e4      	adds	r4, r4, r3
 8000df8:	f100 35ff 	add.w	r5, r0, #4294967295
 8000dfc:	d229      	bcs.n	8000e52 <__udivmoddi4+0x2ba>
 8000dfe:	45a0      	cmp	r8, r4
 8000e00:	d927      	bls.n	8000e52 <__udivmoddi4+0x2ba>
 8000e02:	3802      	subs	r0, #2
 8000e04:	441c      	add	r4, r3
 8000e06:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e0a:	eba4 0408 	sub.w	r4, r4, r8
 8000e0e:	fba0 8902 	umull	r8, r9, r0, r2
 8000e12:	454c      	cmp	r4, r9
 8000e14:	46c6      	mov	lr, r8
 8000e16:	464d      	mov	r5, r9
 8000e18:	d315      	bcc.n	8000e46 <__udivmoddi4+0x2ae>
 8000e1a:	d012      	beq.n	8000e42 <__udivmoddi4+0x2aa>
 8000e1c:	b156      	cbz	r6, 8000e34 <__udivmoddi4+0x29c>
 8000e1e:	ebba 030e 	subs.w	r3, sl, lr
 8000e22:	eb64 0405 	sbc.w	r4, r4, r5
 8000e26:	fa04 f707 	lsl.w	r7, r4, r7
 8000e2a:	40cb      	lsrs	r3, r1
 8000e2c:	431f      	orrs	r7, r3
 8000e2e:	40cc      	lsrs	r4, r1
 8000e30:	6037      	str	r7, [r6, #0]
 8000e32:	6074      	str	r4, [r6, #4]
 8000e34:	2100      	movs	r1, #0
 8000e36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	e6f8      	b.n	8000c30 <__udivmoddi4+0x98>
 8000e3e:	4690      	mov	r8, r2
 8000e40:	e6e0      	b.n	8000c04 <__udivmoddi4+0x6c>
 8000e42:	45c2      	cmp	sl, r8
 8000e44:	d2ea      	bcs.n	8000e1c <__udivmoddi4+0x284>
 8000e46:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e4a:	eb69 0503 	sbc.w	r5, r9, r3
 8000e4e:	3801      	subs	r0, #1
 8000e50:	e7e4      	b.n	8000e1c <__udivmoddi4+0x284>
 8000e52:	4628      	mov	r0, r5
 8000e54:	e7d7      	b.n	8000e06 <__udivmoddi4+0x26e>
 8000e56:	4640      	mov	r0, r8
 8000e58:	e791      	b.n	8000d7e <__udivmoddi4+0x1e6>
 8000e5a:	4681      	mov	r9, r0
 8000e5c:	e7be      	b.n	8000ddc <__udivmoddi4+0x244>
 8000e5e:	4601      	mov	r1, r0
 8000e60:	e778      	b.n	8000d54 <__udivmoddi4+0x1bc>
 8000e62:	3802      	subs	r0, #2
 8000e64:	443c      	add	r4, r7
 8000e66:	e745      	b.n	8000cf4 <__udivmoddi4+0x15c>
 8000e68:	4608      	mov	r0, r1
 8000e6a:	e708      	b.n	8000c7e <__udivmoddi4+0xe6>
 8000e6c:	f1a8 0802 	sub.w	r8, r8, #2
 8000e70:	443d      	add	r5, r7
 8000e72:	e72b      	b.n	8000ccc <__udivmoddi4+0x134>

08000e74 <__aeabi_idiv0>:
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop

08000e78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e78:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e7a:	4a0e      	ldr	r2, [pc, #56]	; (8000eb4 <HAL_InitTick+0x3c>)
 8000e7c:	4b0e      	ldr	r3, [pc, #56]	; (8000eb8 <HAL_InitTick+0x40>)
{
 8000e7e:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e80:	7818      	ldrb	r0, [r3, #0]
 8000e82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e86:	fbb3 f3f0 	udiv	r3, r3, r0
 8000e8a:	6810      	ldr	r0, [r2, #0]
 8000e8c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000e90:	f000 f894 	bl	8000fbc <HAL_SYSTICK_Config>
 8000e94:	4604      	mov	r4, r0
 8000e96:	b958      	cbnz	r0, 8000eb0 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e98:	2d0f      	cmp	r5, #15
 8000e9a:	d809      	bhi.n	8000eb0 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	4629      	mov	r1, r5
 8000ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ea4:	f000 f84a 	bl	8000f3c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ea8:	4b04      	ldr	r3, [pc, #16]	; (8000ebc <HAL_InitTick+0x44>)
 8000eaa:	4620      	mov	r0, r4
 8000eac:	601d      	str	r5, [r3, #0]
 8000eae:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000eb0:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000eb2:	bd38      	pop	{r3, r4, r5, pc}
 8000eb4:	20000010 	.word	0x20000010
 8000eb8:	20000000 	.word	0x20000000
 8000ebc:	20000004 	.word	0x20000004

08000ec0 <HAL_Init>:
{
 8000ec0:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ec2:	4b0b      	ldr	r3, [pc, #44]	; (8000ef0 <HAL_Init+0x30>)
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000eca:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000ed2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000eda:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000edc:	2003      	movs	r0, #3
 8000ede:	f000 f81b 	bl	8000f18 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ee2:	2000      	movs	r0, #0
 8000ee4:	f7ff ffc8 	bl	8000e78 <HAL_InitTick>
  HAL_MspInit();
 8000ee8:	f002 f99e 	bl	8003228 <HAL_MspInit>
}
 8000eec:	2000      	movs	r0, #0
 8000eee:	bd08      	pop	{r3, pc}
 8000ef0:	40023c00 	.word	0x40023c00

08000ef4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000ef4:	4a03      	ldr	r2, [pc, #12]	; (8000f04 <HAL_IncTick+0x10>)
 8000ef6:	4b04      	ldr	r3, [pc, #16]	; (8000f08 <HAL_IncTick+0x14>)
 8000ef8:	6811      	ldr	r1, [r2, #0]
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	440b      	add	r3, r1
 8000efe:	6013      	str	r3, [r2, #0]
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	20000228 	.word	0x20000228
 8000f08:	20000000 	.word	0x20000000

08000f0c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000f0c:	4b01      	ldr	r3, [pc, #4]	; (8000f14 <HAL_GetTick+0x8>)
 8000f0e:	6818      	ldr	r0, [r3, #0]
}
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	20000228 	.word	0x20000228

08000f18 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f18:	4a07      	ldr	r2, [pc, #28]	; (8000f38 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000f1a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f1c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000f20:	041b      	lsls	r3, r3, #16
 8000f22:	0c1b      	lsrs	r3, r3, #16
 8000f24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000f28:	0200      	lsls	r0, r0, #8
 8000f2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f2e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000f32:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000f34:	60d3      	str	r3, [r2, #12]
 8000f36:	4770      	bx	lr
 8000f38:	e000ed00 	.word	0xe000ed00

08000f3c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f3c:	4b17      	ldr	r3, [pc, #92]	; (8000f9c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f3e:	b530      	push	{r4, r5, lr}
 8000f40:	68dc      	ldr	r4, [r3, #12]
 8000f42:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f46:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f4a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f4c:	2b04      	cmp	r3, #4
 8000f4e:	bf28      	it	cs
 8000f50:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f52:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f54:	f04f 0501 	mov.w	r5, #1
 8000f58:	fa05 f303 	lsl.w	r3, r5, r3
 8000f5c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f60:	bf8c      	ite	hi
 8000f62:	3c03      	subhi	r4, #3
 8000f64:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f66:	4019      	ands	r1, r3
 8000f68:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f6a:	fa05 f404 	lsl.w	r4, r5, r4
 8000f6e:	3c01      	subs	r4, #1
 8000f70:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000f72:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f74:	ea42 0201 	orr.w	r2, r2, r1
 8000f78:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f7c:	bfaf      	iteee	ge
 8000f7e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f82:	f000 000f 	andlt.w	r0, r0, #15
 8000f86:	4b06      	ldrlt	r3, [pc, #24]	; (8000fa0 <HAL_NVIC_SetPriority+0x64>)
 8000f88:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f8a:	bfa5      	ittet	ge
 8000f8c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000f90:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f92:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f94:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000f98:	bd30      	pop	{r4, r5, pc}
 8000f9a:	bf00      	nop
 8000f9c:	e000ed00 	.word	0xe000ed00
 8000fa0:	e000ed14 	.word	0xe000ed14

08000fa4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000fa4:	0942      	lsrs	r2, r0, #5
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	f000 001f 	and.w	r0, r0, #31
 8000fac:	fa03 f000 	lsl.w	r0, r3, r0
 8000fb0:	4b01      	ldr	r3, [pc, #4]	; (8000fb8 <HAL_NVIC_EnableIRQ+0x14>)
 8000fb2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000fb6:	4770      	bx	lr
 8000fb8:	e000e100 	.word	0xe000e100

08000fbc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fbc:	3801      	subs	r0, #1
 8000fbe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000fc2:	d20a      	bcs.n	8000fda <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fc4:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc6:	4a07      	ldr	r2, [pc, #28]	; (8000fe4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fc8:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fca:	21f0      	movs	r1, #240	; 0xf0
 8000fcc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fd0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fd2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fd4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000fda:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	e000e010 	.word	0xe000e010
 8000fe4:	e000ed00 	.word	0xe000ed00

08000fe8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000fe8:	4b04      	ldr	r3, [pc, #16]	; (8000ffc <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000fea:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000fec:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000fee:	bf0c      	ite	eq
 8000ff0:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000ff4:	f022 0204 	bicne.w	r2, r2, #4
 8000ff8:	601a      	str	r2, [r3, #0]
 8000ffa:	4770      	bx	lr
 8000ffc:	e000e010 	.word	0xe000e010

08001000 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001000:	4770      	bx	lr

08001002 <HAL_SYSTICK_IRQHandler>:
{
 8001002:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8001004:	f7ff fffc 	bl	8001000 <HAL_SYSTICK_Callback>
 8001008:	bd08      	pop	{r3, pc}
	...

0800100c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800100c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001010:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001012:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001014:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80011b8 <HAL_GPIO_Init+0x1ac>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001018:	4a65      	ldr	r2, [pc, #404]	; (80011b0 <HAL_GPIO_Init+0x1a4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800101a:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 80011bc <HAL_GPIO_Init+0x1b0>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800101e:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001020:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8001022:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001026:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8001028:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800102c:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8001030:	45b6      	cmp	lr, r6
 8001032:	f040 80aa 	bne.w	800118a <HAL_GPIO_Init+0x17e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001036:	684c      	ldr	r4, [r1, #4]
 8001038:	f024 0710 	bic.w	r7, r4, #16
 800103c:	2f02      	cmp	r7, #2
 800103e:	d116      	bne.n	800106e <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8001040:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8001044:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001048:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 800104c:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001050:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001054:	f04f 0c0f 	mov.w	ip, #15
 8001058:	fa0c fc0b 	lsl.w	ip, ip, fp
 800105c:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001060:	690d      	ldr	r5, [r1, #16]
 8001062:	fa05 f50b 	lsl.w	r5, r5, fp
 8001066:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 800106a:	f8ca 5020 	str.w	r5, [sl, #32]
 800106e:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001072:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8001074:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001078:	fa05 f50a 	lsl.w	r5, r5, sl
 800107c:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800107e:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001082:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001086:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800108a:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800108c:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001090:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8001092:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001096:	d811      	bhi.n	80010bc <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8001098:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800109a:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 800109e:	68cf      	ldr	r7, [r1, #12]
 80010a0:	fa07 fc0a 	lsl.w	ip, r7, sl
 80010a4:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 80010a8:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80010aa:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010ac:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80010b0:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80010b4:	409f      	lsls	r7, r3
 80010b6:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80010ba:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80010bc:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010be:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010c0:	688f      	ldr	r7, [r1, #8]
 80010c2:	fa07 f70a 	lsl.w	r7, r7, sl
 80010c6:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80010c8:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010ca:	00e5      	lsls	r5, r4, #3
 80010cc:	d55d      	bpl.n	800118a <HAL_GPIO_Init+0x17e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ce:	f04f 0b00 	mov.w	fp, #0
 80010d2:	f8cd b00c 	str.w	fp, [sp, #12]
 80010d6:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010da:	4d36      	ldr	r5, [pc, #216]	; (80011b4 <HAL_GPIO_Init+0x1a8>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010dc:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80010e0:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80010e4:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80010e8:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80010ec:	9703      	str	r7, [sp, #12]
 80010ee:	9f03      	ldr	r7, [sp, #12]
 80010f0:	f023 0703 	bic.w	r7, r3, #3
 80010f4:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80010f8:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010fc:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8001100:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001104:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001108:	f04f 0e0f 	mov.w	lr, #15
 800110c:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001110:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001112:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001116:	d03f      	beq.n	8001198 <HAL_GPIO_Init+0x18c>
 8001118:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800111c:	42a8      	cmp	r0, r5
 800111e:	d03d      	beq.n	800119c <HAL_GPIO_Init+0x190>
 8001120:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001124:	42a8      	cmp	r0, r5
 8001126:	d03b      	beq.n	80011a0 <HAL_GPIO_Init+0x194>
 8001128:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800112c:	42a8      	cmp	r0, r5
 800112e:	d039      	beq.n	80011a4 <HAL_GPIO_Init+0x198>
 8001130:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001134:	42a8      	cmp	r0, r5
 8001136:	d037      	beq.n	80011a8 <HAL_GPIO_Init+0x19c>
 8001138:	4548      	cmp	r0, r9
 800113a:	d037      	beq.n	80011ac <HAL_GPIO_Init+0x1a0>
 800113c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001140:	42a8      	cmp	r0, r5
 8001142:	bf14      	ite	ne
 8001144:	2507      	movne	r5, #7
 8001146:	2506      	moveq	r5, #6
 8001148:	fa05 f50c 	lsl.w	r5, r5, ip
 800114c:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001150:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8001152:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001154:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001156:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 800115a:	bf0c      	ite	eq
 800115c:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800115e:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8001160:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8001162:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001164:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001168:	bf0c      	ite	eq
 800116a:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800116c:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 800116e:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001170:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001172:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001176:	bf0c      	ite	eq
 8001178:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800117a:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 800117c:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 800117e:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001180:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8001182:	bf54      	ite	pl
 8001184:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8001186:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8001188:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800118a:	3301      	adds	r3, #1
 800118c:	2b10      	cmp	r3, #16
 800118e:	f47f af48 	bne.w	8001022 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8001192:	b005      	add	sp, #20
 8001194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001198:	465d      	mov	r5, fp
 800119a:	e7d5      	b.n	8001148 <HAL_GPIO_Init+0x13c>
 800119c:	2501      	movs	r5, #1
 800119e:	e7d3      	b.n	8001148 <HAL_GPIO_Init+0x13c>
 80011a0:	2502      	movs	r5, #2
 80011a2:	e7d1      	b.n	8001148 <HAL_GPIO_Init+0x13c>
 80011a4:	2503      	movs	r5, #3
 80011a6:	e7cf      	b.n	8001148 <HAL_GPIO_Init+0x13c>
 80011a8:	2504      	movs	r5, #4
 80011aa:	e7cd      	b.n	8001148 <HAL_GPIO_Init+0x13c>
 80011ac:	2505      	movs	r5, #5
 80011ae:	e7cb      	b.n	8001148 <HAL_GPIO_Init+0x13c>
 80011b0:	40013c00 	.word	0x40013c00
 80011b4:	40020000 	.word	0x40020000
 80011b8:	40023800 	.word	0x40023800
 80011bc:	40021400 	.word	0x40021400

080011c0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011c0:	b10a      	cbz	r2, 80011c6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011c2:	6181      	str	r1, [r0, #24]
 80011c4:	4770      	bx	lr
 80011c6:	0409      	lsls	r1, r1, #16
 80011c8:	e7fb      	b.n	80011c2 <HAL_GPIO_WritePin+0x2>
	...

080011cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011d0:	460d      	mov	r5, r1
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80011d2:	4604      	mov	r4, r0
 80011d4:	b910      	cbnz	r0, 80011dc <HAL_RCC_ClockConfig+0x10>
  {
    return HAL_ERROR;
 80011d6:	2001      	movs	r0, #1
 80011d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80011dc:	4b44      	ldr	r3, [pc, #272]	; (80012f0 <HAL_RCC_ClockConfig+0x124>)
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	f002 020f 	and.w	r2, r2, #15
 80011e4:	428a      	cmp	r2, r1
 80011e6:	d328      	bcc.n	800123a <HAL_RCC_ClockConfig+0x6e>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011e8:	6821      	ldr	r1, [r4, #0]
 80011ea:	078f      	lsls	r7, r1, #30
 80011ec:	d42d      	bmi.n	800124a <HAL_RCC_ClockConfig+0x7e>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011ee:	07c8      	lsls	r0, r1, #31
 80011f0:	d440      	bmi.n	8001274 <HAL_RCC_ClockConfig+0xa8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80011f2:	4b3f      	ldr	r3, [pc, #252]	; (80012f0 <HAL_RCC_ClockConfig+0x124>)
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	f002 020f 	and.w	r2, r2, #15
 80011fa:	4295      	cmp	r5, r2
 80011fc:	d366      	bcc.n	80012cc <HAL_RCC_ClockConfig+0x100>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011fe:	6822      	ldr	r2, [r4, #0]
 8001200:	0751      	lsls	r1, r2, #29
 8001202:	d46c      	bmi.n	80012de <HAL_RCC_ClockConfig+0x112>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001204:	0713      	lsls	r3, r2, #28
 8001206:	d507      	bpl.n	8001218 <HAL_RCC_ClockConfig+0x4c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001208:	4a3a      	ldr	r2, [pc, #232]	; (80012f4 <HAL_RCC_ClockConfig+0x128>)
 800120a:	6921      	ldr	r1, [r4, #16]
 800120c:	6893      	ldr	r3, [r2, #8]
 800120e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001212:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001216:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001218:	f000 f898 	bl	800134c <HAL_RCC_GetSysClockFreq>
 800121c:	4b35      	ldr	r3, [pc, #212]	; (80012f4 <HAL_RCC_ClockConfig+0x128>)
 800121e:	4a36      	ldr	r2, [pc, #216]	; (80012f8 <HAL_RCC_ClockConfig+0x12c>)
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001226:	5cd3      	ldrb	r3, [r2, r3]
 8001228:	40d8      	lsrs	r0, r3
 800122a:	4b34      	ldr	r3, [pc, #208]	; (80012fc <HAL_RCC_ClockConfig+0x130>)
 800122c:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800122e:	2000      	movs	r0, #0
 8001230:	f7ff fe22 	bl	8000e78 <HAL_InitTick>

  return HAL_OK;
 8001234:	2000      	movs	r0, #0
 8001236:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800123a:	b2ca      	uxtb	r2, r1
 800123c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f003 030f 	and.w	r3, r3, #15
 8001244:	4299      	cmp	r1, r3
 8001246:	d1c6      	bne.n	80011d6 <HAL_RCC_ClockConfig+0xa>
 8001248:	e7ce      	b.n	80011e8 <HAL_RCC_ClockConfig+0x1c>
 800124a:	4b2a      	ldr	r3, [pc, #168]	; (80012f4 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800124c:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001250:	bf1e      	ittt	ne
 8001252:	689a      	ldrne	r2, [r3, #8]
 8001254:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8001258:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800125a:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800125c:	bf42      	ittt	mi
 800125e:	689a      	ldrmi	r2, [r3, #8]
 8001260:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8001264:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001266:	689a      	ldr	r2, [r3, #8]
 8001268:	68a0      	ldr	r0, [r4, #8]
 800126a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800126e:	4302      	orrs	r2, r0
 8001270:	609a      	str	r2, [r3, #8]
 8001272:	e7bc      	b.n	80011ee <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001274:	6862      	ldr	r2, [r4, #4]
 8001276:	4b1f      	ldr	r3, [pc, #124]	; (80012f4 <HAL_RCC_ClockConfig+0x128>)
 8001278:	2a01      	cmp	r2, #1
 800127a:	d11d      	bne.n	80012b8 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001282:	d0a8      	beq.n	80011d6 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001284:	4e1b      	ldr	r6, [pc, #108]	; (80012f4 <HAL_RCC_ClockConfig+0x128>)
 8001286:	68b3      	ldr	r3, [r6, #8]
 8001288:	f023 0303 	bic.w	r3, r3, #3
 800128c:	4313      	orrs	r3, r2
 800128e:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001290:	f7ff fe3c 	bl	8000f0c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001294:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001298:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800129a:	68b3      	ldr	r3, [r6, #8]
 800129c:	6862      	ldr	r2, [r4, #4]
 800129e:	f003 030c 	and.w	r3, r3, #12
 80012a2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80012a6:	d0a4      	beq.n	80011f2 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012a8:	f7ff fe30 	bl	8000f0c <HAL_GetTick>
 80012ac:	1bc0      	subs	r0, r0, r7
 80012ae:	4540      	cmp	r0, r8
 80012b0:	d9f3      	bls.n	800129a <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 80012b2:	2003      	movs	r0, #3
}
 80012b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80012b8:	1e91      	subs	r1, r2, #2
 80012ba:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012bc:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80012be:	d802      	bhi.n	80012c6 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012c0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80012c4:	e7dd      	b.n	8001282 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012c6:	f013 0f02 	tst.w	r3, #2
 80012ca:	e7da      	b.n	8001282 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012cc:	b2ea      	uxtb	r2, r5
 80012ce:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f003 030f 	and.w	r3, r3, #15
 80012d6:	429d      	cmp	r5, r3
 80012d8:	f47f af7d 	bne.w	80011d6 <HAL_RCC_ClockConfig+0xa>
 80012dc:	e78f      	b.n	80011fe <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012de:	4905      	ldr	r1, [pc, #20]	; (80012f4 <HAL_RCC_ClockConfig+0x128>)
 80012e0:	68e0      	ldr	r0, [r4, #12]
 80012e2:	688b      	ldr	r3, [r1, #8]
 80012e4:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80012e8:	4303      	orrs	r3, r0
 80012ea:	608b      	str	r3, [r1, #8]
 80012ec:	e78a      	b.n	8001204 <HAL_RCC_ClockConfig+0x38>
 80012ee:	bf00      	nop
 80012f0:	40023c00 	.word	0x40023c00
 80012f4:	40023800 	.word	0x40023800
 80012f8:	08006330 	.word	0x08006330
 80012fc:	20000010 	.word	0x20000010

08001300 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001300:	4b01      	ldr	r3, [pc, #4]	; (8001308 <HAL_RCC_GetHCLKFreq+0x8>)
 8001302:	6818      	ldr	r0, [r3, #0]
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	20000010 	.word	0x20000010

0800130c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800130c:	4b04      	ldr	r3, [pc, #16]	; (8001320 <HAL_RCC_GetPCLK1Freq+0x14>)
 800130e:	4a05      	ldr	r2, [pc, #20]	; (8001324 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001316:	5cd3      	ldrb	r3, [r2, r3]
 8001318:	4a03      	ldr	r2, [pc, #12]	; (8001328 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800131a:	6810      	ldr	r0, [r2, #0]
}
 800131c:	40d8      	lsrs	r0, r3
 800131e:	4770      	bx	lr
 8001320:	40023800 	.word	0x40023800
 8001324:	08006340 	.word	0x08006340
 8001328:	20000010 	.word	0x20000010

0800132c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800132c:	4b04      	ldr	r3, [pc, #16]	; (8001340 <HAL_RCC_GetPCLK2Freq+0x14>)
 800132e:	4a05      	ldr	r2, [pc, #20]	; (8001344 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001336:	5cd3      	ldrb	r3, [r2, r3]
 8001338:	4a03      	ldr	r2, [pc, #12]	; (8001348 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800133a:	6810      	ldr	r0, [r2, #0]
}
 800133c:	40d8      	lsrs	r0, r3
 800133e:	4770      	bx	lr
 8001340:	40023800 	.word	0x40023800
 8001344:	08006340 	.word	0x08006340
 8001348:	20000010 	.word	0x20000010

0800134c <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800134c:	4920      	ldr	r1, [pc, #128]	; (80013d0 <HAL_RCC_GetSysClockFreq+0x84>)
{
 800134e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001350:	688b      	ldr	r3, [r1, #8]
 8001352:	f003 030c 	and.w	r3, r3, #12
 8001356:	2b08      	cmp	r3, #8
 8001358:	d007      	beq.n	800136a <HAL_RCC_GetSysClockFreq+0x1e>
 800135a:	2b0c      	cmp	r3, #12
 800135c:	d020      	beq.n	80013a0 <HAL_RCC_GetSysClockFreq+0x54>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800135e:	4a1d      	ldr	r2, [pc, #116]	; (80013d4 <HAL_RCC_GetSysClockFreq+0x88>)
 8001360:	481d      	ldr	r0, [pc, #116]	; (80013d8 <HAL_RCC_GetSysClockFreq+0x8c>)
 8001362:	2b04      	cmp	r3, #4
 8001364:	bf18      	it	ne
 8001366:	4610      	movne	r0, r2
 8001368:	bd08      	pop	{r3, pc}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800136a:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800136c:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800136e:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001370:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001374:	bf14      	ite	ne
 8001376:	4818      	ldrne	r0, [pc, #96]	; (80013d8 <HAL_RCC_GetSysClockFreq+0x8c>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001378:	4816      	ldreq	r0, [pc, #88]	; (80013d4 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800137a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800137e:	bf18      	it	ne
 8001380:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001382:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001386:	fba1 0100 	umull	r0, r1, r1, r0
 800138a:	f7ff fbed 	bl	8000b68 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800138e:	4b10      	ldr	r3, [pc, #64]	; (80013d0 <HAL_RCC_GetSysClockFreq+0x84>)
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001396:	3301      	adds	r3, #1
 8001398:	005b      	lsls	r3, r3, #1
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);

      sysclockfreq = pllvco/pllr;
 800139a:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800139e:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80013a0:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80013a2:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013a4:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80013a6:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013aa:	bf14      	ite	ne
 80013ac:	480a      	ldrne	r0, [pc, #40]	; (80013d8 <HAL_RCC_GetSysClockFreq+0x8c>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013ae:	4809      	ldreq	r0, [pc, #36]	; (80013d4 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013b0:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80013b4:	bf18      	it	ne
 80013b6:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80013b8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013bc:	fba1 0100 	umull	r0, r1, r1, r0
 80013c0:	f7ff fbd2 	bl	8000b68 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80013c4:	4b02      	ldr	r3, [pc, #8]	; (80013d0 <HAL_RCC_GetSysClockFreq+0x84>)
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f3c3 7302 	ubfx	r3, r3, #28, #3
 80013cc:	e7e5      	b.n	800139a <HAL_RCC_GetSysClockFreq+0x4e>
 80013ce:	bf00      	nop
 80013d0:	40023800 	.word	0x40023800
 80013d4:	00f42400 	.word	0x00f42400
 80013d8:	007a1200 	.word	0x007a1200

080013dc <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013dc:	6803      	ldr	r3, [r0, #0]
{
 80013de:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013e2:	07df      	lsls	r7, r3, #31
{
 80013e4:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013e6:	d410      	bmi.n	800140a <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013e8:	6823      	ldr	r3, [r4, #0]
 80013ea:	079e      	lsls	r6, r3, #30
 80013ec:	d467      	bmi.n	80014be <HAL_RCC_OscConfig+0xe2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013ee:	6823      	ldr	r3, [r4, #0]
 80013f0:	071a      	lsls	r2, r3, #28
 80013f2:	f100 80b2 	bmi.w	800155a <HAL_RCC_OscConfig+0x17e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013f6:	6823      	ldr	r3, [r4, #0]
 80013f8:	075b      	lsls	r3, r3, #29
 80013fa:	f100 80d0 	bmi.w	800159e <HAL_RCC_OscConfig+0x1c2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013fe:	69a2      	ldr	r2, [r4, #24]
 8001400:	2a00      	cmp	r2, #0
 8001402:	f040 8139 	bne.w	8001678 <HAL_RCC_OscConfig+0x29c>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8001406:	2000      	movs	r0, #0
 8001408:	e01e      	b.n	8001448 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800140a:	4b97      	ldr	r3, [pc, #604]	; (8001668 <HAL_RCC_OscConfig+0x28c>)
 800140c:	689a      	ldr	r2, [r3, #8]
 800140e:	f002 020c 	and.w	r2, r2, #12
 8001412:	2a04      	cmp	r2, #4
 8001414:	d010      	beq.n	8001438 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001416:	689a      	ldr	r2, [r3, #8]
 8001418:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800141c:	2a08      	cmp	r2, #8
 800141e:	d102      	bne.n	8001426 <HAL_RCC_OscConfig+0x4a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	025d      	lsls	r5, r3, #9
 8001424:	d408      	bmi.n	8001438 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001426:	4b90      	ldr	r3, [pc, #576]	; (8001668 <HAL_RCC_OscConfig+0x28c>)
 8001428:	689a      	ldr	r2, [r3, #8]
 800142a:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800142e:	2a0c      	cmp	r2, #12
 8001430:	d10d      	bne.n	800144e <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001432:	685a      	ldr	r2, [r3, #4]
 8001434:	0250      	lsls	r0, r2, #9
 8001436:	d50a      	bpl.n	800144e <HAL_RCC_OscConfig+0x72>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001438:	4b8b      	ldr	r3, [pc, #556]	; (8001668 <HAL_RCC_OscConfig+0x28c>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	0399      	lsls	r1, r3, #14
 800143e:	d5d3      	bpl.n	80013e8 <HAL_RCC_OscConfig+0xc>
 8001440:	6863      	ldr	r3, [r4, #4]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d1d0      	bne.n	80013e8 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8001446:	2001      	movs	r0, #1
}
 8001448:	b002      	add	sp, #8
 800144a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800144e:	6862      	ldr	r2, [r4, #4]
 8001450:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8001454:	d111      	bne.n	800147a <HAL_RCC_OscConfig+0x9e>
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800145c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800145e:	f7ff fd55 	bl	8000f0c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001462:	4d81      	ldr	r5, [pc, #516]	; (8001668 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8001464:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001466:	682b      	ldr	r3, [r5, #0]
 8001468:	039a      	lsls	r2, r3, #14
 800146a:	d4bd      	bmi.n	80013e8 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800146c:	f7ff fd4e 	bl	8000f0c <HAL_GetTick>
 8001470:	1b80      	subs	r0, r0, r6
 8001472:	2864      	cmp	r0, #100	; 0x64
 8001474:	d9f7      	bls.n	8001466 <HAL_RCC_OscConfig+0x8a>
            return HAL_TIMEOUT;
 8001476:	2003      	movs	r0, #3
 8001478:	e7e6      	b.n	8001448 <HAL_RCC_OscConfig+0x6c>
 800147a:	4d7b      	ldr	r5, [pc, #492]	; (8001668 <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800147c:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8001480:	682b      	ldr	r3, [r5, #0]
 8001482:	d107      	bne.n	8001494 <HAL_RCC_OscConfig+0xb8>
 8001484:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001488:	602b      	str	r3, [r5, #0]
 800148a:	682b      	ldr	r3, [r5, #0]
 800148c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001490:	602b      	str	r3, [r5, #0]
 8001492:	e7e4      	b.n	800145e <HAL_RCC_OscConfig+0x82>
 8001494:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001498:	602b      	str	r3, [r5, #0]
 800149a:	682b      	ldr	r3, [r5, #0]
 800149c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014a0:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014a2:	2a00      	cmp	r2, #0
 80014a4:	d1db      	bne.n	800145e <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 80014a6:	f7ff fd31 	bl	8000f0c <HAL_GetTick>
 80014aa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014ac:	682b      	ldr	r3, [r5, #0]
 80014ae:	039b      	lsls	r3, r3, #14
 80014b0:	d59a      	bpl.n	80013e8 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014b2:	f7ff fd2b 	bl	8000f0c <HAL_GetTick>
 80014b6:	1b80      	subs	r0, r0, r6
 80014b8:	2864      	cmp	r0, #100	; 0x64
 80014ba:	d9f7      	bls.n	80014ac <HAL_RCC_OscConfig+0xd0>
 80014bc:	e7db      	b.n	8001476 <HAL_RCC_OscConfig+0x9a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80014be:	4b6a      	ldr	r3, [pc, #424]	; (8001668 <HAL_RCC_OscConfig+0x28c>)
 80014c0:	689a      	ldr	r2, [r3, #8]
 80014c2:	f012 0f0c 	tst.w	r2, #12
 80014c6:	d010      	beq.n	80014ea <HAL_RCC_OscConfig+0x10e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80014c8:	689a      	ldr	r2, [r3, #8]
 80014ca:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80014ce:	2a08      	cmp	r2, #8
 80014d0:	d102      	bne.n	80014d8 <HAL_RCC_OscConfig+0xfc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	025f      	lsls	r7, r3, #9
 80014d6:	d508      	bpl.n	80014ea <HAL_RCC_OscConfig+0x10e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014d8:	4a63      	ldr	r2, [pc, #396]	; (8001668 <HAL_RCC_OscConfig+0x28c>)
 80014da:	6893      	ldr	r3, [r2, #8]
 80014dc:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80014e0:	2b0c      	cmp	r3, #12
 80014e2:	d111      	bne.n	8001508 <HAL_RCC_OscConfig+0x12c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014e4:	6853      	ldr	r3, [r2, #4]
 80014e6:	025e      	lsls	r6, r3, #9
 80014e8:	d40e      	bmi.n	8001508 <HAL_RCC_OscConfig+0x12c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ea:	4b5f      	ldr	r3, [pc, #380]	; (8001668 <HAL_RCC_OscConfig+0x28c>)
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	0795      	lsls	r5, r2, #30
 80014f0:	d502      	bpl.n	80014f8 <HAL_RCC_OscConfig+0x11c>
 80014f2:	68e2      	ldr	r2, [r4, #12]
 80014f4:	2a01      	cmp	r2, #1
 80014f6:	d1a6      	bne.n	8001446 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	6921      	ldr	r1, [r4, #16]
 80014fc:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001500:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8001504:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001506:	e772      	b.n	80013ee <HAL_RCC_OscConfig+0x12>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001508:	68e2      	ldr	r2, [r4, #12]
 800150a:	4b58      	ldr	r3, [pc, #352]	; (800166c <HAL_RCC_OscConfig+0x290>)
 800150c:	b1b2      	cbz	r2, 800153c <HAL_RCC_OscConfig+0x160>
        __HAL_RCC_HSI_ENABLE();
 800150e:	2201      	movs	r2, #1
 8001510:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001512:	f7ff fcfb 	bl	8000f0c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001516:	4d54      	ldr	r5, [pc, #336]	; (8001668 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8001518:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800151a:	682b      	ldr	r3, [r5, #0]
 800151c:	0798      	lsls	r0, r3, #30
 800151e:	d507      	bpl.n	8001530 <HAL_RCC_OscConfig+0x154>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001520:	682b      	ldr	r3, [r5, #0]
 8001522:	6922      	ldr	r2, [r4, #16]
 8001524:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001528:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800152c:	602b      	str	r3, [r5, #0]
 800152e:	e75e      	b.n	80013ee <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001530:	f7ff fcec 	bl	8000f0c <HAL_GetTick>
 8001534:	1b80      	subs	r0, r0, r6
 8001536:	2802      	cmp	r0, #2
 8001538:	d9ef      	bls.n	800151a <HAL_RCC_OscConfig+0x13e>
 800153a:	e79c      	b.n	8001476 <HAL_RCC_OscConfig+0x9a>
        __HAL_RCC_HSI_DISABLE();
 800153c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800153e:	f7ff fce5 	bl	8000f0c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001542:	4d49      	ldr	r5, [pc, #292]	; (8001668 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8001544:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001546:	682b      	ldr	r3, [r5, #0]
 8001548:	0799      	lsls	r1, r3, #30
 800154a:	f57f af50 	bpl.w	80013ee <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800154e:	f7ff fcdd 	bl	8000f0c <HAL_GetTick>
 8001552:	1b80      	subs	r0, r0, r6
 8001554:	2802      	cmp	r0, #2
 8001556:	d9f6      	bls.n	8001546 <HAL_RCC_OscConfig+0x16a>
 8001558:	e78d      	b.n	8001476 <HAL_RCC_OscConfig+0x9a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800155a:	6962      	ldr	r2, [r4, #20]
 800155c:	4b44      	ldr	r3, [pc, #272]	; (8001670 <HAL_RCC_OscConfig+0x294>)
 800155e:	b17a      	cbz	r2, 8001580 <HAL_RCC_OscConfig+0x1a4>
      __HAL_RCC_LSI_ENABLE();
 8001560:	2201      	movs	r2, #1
 8001562:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001564:	f7ff fcd2 	bl	8000f0c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001568:	4d3f      	ldr	r5, [pc, #252]	; (8001668 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 800156a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800156c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800156e:	079f      	lsls	r7, r3, #30
 8001570:	f53f af41 	bmi.w	80013f6 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001574:	f7ff fcca 	bl	8000f0c <HAL_GetTick>
 8001578:	1b80      	subs	r0, r0, r6
 800157a:	2802      	cmp	r0, #2
 800157c:	d9f6      	bls.n	800156c <HAL_RCC_OscConfig+0x190>
 800157e:	e77a      	b.n	8001476 <HAL_RCC_OscConfig+0x9a>
      __HAL_RCC_LSI_DISABLE();
 8001580:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001582:	f7ff fcc3 	bl	8000f0c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001586:	4d38      	ldr	r5, [pc, #224]	; (8001668 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8001588:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800158a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800158c:	0798      	lsls	r0, r3, #30
 800158e:	f57f af32 	bpl.w	80013f6 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001592:	f7ff fcbb 	bl	8000f0c <HAL_GetTick>
 8001596:	1b80      	subs	r0, r0, r6
 8001598:	2802      	cmp	r0, #2
 800159a:	d9f6      	bls.n	800158a <HAL_RCC_OscConfig+0x1ae>
 800159c:	e76b      	b.n	8001476 <HAL_RCC_OscConfig+0x9a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800159e:	4b32      	ldr	r3, [pc, #200]	; (8001668 <HAL_RCC_OscConfig+0x28c>)
 80015a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015a2:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 80015a6:	d128      	bne.n	80015fa <HAL_RCC_OscConfig+0x21e>
      __HAL_RCC_PWR_CLK_ENABLE();
 80015a8:	9201      	str	r2, [sp, #4]
 80015aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015ac:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80015b0:	641a      	str	r2, [r3, #64]	; 0x40
 80015b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015b8:	9301      	str	r3, [sp, #4]
 80015ba:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80015bc:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015be:	4d2d      	ldr	r5, [pc, #180]	; (8001674 <HAL_RCC_OscConfig+0x298>)
 80015c0:	682b      	ldr	r3, [r5, #0]
 80015c2:	05d9      	lsls	r1, r3, #23
 80015c4:	d51b      	bpl.n	80015fe <HAL_RCC_OscConfig+0x222>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015c6:	68a3      	ldr	r3, [r4, #8]
 80015c8:	4d27      	ldr	r5, [pc, #156]	; (8001668 <HAL_RCC_OscConfig+0x28c>)
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d127      	bne.n	800161e <HAL_RCC_OscConfig+0x242>
 80015ce:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80015d0:	f043 0301 	orr.w	r3, r3, #1
 80015d4:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80015d6:	f7ff fc99 	bl	8000f0c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015da:	4d23      	ldr	r5, [pc, #140]	; (8001668 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 80015dc:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015de:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015e2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80015e4:	079b      	lsls	r3, r3, #30
 80015e6:	d539      	bpl.n	800165c <HAL_RCC_OscConfig+0x280>
    if(pwrclkchanged == SET)
 80015e8:	2e00      	cmp	r6, #0
 80015ea:	f43f af08 	beq.w	80013fe <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 80015ee:	4a1e      	ldr	r2, [pc, #120]	; (8001668 <HAL_RCC_OscConfig+0x28c>)
 80015f0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80015f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015f6:	6413      	str	r3, [r2, #64]	; 0x40
 80015f8:	e701      	b.n	80013fe <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 80015fa:	2600      	movs	r6, #0
 80015fc:	e7df      	b.n	80015be <HAL_RCC_OscConfig+0x1e2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015fe:	682b      	ldr	r3, [r5, #0]
 8001600:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001604:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001606:	f7ff fc81 	bl	8000f0c <HAL_GetTick>
 800160a:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800160c:	682b      	ldr	r3, [r5, #0]
 800160e:	05da      	lsls	r2, r3, #23
 8001610:	d4d9      	bmi.n	80015c6 <HAL_RCC_OscConfig+0x1ea>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001612:	f7ff fc7b 	bl	8000f0c <HAL_GetTick>
 8001616:	1bc0      	subs	r0, r0, r7
 8001618:	2802      	cmp	r0, #2
 800161a:	d9f7      	bls.n	800160c <HAL_RCC_OscConfig+0x230>
 800161c:	e72b      	b.n	8001476 <HAL_RCC_OscConfig+0x9a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800161e:	2b05      	cmp	r3, #5
 8001620:	d104      	bne.n	800162c <HAL_RCC_OscConfig+0x250>
 8001622:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001624:	f043 0304 	orr.w	r3, r3, #4
 8001628:	672b      	str	r3, [r5, #112]	; 0x70
 800162a:	e7d0      	b.n	80015ce <HAL_RCC_OscConfig+0x1f2>
 800162c:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800162e:	f022 0201 	bic.w	r2, r2, #1
 8001632:	672a      	str	r2, [r5, #112]	; 0x70
 8001634:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001636:	f022 0204 	bic.w	r2, r2, #4
 800163a:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800163c:	2b00      	cmp	r3, #0
 800163e:	d1ca      	bne.n	80015d6 <HAL_RCC_OscConfig+0x1fa>
      tickstart = HAL_GetTick();
 8001640:	f7ff fc64 	bl	8000f0c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001644:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001648:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800164a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800164c:	0798      	lsls	r0, r3, #30
 800164e:	d5cb      	bpl.n	80015e8 <HAL_RCC_OscConfig+0x20c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001650:	f7ff fc5c 	bl	8000f0c <HAL_GetTick>
 8001654:	1bc0      	subs	r0, r0, r7
 8001656:	4540      	cmp	r0, r8
 8001658:	d9f7      	bls.n	800164a <HAL_RCC_OscConfig+0x26e>
 800165a:	e70c      	b.n	8001476 <HAL_RCC_OscConfig+0x9a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800165c:	f7ff fc56 	bl	8000f0c <HAL_GetTick>
 8001660:	1bc0      	subs	r0, r0, r7
 8001662:	4540      	cmp	r0, r8
 8001664:	d9bd      	bls.n	80015e2 <HAL_RCC_OscConfig+0x206>
 8001666:	e706      	b.n	8001476 <HAL_RCC_OscConfig+0x9a>
 8001668:	40023800 	.word	0x40023800
 800166c:	42470000 	.word	0x42470000
 8001670:	42470e80 	.word	0x42470e80
 8001674:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001678:	4d23      	ldr	r5, [pc, #140]	; (8001708 <HAL_RCC_OscConfig+0x32c>)
 800167a:	68ab      	ldr	r3, [r5, #8]
 800167c:	f003 030c 	and.w	r3, r3, #12
 8001680:	2b08      	cmp	r3, #8
 8001682:	f43f aee0 	beq.w	8001446 <HAL_RCC_OscConfig+0x6a>
 8001686:	4e21      	ldr	r6, [pc, #132]	; (800170c <HAL_RCC_OscConfig+0x330>)
 8001688:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800168a:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800168c:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800168e:	d12d      	bne.n	80016ec <HAL_RCC_OscConfig+0x310>
        tickstart = HAL_GetTick();
 8001690:	f7ff fc3c 	bl	8000f0c <HAL_GetTick>
 8001694:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001696:	682b      	ldr	r3, [r5, #0]
 8001698:	0199      	lsls	r1, r3, #6
 800169a:	d421      	bmi.n	80016e0 <HAL_RCC_OscConfig+0x304>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800169c:	6a22      	ldr	r2, [r4, #32]
 800169e:	69e3      	ldr	r3, [r4, #28]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80016a4:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80016a8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80016aa:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80016ae:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80016b0:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80016b4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016b6:	4c14      	ldr	r4, [pc, #80]	; (8001708 <HAL_RCC_OscConfig+0x32c>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016b8:	0852      	lsrs	r2, r2, #1
 80016ba:	3a01      	subs	r2, #1
 80016bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80016c0:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80016c2:	2301      	movs	r3, #1
 80016c4:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80016c6:	f7ff fc21 	bl	8000f0c <HAL_GetTick>
 80016ca:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016cc:	6823      	ldr	r3, [r4, #0]
 80016ce:	019a      	lsls	r2, r3, #6
 80016d0:	f53f ae99 	bmi.w	8001406 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016d4:	f7ff fc1a 	bl	8000f0c <HAL_GetTick>
 80016d8:	1b40      	subs	r0, r0, r5
 80016da:	2802      	cmp	r0, #2
 80016dc:	d9f6      	bls.n	80016cc <HAL_RCC_OscConfig+0x2f0>
 80016de:	e6ca      	b.n	8001476 <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016e0:	f7ff fc14 	bl	8000f0c <HAL_GetTick>
 80016e4:	1bc0      	subs	r0, r0, r7
 80016e6:	2802      	cmp	r0, #2
 80016e8:	d9d5      	bls.n	8001696 <HAL_RCC_OscConfig+0x2ba>
 80016ea:	e6c4      	b.n	8001476 <HAL_RCC_OscConfig+0x9a>
        tickstart = HAL_GetTick();
 80016ec:	f7ff fc0e 	bl	8000f0c <HAL_GetTick>
 80016f0:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016f2:	682b      	ldr	r3, [r5, #0]
 80016f4:	019b      	lsls	r3, r3, #6
 80016f6:	f57f ae86 	bpl.w	8001406 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016fa:	f7ff fc07 	bl	8000f0c <HAL_GetTick>
 80016fe:	1b00      	subs	r0, r0, r4
 8001700:	2802      	cmp	r0, #2
 8001702:	d9f6      	bls.n	80016f2 <HAL_RCC_OscConfig+0x316>
 8001704:	e6b7      	b.n	8001476 <HAL_RCC_OscConfig+0x9a>
 8001706:	bf00      	nop
 8001708:	40023800 	.word	0x40023800
 800170c:	42470060 	.word	0x42470060

08001710 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001710:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8001712:	4604      	mov	r4, r0
 8001714:	2800      	cmp	r0, #0
 8001716:	d036      	beq.n	8001786 <HAL_SPI_Init+0x76>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001718:	2300      	movs	r3, #0
 800171a:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 800171c:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8001720:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001724:	b91b      	cbnz	r3, 800172e <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001726:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800172a:	f001 fdc5 	bl	80032b8 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800172e:	6821      	ldr	r1, [r4, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001730:	68a0      	ldr	r0, [r4, #8]
 8001732:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001734:	2302      	movs	r3, #2
 8001736:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 800173a:	680b      	ldr	r3, [r1, #0]
 800173c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001740:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001742:	6863      	ldr	r3, [r4, #4]
 8001744:	4303      	orrs	r3, r0
 8001746:	68e0      	ldr	r0, [r4, #12]
 8001748:	4303      	orrs	r3, r0
 800174a:	6920      	ldr	r0, [r4, #16]
 800174c:	4303      	orrs	r3, r0
 800174e:	6960      	ldr	r0, [r4, #20]
 8001750:	4303      	orrs	r3, r0
 8001752:	69e0      	ldr	r0, [r4, #28]
 8001754:	4303      	orrs	r3, r0
 8001756:	6a20      	ldr	r0, [r4, #32]
 8001758:	4303      	orrs	r3, r0
 800175a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800175c:	4303      	orrs	r3, r0
 800175e:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8001762:	4303      	orrs	r3, r0
 8001764:	600b      	str	r3, [r1, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001766:	0c12      	lsrs	r2, r2, #16
 8001768:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800176a:	f002 0204 	and.w	r2, r2, #4
 800176e:	431a      	orrs	r2, r3
 8001770:	604a      	str	r2, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001772:	69cb      	ldr	r3, [r1, #28]
 8001774:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001778:	61cb      	str	r3, [r1, #28]
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800177a:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 800177c:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800177e:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001780:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
 8001784:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001786:	2001      	movs	r0, #1
}
 8001788:	bd10      	pop	{r4, pc}
	...

0800178c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800178c:	6a03      	ldr	r3, [r0, #32]
 800178e:	f023 0301 	bic.w	r3, r3, #1
 8001792:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001794:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8001796:	6842      	ldr	r2, [r0, #4]
{
 8001798:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800179a:	6984      	ldr	r4, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800179c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800179e:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80017a2:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80017a4:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80017a6:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 80017aa:	4323      	orrs	r3, r4

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80017ac:	4c0c      	ldr	r4, [pc, #48]	; (80017e0 <TIM_OC1_SetConfig+0x54>)
 80017ae:	42a0      	cmp	r0, r4
 80017b0:	d009      	beq.n	80017c6 <TIM_OC1_SetConfig+0x3a>
 80017b2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80017b6:	42a0      	cmp	r0, r4
 80017b8:	d005      	beq.n	80017c6 <TIM_OC1_SetConfig+0x3a>
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80017ba:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80017bc:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 80017be:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 80017c0:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80017c2:	6203      	str	r3, [r0, #32]
} 
 80017c4:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= OC_Config->OCNPolarity;
 80017c6:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 80017c8:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC1NP;
 80017ca:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80017ce:	4323      	orrs	r3, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 80017d0:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80017d2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80017d6:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 80017d8:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80017dc:	4322      	orrs	r2, r4
 80017de:	e7ec      	b.n	80017ba <TIM_OC1_SetConfig+0x2e>
 80017e0:	40010000 	.word	0x40010000

080017e4 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80017e4:	6a03      	ldr	r3, [r0, #32]
 80017e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80017ea:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80017ec:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 80017ee:	6842      	ldr	r2, [r0, #4]
{
 80017f0:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80017f2:	69c4      	ldr	r4, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80017f4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 80017f6:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80017fa:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80017fc:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 80017fe:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001802:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001806:	4c0e      	ldr	r4, [pc, #56]	; (8001840 <TIM_OC3_SetConfig+0x5c>)
 8001808:	42a0      	cmp	r0, r4
 800180a:	d009      	beq.n	8001820 <TIM_OC3_SetConfig+0x3c>
 800180c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001810:	42a0      	cmp	r0, r4
 8001812:	d005      	beq.n	8001820 <TIM_OC3_SetConfig+0x3c>
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001814:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001816:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001818:	61c5      	str	r5, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 800181a:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800181c:	6203      	str	r3, [r0, #32]
}
 800181e:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001820:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001822:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC3NP;
 8001824:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001828:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800182c:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800182e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001832:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8001834:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001838:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 800183c:	e7ea      	b.n	8001814 <TIM_OC3_SetConfig+0x30>
 800183e:	bf00      	nop
 8001840:	40010000 	.word	0x40010000

08001844 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001844:	6a03      	ldr	r3, [r0, #32]
 8001846:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800184a:	6203      	str	r3, [r0, #32]
{
 800184c:	b530      	push	{r4, r5, lr}
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800184e:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8001850:	6843      	ldr	r3, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001852:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001854:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001856:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800185a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800185e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8001860:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001864:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001868:	4d09      	ldr	r5, [pc, #36]	; (8001890 <TIM_OC4_SetConfig+0x4c>)
 800186a:	42a8      	cmp	r0, r5
 800186c:	d009      	beq.n	8001882 <TIM_OC4_SetConfig+0x3e>
 800186e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001872:	42a8      	cmp	r0, r5
 8001874:	d005      	beq.n	8001882 <TIM_OC4_SetConfig+0x3e>
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001876:	6043      	str	r3, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001878:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 800187a:	61c2      	str	r2, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 800187c:	6403      	str	r3, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800187e:	6204      	str	r4, [r0, #32]
}
 8001880:	bd30      	pop	{r4, r5, pc}
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001882:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001884:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001888:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 800188c:	e7f3      	b.n	8001876 <TIM_OC4_SetConfig+0x32>
 800188e:	bf00      	nop
 8001890:	40010000 	.word	0x40010000

08001894 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001894:	6803      	ldr	r3, [r0, #0]
 8001896:	68da      	ldr	r2, [r3, #12]
 8001898:	f042 0201 	orr.w	r2, r2, #1
 800189c:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	f042 0201 	orr.w	r2, r2, #1
 80018a4:	601a      	str	r2, [r3, #0]
}
 80018a6:	2000      	movs	r0, #0
 80018a8:	4770      	bx	lr

080018aa <HAL_TIM_PeriodElapsedCallback>:
 80018aa:	4770      	bx	lr

080018ac <HAL_TIM_OC_DelayElapsedCallback>:
 80018ac:	4770      	bx	lr

080018ae <HAL_TIM_IC_CaptureCallback>:
 80018ae:	4770      	bx	lr

080018b0 <HAL_TIM_PWM_PulseFinishedCallback>:
 80018b0:	4770      	bx	lr

080018b2 <HAL_TIM_TriggerCallback>:
 80018b2:	4770      	bx	lr

080018b4 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80018b4:	6803      	ldr	r3, [r0, #0]
 80018b6:	691a      	ldr	r2, [r3, #16]
 80018b8:	0791      	lsls	r1, r2, #30
{
 80018ba:	b510      	push	{r4, lr}
 80018bc:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80018be:	d50e      	bpl.n	80018de <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80018c0:	68da      	ldr	r2, [r3, #12]
 80018c2:	0792      	lsls	r2, r2, #30
 80018c4:	d50b      	bpl.n	80018de <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80018c6:	f06f 0202 	mvn.w	r2, #2
 80018ca:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80018cc:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80018ce:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80018d0:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80018d2:	7602      	strb	r2, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80018d4:	d077      	beq.n	80019c6 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 80018d6:	f7ff ffea 	bl	80018ae <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018da:	2300      	movs	r3, #0
 80018dc:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80018de:	6823      	ldr	r3, [r4, #0]
 80018e0:	691a      	ldr	r2, [r3, #16]
 80018e2:	0750      	lsls	r0, r2, #29
 80018e4:	d510      	bpl.n	8001908 <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80018e6:	68da      	ldr	r2, [r3, #12]
 80018e8:	0751      	lsls	r1, r2, #29
 80018ea:	d50d      	bpl.n	8001908 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80018ec:	f06f 0204 	mvn.w	r2, #4
 80018f0:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80018f2:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80018f4:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80018f6:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80018fa:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 80018fc:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80018fe:	d068      	beq.n	80019d2 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8001900:	f7ff ffd5 	bl	80018ae <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001904:	2300      	movs	r3, #0
 8001906:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001908:	6823      	ldr	r3, [r4, #0]
 800190a:	691a      	ldr	r2, [r3, #16]
 800190c:	0712      	lsls	r2, r2, #28
 800190e:	d50f      	bpl.n	8001930 <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001910:	68da      	ldr	r2, [r3, #12]
 8001912:	0710      	lsls	r0, r2, #28
 8001914:	d50c      	bpl.n	8001930 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001916:	f06f 0208 	mvn.w	r2, #8
 800191a:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800191c:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800191e:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001920:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001922:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8001924:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001926:	d05a      	beq.n	80019de <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001928:	f7ff ffc1 	bl	80018ae <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800192c:	2300      	movs	r3, #0
 800192e:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001930:	6823      	ldr	r3, [r4, #0]
 8001932:	691a      	ldr	r2, [r3, #16]
 8001934:	06d2      	lsls	r2, r2, #27
 8001936:	d510      	bpl.n	800195a <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001938:	68da      	ldr	r2, [r3, #12]
 800193a:	06d0      	lsls	r0, r2, #27
 800193c:	d50d      	bpl.n	800195a <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800193e:	f06f 0210 	mvn.w	r2, #16
 8001942:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001944:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001946:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001948:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800194c:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 800194e:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001950:	d04b      	beq.n	80019ea <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8001952:	f7ff ffac 	bl	80018ae <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001956:	2300      	movs	r3, #0
 8001958:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800195a:	6823      	ldr	r3, [r4, #0]
 800195c:	691a      	ldr	r2, [r3, #16]
 800195e:	07d1      	lsls	r1, r2, #31
 8001960:	d508      	bpl.n	8001974 <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001962:	68da      	ldr	r2, [r3, #12]
 8001964:	07d2      	lsls	r2, r2, #31
 8001966:	d505      	bpl.n	8001974 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001968:	f06f 0201 	mvn.w	r2, #1
 800196c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800196e:	4620      	mov	r0, r4
 8001970:	f7ff ff9b 	bl	80018aa <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001974:	6823      	ldr	r3, [r4, #0]
 8001976:	691a      	ldr	r2, [r3, #16]
 8001978:	0610      	lsls	r0, r2, #24
 800197a:	d508      	bpl.n	800198e <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800197c:	68da      	ldr	r2, [r3, #12]
 800197e:	0611      	lsls	r1, r2, #24
 8001980:	d505      	bpl.n	800198e <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001982:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001986:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001988:	4620      	mov	r0, r4
 800198a:	f000 f9ce 	bl	8001d2a <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800198e:	6823      	ldr	r3, [r4, #0]
 8001990:	691a      	ldr	r2, [r3, #16]
 8001992:	0652      	lsls	r2, r2, #25
 8001994:	d508      	bpl.n	80019a8 <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001996:	68da      	ldr	r2, [r3, #12]
 8001998:	0650      	lsls	r0, r2, #25
 800199a:	d505      	bpl.n	80019a8 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800199c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80019a0:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80019a2:	4620      	mov	r0, r4
 80019a4:	f7ff ff85 	bl	80018b2 <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80019a8:	6823      	ldr	r3, [r4, #0]
 80019aa:	691a      	ldr	r2, [r3, #16]
 80019ac:	0691      	lsls	r1, r2, #26
 80019ae:	d522      	bpl.n	80019f6 <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80019b0:	68da      	ldr	r2, [r3, #12]
 80019b2:	0692      	lsls	r2, r2, #26
 80019b4:	d51f      	bpl.n	80019f6 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80019b6:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 80019ba:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80019bc:	611a      	str	r2, [r3, #16]
}
 80019be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 80019c2:	f000 b9b1 	b.w	8001d28 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80019c6:	f7ff ff71 	bl	80018ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019ca:	4620      	mov	r0, r4
 80019cc:	f7ff ff70 	bl	80018b0 <HAL_TIM_PWM_PulseFinishedCallback>
 80019d0:	e783      	b.n	80018da <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019d2:	f7ff ff6b 	bl	80018ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019d6:	4620      	mov	r0, r4
 80019d8:	f7ff ff6a 	bl	80018b0 <HAL_TIM_PWM_PulseFinishedCallback>
 80019dc:	e792      	b.n	8001904 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019de:	f7ff ff65 	bl	80018ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 80019e2:	4620      	mov	r0, r4
 80019e4:	f7ff ff64 	bl	80018b0 <HAL_TIM_PWM_PulseFinishedCallback>
 80019e8:	e7a0      	b.n	800192c <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019ea:	f7ff ff5f 	bl	80018ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019ee:	4620      	mov	r0, r4
 80019f0:	f7ff ff5e 	bl	80018b0 <HAL_TIM_PWM_PulseFinishedCallback>
 80019f4:	e7af      	b.n	8001956 <HAL_TIM_IRQHandler+0xa2>
 80019f6:	bd10      	pop	{r4, pc}

080019f8 <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80019f8:	4a2e      	ldr	r2, [pc, #184]	; (8001ab4 <TIM_Base_SetConfig+0xbc>)
  tmpcr1 = TIMx->CR1;
 80019fa:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80019fc:	4290      	cmp	r0, r2
 80019fe:	d012      	beq.n	8001a26 <TIM_Base_SetConfig+0x2e>
 8001a00:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001a04:	d00f      	beq.n	8001a26 <TIM_Base_SetConfig+0x2e>
 8001a06:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001a0a:	4290      	cmp	r0, r2
 8001a0c:	d00b      	beq.n	8001a26 <TIM_Base_SetConfig+0x2e>
 8001a0e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a12:	4290      	cmp	r0, r2
 8001a14:	d007      	beq.n	8001a26 <TIM_Base_SetConfig+0x2e>
 8001a16:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a1a:	4290      	cmp	r0, r2
 8001a1c:	d003      	beq.n	8001a26 <TIM_Base_SetConfig+0x2e>
 8001a1e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001a22:	4290      	cmp	r0, r2
 8001a24:	d11d      	bne.n	8001a62 <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 8001a26:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001a28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001a2c:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8001a2e:	4a21      	ldr	r2, [pc, #132]	; (8001ab4 <TIM_Base_SetConfig+0xbc>)
 8001a30:	4290      	cmp	r0, r2
 8001a32:	d104      	bne.n	8001a3e <TIM_Base_SetConfig+0x46>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001a34:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001a36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	e028      	b.n	8001a90 <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8001a3e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001a42:	d0f7      	beq.n	8001a34 <TIM_Base_SetConfig+0x3c>
 8001a44:	4a1c      	ldr	r2, [pc, #112]	; (8001ab8 <TIM_Base_SetConfig+0xc0>)
 8001a46:	4290      	cmp	r0, r2
 8001a48:	d0f4      	beq.n	8001a34 <TIM_Base_SetConfig+0x3c>
 8001a4a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a4e:	4290      	cmp	r0, r2
 8001a50:	d0f0      	beq.n	8001a34 <TIM_Base_SetConfig+0x3c>
 8001a52:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a56:	4290      	cmp	r0, r2
 8001a58:	d0ec      	beq.n	8001a34 <TIM_Base_SetConfig+0x3c>
 8001a5a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001a5e:	4290      	cmp	r0, r2
 8001a60:	d0e8      	beq.n	8001a34 <TIM_Base_SetConfig+0x3c>
 8001a62:	4a16      	ldr	r2, [pc, #88]	; (8001abc <TIM_Base_SetConfig+0xc4>)
 8001a64:	4290      	cmp	r0, r2
 8001a66:	d0e5      	beq.n	8001a34 <TIM_Base_SetConfig+0x3c>
 8001a68:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a6c:	4290      	cmp	r0, r2
 8001a6e:	d0e1      	beq.n	8001a34 <TIM_Base_SetConfig+0x3c>
 8001a70:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a74:	4290      	cmp	r0, r2
 8001a76:	d0dd      	beq.n	8001a34 <TIM_Base_SetConfig+0x3c>
 8001a78:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001a7c:	4290      	cmp	r0, r2
 8001a7e:	d0d9      	beq.n	8001a34 <TIM_Base_SetConfig+0x3c>
 8001a80:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a84:	4290      	cmp	r0, r2
 8001a86:	d0d5      	beq.n	8001a34 <TIM_Base_SetConfig+0x3c>
 8001a88:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a8c:	4290      	cmp	r0, r2
 8001a8e:	d0d1      	beq.n	8001a34 <TIM_Base_SetConfig+0x3c>
  TIMx->CR1 = tmpcr1;
 8001a90:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001a92:	688b      	ldr	r3, [r1, #8]
 8001a94:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001a96:	680b      	ldr	r3, [r1, #0]
 8001a98:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8001a9a:	4b06      	ldr	r3, [pc, #24]	; (8001ab4 <TIM_Base_SetConfig+0xbc>)
 8001a9c:	4298      	cmp	r0, r3
 8001a9e:	d006      	beq.n	8001aae <TIM_Base_SetConfig+0xb6>
 8001aa0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001aa4:	4298      	cmp	r0, r3
 8001aa6:	d002      	beq.n	8001aae <TIM_Base_SetConfig+0xb6>
  TIMx->EGR = TIM_EGR_UG;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	6143      	str	r3, [r0, #20]
}
 8001aac:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8001aae:	690b      	ldr	r3, [r1, #16]
 8001ab0:	6303      	str	r3, [r0, #48]	; 0x30
 8001ab2:	e7f9      	b.n	8001aa8 <TIM_Base_SetConfig+0xb0>
 8001ab4:	40010000 	.word	0x40010000
 8001ab8:	40000400 	.word	0x40000400
 8001abc:	40014000 	.word	0x40014000

08001ac0 <HAL_TIM_Base_Init>:
{ 
 8001ac0:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001ac2:	4604      	mov	r4, r0
 8001ac4:	b1a0      	cbz	r0, 8001af0 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001ac6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001aca:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001ace:	b91b      	cbnz	r3, 8001ad8 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001ad0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8001ad4:	f001 fc62 	bl	800339c <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001ad8:	2302      	movs	r3, #2
 8001ada:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001ade:	6820      	ldr	r0, [r4, #0]
 8001ae0:	1d21      	adds	r1, r4, #4
 8001ae2:	f7ff ff89 	bl	80019f8 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8001aec:	2000      	movs	r0, #0
 8001aee:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001af0:	2001      	movs	r0, #1
}
 8001af2:	bd10      	pop	{r4, pc}

08001af4 <HAL_TIM_PWM_Init>:
{
 8001af4:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001af6:	4604      	mov	r4, r0
 8001af8:	b1a0      	cbz	r0, 8001b24 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001afa:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001afe:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001b02:	b91b      	cbnz	r3, 8001b0c <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001b04:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_PWM_MspInit(htim);
 8001b08:	f001 fbfc 	bl	8003304 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;  
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001b12:	6820      	ldr	r0, [r4, #0]
 8001b14:	1d21      	adds	r1, r4, #4
 8001b16:	f7ff ff6f 	bl	80019f8 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8001b20:	2000      	movs	r0, #0
 8001b22:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001b24:	2001      	movs	r0, #1
}  
 8001b26:	bd10      	pop	{r4, pc}

08001b28 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001b28:	6a03      	ldr	r3, [r0, #32]
 8001b2a:	f023 0310 	bic.w	r3, r3, #16
 8001b2e:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001b30:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8001b32:	6842      	ldr	r2, [r0, #4]
{
 8001b34:	b570      	push	{r4, r5, r6, lr}
  tmpccmrx = TIMx->CCMR1;
 8001b36:	6984      	ldr	r4, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001b38:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001b3a:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001b3e:	ea44 2505 	orr.w	r5, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001b42:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8001b44:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001b48:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001b4c:	4c0d      	ldr	r4, [pc, #52]	; (8001b84 <TIM_OC2_SetConfig+0x5c>)
 8001b4e:	42a0      	cmp	r0, r4
 8001b50:	d009      	beq.n	8001b66 <TIM_OC2_SetConfig+0x3e>
 8001b52:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001b56:	42a0      	cmp	r0, r4
 8001b58:	d005      	beq.n	8001b66 <TIM_OC2_SetConfig+0x3e>
  TIMx->CR2 = tmpcr2;
 8001b5a:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8001b5c:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001b5e:	6185      	str	r5, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001b60:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8001b62:	6203      	str	r3, [r0, #32]
}
 8001b64:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001b66:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001b68:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC2NP;
 8001b6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001b6e:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001b72:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001b74:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001b78:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8001b7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001b7e:	ea42 0284 	orr.w	r2, r2, r4, lsl #2
 8001b82:	e7ea      	b.n	8001b5a <TIM_OC2_SetConfig+0x32>
 8001b84:	40010000 	.word	0x40010000

08001b88 <HAL_TIM_PWM_ConfigChannel>:
{
 8001b88:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8001b8a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001b8e:	2b01      	cmp	r3, #1
{
 8001b90:	4604      	mov	r4, r0
 8001b92:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001b96:	d025      	beq.n	8001be4 <HAL_TIM_PWM_ConfigChannel+0x5c>
 8001b98:	2301      	movs	r3, #1
 8001b9a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 8001b9e:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  switch (Channel)
 8001ba2:	2a0c      	cmp	r2, #12
 8001ba4:	d818      	bhi.n	8001bd8 <HAL_TIM_PWM_ConfigChannel+0x50>
 8001ba6:	e8df f002 	tbb	[pc, r2]
 8001baa:	1707      	.short	0x1707
 8001bac:	171e1717 	.word	0x171e1717
 8001bb0:	172f1717 	.word	0x172f1717
 8001bb4:	1717      	.short	0x1717
 8001bb6:	40          	.byte	0x40
 8001bb7:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001bb8:	6820      	ldr	r0, [r4, #0]
 8001bba:	f7ff fde7 	bl	800178c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001bbe:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001bc0:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001bc2:	699a      	ldr	r2, [r3, #24]
 8001bc4:	f042 0208 	orr.w	r2, r2, #8
 8001bc8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001bca:	699a      	ldr	r2, [r3, #24]
 8001bcc:	f022 0204 	bic.w	r2, r2, #4
 8001bd0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001bd2:	699a      	ldr	r2, [r3, #24]
 8001bd4:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001bd6:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8001bd8:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001bda:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001bdc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8001be0:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 8001be4:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001be6:	6820      	ldr	r0, [r4, #0]
 8001be8:	f7ff ff9e 	bl	8001b28 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001bec:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001bee:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001bf0:	699a      	ldr	r2, [r3, #24]
 8001bf2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001bf6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001bf8:	699a      	ldr	r2, [r3, #24]
 8001bfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bfe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001c00:	699a      	ldr	r2, [r3, #24]
 8001c02:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001c06:	e7e6      	b.n	8001bd6 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001c08:	6820      	ldr	r0, [r4, #0]
 8001c0a:	f7ff fdeb 	bl	80017e4 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001c0e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8001c10:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001c12:	69da      	ldr	r2, [r3, #28]
 8001c14:	f042 0208 	orr.w	r2, r2, #8
 8001c18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001c1a:	69da      	ldr	r2, [r3, #28]
 8001c1c:	f022 0204 	bic.w	r2, r2, #4
 8001c20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8001c22:	69da      	ldr	r2, [r3, #28]
 8001c24:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8001c26:	61da      	str	r2, [r3, #28]
    break;
 8001c28:	e7d6      	b.n	8001bd8 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001c2a:	6820      	ldr	r0, [r4, #0]
 8001c2c:	f7ff fe0a 	bl	8001844 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001c30:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8001c32:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001c34:	69da      	ldr	r2, [r3, #28]
 8001c36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c3a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001c3c:	69da      	ldr	r2, [r3, #28]
 8001c3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c42:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8001c44:	69da      	ldr	r2, [r3, #28]
 8001c46:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001c4a:	e7ec      	b.n	8001c26 <HAL_TIM_PWM_ConfigChannel+0x9e>

08001c4c <TIM_CCxChannelCmd>:
  TIMx->CCER &= ~tmp;
 8001c4c:	6a03      	ldr	r3, [r0, #32]
{
 8001c4e:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << Channel;
 8001c50:	2401      	movs	r4, #1
 8001c52:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8001c54:	ea23 0304 	bic.w	r3, r3, r4
 8001c58:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8001c5a:	6a03      	ldr	r3, [r0, #32]
 8001c5c:	408a      	lsls	r2, r1
 8001c5e:	431a      	orrs	r2, r3
 8001c60:	6202      	str	r2, [r0, #32]
 8001c62:	bd10      	pop	{r4, pc}

08001c64 <HAL_TIM_PWM_Start>:
{
 8001c64:	b510      	push	{r4, lr}
 8001c66:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001c68:	2201      	movs	r2, #1
 8001c6a:	6800      	ldr	r0, [r0, #0]
 8001c6c:	f7ff ffee 	bl	8001c4c <TIM_CCxChannelCmd>
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8001c70:	6823      	ldr	r3, [r4, #0]
 8001c72:	4a08      	ldr	r2, [pc, #32]	; (8001c94 <HAL_TIM_PWM_Start+0x30>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d003      	beq.n	8001c80 <HAL_TIM_PWM_Start+0x1c>
 8001c78:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d103      	bne.n	8001c88 <HAL_TIM_PWM_Start+0x24>
    __HAL_TIM_MOE_ENABLE(htim);
 8001c80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001c82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c86:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	f042 0201 	orr.w	r2, r2, #1
 8001c8e:	601a      	str	r2, [r3, #0]
} 
 8001c90:	2000      	movs	r0, #0
 8001c92:	bd10      	pop	{r4, pc}
 8001c94:	40010000 	.word	0x40010000

08001c98 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8001c98:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001c9c:	2b01      	cmp	r3, #1
{
 8001c9e:	b510      	push	{r4, lr}
 8001ca0:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8001ca4:	d018      	beq.n	8001cd8 <HAL_TIMEx_MasterConfigSynchronization+0x40>
  
  htim->State = HAL_TIM_STATE_BUSY;
 8001ca6:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001caa:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8001cac:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001cae:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001cb0:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001cb2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001cb6:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8001cb8:	685a      	ldr	r2, [r3, #4]
 8001cba:	4322      	orrs	r2, r4
 8001cbc:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8001cbe:	689a      	ldr	r2, [r3, #8]
 8001cc0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001cc4:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001cc6:	689a      	ldr	r2, [r3, #8]
 8001cc8:	430a      	orrs	r2, r1
 8001cca:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 8001cd8:	4618      	mov	r0, r3
  
  return HAL_OK;
} 
 8001cda:	bd10      	pop	{r4, pc}

08001cdc <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8001cdc:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d01f      	beq.n	8001d24 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */
  
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8001ce4:	68cb      	ldr	r3, [r1, #12]
 8001ce6:	688a      	ldr	r2, [r1, #8]
 8001ce8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001cec:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8001cee:	684a      	ldr	r2, [r1, #4]
 8001cf0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001cf4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8001cf6:	680a      	ldr	r2, [r1, #0]
 8001cf8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001cfc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8001cfe:	690a      	ldr	r2, [r1, #16]
 8001d00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001d04:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8001d06:	694a      	ldr	r2, [r1, #20]
 8001d08:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001d0c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8001d0e:	698a      	ldr	r2, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8001d10:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001d14:	4313      	orrs	r3, r2
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8001d16:	6802      	ldr	r2, [r0, #0]
 8001d18:	6453      	str	r3, [r2, #68]	; 0x44
  
  __HAL_UNLOCK(htim);
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

  return HAL_OK;
 8001d20:	4618      	mov	r0, r3
 8001d22:	4770      	bx	lr
  __HAL_LOCK(htim);
 8001d24:	2002      	movs	r0, #2
}
 8001d26:	4770      	bx	lr

08001d28 <HAL_TIMEx_CommutationCallback>:
 8001d28:	4770      	bx	lr

08001d2a <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001d2a:	4770      	bx	lr

08001d2c <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8001d30:	6806      	ldr	r6, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001d32:	68c2      	ldr	r2, [r0, #12]
  tmpreg = huart->Instance->CR2;
 8001d34:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001d36:	69c1      	ldr	r1, [r0, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8001d38:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001d3c:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8001d3e:	6133      	str	r3, [r6, #16]
{
 8001d40:	4604      	mov	r4, r0
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001d42:	6883      	ldr	r3, [r0, #8]
 8001d44:	6900      	ldr	r0, [r0, #16]
  tmpreg = huart->Instance->CR1;
 8001d46:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001d48:	4303      	orrs	r3, r0
 8001d4a:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001d4c:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001d50:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001d52:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001d56:	430b      	orrs	r3, r1
 8001d58:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8001d5a:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8001d5c:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8001d5e:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8001d60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 8001d64:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001d66:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8001d6a:	6173      	str	r3, [r6, #20]
 8001d6c:	4b7a      	ldr	r3, [pc, #488]	; (8001f58 <UART_SetConfig+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001d6e:	d17c      	bne.n	8001e6a <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001d70:	429e      	cmp	r6, r3
 8001d72:	d003      	beq.n	8001d7c <UART_SetConfig+0x50>
 8001d74:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d78:	429e      	cmp	r6, r3
 8001d7a:	d144      	bne.n	8001e06 <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001d7c:	f7ff fad6 	bl	800132c <HAL_RCC_GetPCLK2Freq>
 8001d80:	2519      	movs	r5, #25
 8001d82:	fb05 f300 	mul.w	r3, r5, r0
 8001d86:	6860      	ldr	r0, [r4, #4]
 8001d88:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001d8c:	0040      	lsls	r0, r0, #1
 8001d8e:	fbb3 f3f0 	udiv	r3, r3, r0
 8001d92:	fbb3 f3f9 	udiv	r3, r3, r9
 8001d96:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001d9a:	f7ff fac7 	bl	800132c <HAL_RCC_GetPCLK2Freq>
 8001d9e:	6863      	ldr	r3, [r4, #4]
 8001da0:	4368      	muls	r0, r5
 8001da2:	005b      	lsls	r3, r3, #1
 8001da4:	fbb0 f7f3 	udiv	r7, r0, r3
 8001da8:	f7ff fac0 	bl	800132c <HAL_RCC_GetPCLK2Freq>
 8001dac:	6863      	ldr	r3, [r4, #4]
 8001dae:	4368      	muls	r0, r5
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001db6:	fbb3 f3f9 	udiv	r3, r3, r9
 8001dba:	fb09 7313 	mls	r3, r9, r3, r7
 8001dbe:	00db      	lsls	r3, r3, #3
 8001dc0:	3332      	adds	r3, #50	; 0x32
 8001dc2:	fbb3 f3f9 	udiv	r3, r3, r9
 8001dc6:	005b      	lsls	r3, r3, #1
 8001dc8:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001dcc:	f7ff faae 	bl	800132c <HAL_RCC_GetPCLK2Freq>
 8001dd0:	6862      	ldr	r2, [r4, #4]
 8001dd2:	4368      	muls	r0, r5
 8001dd4:	0052      	lsls	r2, r2, #1
 8001dd6:	fbb0 faf2 	udiv	sl, r0, r2
 8001dda:	f7ff faa7 	bl	800132c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001dde:	6863      	ldr	r3, [r4, #4]
 8001de0:	4368      	muls	r0, r5
 8001de2:	005b      	lsls	r3, r3, #1
 8001de4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001de8:	fbb3 f3f9 	udiv	r3, r3, r9
 8001dec:	fb09 a313 	mls	r3, r9, r3, sl
 8001df0:	00db      	lsls	r3, r3, #3
 8001df2:	3332      	adds	r3, #50	; 0x32
 8001df4:	fbb3 f3f9 	udiv	r3, r3, r9
 8001df8:	f003 0307 	and.w	r3, r3, #7
 8001dfc:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001dfe:	443b      	add	r3, r7
 8001e00:	60b3      	str	r3, [r6, #8]
 8001e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001e06:	f7ff fa81 	bl	800130c <HAL_RCC_GetPCLK1Freq>
 8001e0a:	2519      	movs	r5, #25
 8001e0c:	fb05 f300 	mul.w	r3, r5, r0
 8001e10:	6860      	ldr	r0, [r4, #4]
 8001e12:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001e16:	0040      	lsls	r0, r0, #1
 8001e18:	fbb3 f3f0 	udiv	r3, r3, r0
 8001e1c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001e20:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001e24:	f7ff fa72 	bl	800130c <HAL_RCC_GetPCLK1Freq>
 8001e28:	6863      	ldr	r3, [r4, #4]
 8001e2a:	4368      	muls	r0, r5
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	fbb0 f7f3 	udiv	r7, r0, r3
 8001e32:	f7ff fa6b 	bl	800130c <HAL_RCC_GetPCLK1Freq>
 8001e36:	6863      	ldr	r3, [r4, #4]
 8001e38:	4368      	muls	r0, r5
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e40:	fbb3 f3f9 	udiv	r3, r3, r9
 8001e44:	fb09 7313 	mls	r3, r9, r3, r7
 8001e48:	00db      	lsls	r3, r3, #3
 8001e4a:	3332      	adds	r3, #50	; 0x32
 8001e4c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001e56:	f7ff fa59 	bl	800130c <HAL_RCC_GetPCLK1Freq>
 8001e5a:	6862      	ldr	r2, [r4, #4]
 8001e5c:	4368      	muls	r0, r5
 8001e5e:	0052      	lsls	r2, r2, #1
 8001e60:	fbb0 faf2 	udiv	sl, r0, r2
 8001e64:	f7ff fa52 	bl	800130c <HAL_RCC_GetPCLK1Freq>
 8001e68:	e7b9      	b.n	8001dde <UART_SetConfig+0xb2>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001e6a:	429e      	cmp	r6, r3
 8001e6c:	d002      	beq.n	8001e74 <UART_SetConfig+0x148>
 8001e6e:	4b3b      	ldr	r3, [pc, #236]	; (8001f5c <UART_SetConfig+0x230>)
 8001e70:	429e      	cmp	r6, r3
 8001e72:	d140      	bne.n	8001ef6 <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001e74:	f7ff fa5a 	bl	800132c <HAL_RCC_GetPCLK2Freq>
 8001e78:	6867      	ldr	r7, [r4, #4]
 8001e7a:	2519      	movs	r5, #25
 8001e7c:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001e80:	fb05 f300 	mul.w	r3, r5, r0
 8001e84:	00bf      	lsls	r7, r7, #2
 8001e86:	fbb3 f3f7 	udiv	r3, r3, r7
 8001e8a:	fbb3 f3f9 	udiv	r3, r3, r9
 8001e8e:	011f      	lsls	r7, r3, #4
 8001e90:	f7ff fa4c 	bl	800132c <HAL_RCC_GetPCLK2Freq>
 8001e94:	6863      	ldr	r3, [r4, #4]
 8001e96:	4368      	muls	r0, r5
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	fbb0 f8f3 	udiv	r8, r0, r3
 8001e9e:	f7ff fa45 	bl	800132c <HAL_RCC_GetPCLK2Freq>
 8001ea2:	6863      	ldr	r3, [r4, #4]
 8001ea4:	4368      	muls	r0, r5
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001eac:	fbb3 f3f9 	udiv	r3, r3, r9
 8001eb0:	fb09 8313 	mls	r3, r9, r3, r8
 8001eb4:	011b      	lsls	r3, r3, #4
 8001eb6:	3332      	adds	r3, #50	; 0x32
 8001eb8:	fbb3 f3f9 	udiv	r3, r3, r9
 8001ebc:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8001ec0:	f7ff fa34 	bl	800132c <HAL_RCC_GetPCLK2Freq>
 8001ec4:	6862      	ldr	r2, [r4, #4]
 8001ec6:	4368      	muls	r0, r5
 8001ec8:	0092      	lsls	r2, r2, #2
 8001eca:	fbb0 faf2 	udiv	sl, r0, r2
 8001ece:	f7ff fa2d 	bl	800132c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001ed2:	6863      	ldr	r3, [r4, #4]
 8001ed4:	4368      	muls	r0, r5
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001edc:	fbb3 f3f9 	udiv	r3, r3, r9
 8001ee0:	fb09 a313 	mls	r3, r9, r3, sl
 8001ee4:	011b      	lsls	r3, r3, #4
 8001ee6:	3332      	adds	r3, #50	; 0x32
 8001ee8:	fbb3 f3f9 	udiv	r3, r3, r9
 8001eec:	f003 030f 	and.w	r3, r3, #15
 8001ef0:	ea43 0308 	orr.w	r3, r3, r8
 8001ef4:	e783      	b.n	8001dfe <UART_SetConfig+0xd2>
 8001ef6:	f7ff fa09 	bl	800130c <HAL_RCC_GetPCLK1Freq>
 8001efa:	6867      	ldr	r7, [r4, #4]
 8001efc:	2519      	movs	r5, #25
 8001efe:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001f02:	fb05 f300 	mul.w	r3, r5, r0
 8001f06:	00bf      	lsls	r7, r7, #2
 8001f08:	fbb3 f3f7 	udiv	r3, r3, r7
 8001f0c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001f10:	011f      	lsls	r7, r3, #4
 8001f12:	f7ff f9fb 	bl	800130c <HAL_RCC_GetPCLK1Freq>
 8001f16:	6863      	ldr	r3, [r4, #4]
 8001f18:	4368      	muls	r0, r5
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	fbb0 f8f3 	udiv	r8, r0, r3
 8001f20:	f7ff f9f4 	bl	800130c <HAL_RCC_GetPCLK1Freq>
 8001f24:	6863      	ldr	r3, [r4, #4]
 8001f26:	4368      	muls	r0, r5
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f2e:	fbb3 f3f9 	udiv	r3, r3, r9
 8001f32:	fb09 8313 	mls	r3, r9, r3, r8
 8001f36:	011b      	lsls	r3, r3, #4
 8001f38:	3332      	adds	r3, #50	; 0x32
 8001f3a:	fbb3 f3f9 	udiv	r3, r3, r9
 8001f3e:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8001f42:	f7ff f9e3 	bl	800130c <HAL_RCC_GetPCLK1Freq>
 8001f46:	6862      	ldr	r2, [r4, #4]
 8001f48:	4368      	muls	r0, r5
 8001f4a:	0092      	lsls	r2, r2, #2
 8001f4c:	fbb0 faf2 	udiv	sl, r0, r2
 8001f50:	f7ff f9dc 	bl	800130c <HAL_RCC_GetPCLK1Freq>
 8001f54:	e7bd      	b.n	8001ed2 <UART_SetConfig+0x1a6>
 8001f56:	bf00      	nop
 8001f58:	40011000 	.word	0x40011000
 8001f5c:	40011400 	.word	0x40011400

08001f60 <HAL_UART_Init>:
{
 8001f60:	b510      	push	{r4, lr}
  if(huart == NULL)
 8001f62:	4604      	mov	r4, r0
 8001f64:	b340      	cbz	r0, 8001fb8 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001f66:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001f6a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001f6e:	b91b      	cbnz	r3, 8001f78 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001f70:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001f74:	f001 fa92 	bl	800349c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001f78:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001f7a:	2324      	movs	r3, #36	; 0x24
 8001f7c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001f80:	68d3      	ldr	r3, [r2, #12]
 8001f82:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001f86:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001f88:	4620      	mov	r0, r4
 8001f8a:	f7ff fecf 	bl	8001d2c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f8e:	6823      	ldr	r3, [r4, #0]
 8001f90:	691a      	ldr	r2, [r3, #16]
 8001f92:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001f96:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f98:	695a      	ldr	r2, [r3, #20]
 8001f9a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f9e:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001fa0:	68da      	ldr	r2, [r3, #12]
 8001fa2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001fa6:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fa8:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8001faa:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fac:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001fae:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001fb2:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001fb6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001fb8:	2001      	movs	r0, #1
}
 8001fba:	bd10      	pop	{r4, pc}
 8001fbc:	0000      	movs	r0, r0
	...

08001fc0 <leg1_setJointAngle_rad>:
double _leg2_angle[3] = {0,0,0};
double _leg3_angle[3] = {0,0,0};
double _leg4_angle[3] = {0,0,0};

// Functions
void leg1_setJointAngle_rad (const double ang1, const double ang2, const double ang3){
 8001fc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	__HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_2,_leg1_PWMCompare_90deg[0]/PI/2.0*ang1+_leg1_PWMCompare_0deg[0]);
 8001fc2:	4b23      	ldr	r3, [pc, #140]	; (8002050 <leg1_setJointAngle_rad+0x90>)
 8001fc4:	ec51 0b10 	vmov	r0, r1, d0
 8001fc8:	681c      	ldr	r4, [r3, #0]
 8001fca:	a31b      	add	r3, pc, #108	; (adr r3, 8002038 <leg1_setJointAngle_rad+0x78>)
 8001fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
void leg1_setJointAngle_rad (const double ang1, const double ang2, const double ang3){
 8001fd0:	ed8d 2b00 	vstr	d2, [sp]
 8001fd4:	ed8d 1b02 	vstr	d1, [sp, #8]
	__HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_2,_leg1_PWMCompare_90deg[0]/PI/2.0*ang1+_leg1_PWMCompare_0deg[0]);
 8001fd8:	f7fe face 	bl	8000578 <__aeabi_dmul>
 8001fdc:	2200      	movs	r2, #0
 8001fde:	4b1d      	ldr	r3, [pc, #116]	; (8002054 <leg1_setJointAngle_rad+0x94>)
 8001fe0:	f7fe f918 	bl	8000214 <__adddf3>
 8001fe4:	f7fe fda0 	bl	8000b28 <__aeabi_d2uiz>
	__HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_1,_leg1_PWMCompare_90deg[1]/PI/2.0*ang2+_leg1_PWMCompare_0deg[1]);
 8001fe8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8001fec:	4b1a      	ldr	r3, [pc, #104]	; (8002058 <leg1_setJointAngle_rad+0x98>)
	__HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_2,_leg1_PWMCompare_90deg[0]/PI/2.0*ang1+_leg1_PWMCompare_0deg[0]);
 8001fee:	63a0      	str	r0, [r4, #56]	; 0x38
	__HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_1,_leg1_PWMCompare_90deg[1]/PI/2.0*ang2+_leg1_PWMCompare_0deg[1]);
 8001ff0:	ec51 0b11 	vmov	r0, r1, d1
 8001ff4:	681c      	ldr	r4, [r3, #0]
 8001ff6:	a312      	add	r3, pc, #72	; (adr r3, 8002040 <leg1_setJointAngle_rad+0x80>)
 8001ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ffc:	f7fe fabc 	bl	8000578 <__aeabi_dmul>
 8002000:	2200      	movs	r2, #0
 8002002:	4b16      	ldr	r3, [pc, #88]	; (800205c <leg1_setJointAngle_rad+0x9c>)
 8002004:	f7fe f906 	bl	8000214 <__adddf3>
 8002008:	f7fe fd8e 	bl	8000b28 <__aeabi_d2uiz>
	__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_2,_leg1_PWMCompare_90deg[2]/PI/2.0*ang3+_leg1_PWMCompare_0deg[2]);
 800200c:	ed9d 2b00 	vldr	d2, [sp]
 8002010:	4b13      	ldr	r3, [pc, #76]	; (8002060 <leg1_setJointAngle_rad+0xa0>)
	__HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_1,_leg1_PWMCompare_90deg[1]/PI/2.0*ang2+_leg1_PWMCompare_0deg[1]);
 8002012:	6360      	str	r0, [r4, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_2,_leg1_PWMCompare_90deg[2]/PI/2.0*ang3+_leg1_PWMCompare_0deg[2]);
 8002014:	ec51 0b12 	vmov	r0, r1, d2
 8002018:	681c      	ldr	r4, [r3, #0]
 800201a:	a30b      	add	r3, pc, #44	; (adr r3, 8002048 <leg1_setJointAngle_rad+0x88>)
 800201c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002020:	f7fe faaa 	bl	8000578 <__aeabi_dmul>
 8002024:	2200      	movs	r2, #0
 8002026:	4b0f      	ldr	r3, [pc, #60]	; (8002064 <leg1_setJointAngle_rad+0xa4>)
 8002028:	f7fe f8f4 	bl	8000214 <__adddf3>
 800202c:	f7fe fd7c 	bl	8000b28 <__aeabi_d2uiz>
 8002030:	63a0      	str	r0, [r4, #56]	; 0x38
}
 8002032:	b004      	add	sp, #16
 8002034:	bd10      	pop	{r4, pc}
 8002036:	bf00      	nop
 8002038:	47c04a0a 	.word	0x47c04a0a
 800203c:	4073fe6c 	.word	0x4073fe6c
 8002040:	44498645 	.word	0x44498645
 8002044:	407417e3 	.word	0x407417e3
 8002048:	783efed5 	.word	0x783efed5
 800204c:	407299ea 	.word	0x407299ea
 8002050:	20000270 	.word	0x20000270
 8002054:	4087e800 	.word	0x4087e800
 8002058:	2000022c 	.word	0x2000022c
 800205c:	40865800 	.word	0x40865800
 8002060:	200002c8 	.word	0x200002c8
 8002064:	40877000 	.word	0x40877000

08002068 <leg2_setJointAngle_rad>:

void leg2_setJointAngle_rad (const double ang1, const double ang2, const double ang3){
 8002068:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	__HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_4,-_leg2_PWMCompare_90deg[0]/PI/2.0*ang1+_leg2_PWMCompare_0deg[0]);
 800206a:	4b21      	ldr	r3, [pc, #132]	; (80020f0 <leg2_setJointAngle_rad+0x88>)
 800206c:	ec51 0b10 	vmov	r0, r1, d0
 8002070:	681c      	ldr	r4, [r3, #0]
 8002072:	a31b      	add	r3, pc, #108	; (adr r3, 80020e0 <leg2_setJointAngle_rad+0x78>)
 8002074:	e9d3 2300 	ldrd	r2, r3, [r3]
void leg2_setJointAngle_rad (const double ang1, const double ang2, const double ang3){
 8002078:	ed8d 2b00 	vstr	d2, [sp]
 800207c:	ed8d 1b02 	vstr	d1, [sp, #8]
	__HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_4,-_leg2_PWMCompare_90deg[0]/PI/2.0*ang1+_leg2_PWMCompare_0deg[0]);
 8002080:	f7fe fa7a 	bl	8000578 <__aeabi_dmul>
 8002084:	2200      	movs	r2, #0
 8002086:	4b1b      	ldr	r3, [pc, #108]	; (80020f4 <leg2_setJointAngle_rad+0x8c>)
 8002088:	f7fe f8c4 	bl	8000214 <__adddf3>
 800208c:	f7fe fd4c 	bl	8000b28 <__aeabi_d2uiz>
	__HAL_TIM_SetCompare(&htim2,TIM_CHANNEL_4,_leg2_PWMCompare_90deg[1]/PI/2.0*ang2+_leg2_PWMCompare_0deg[1]);
 8002090:	ed9d 1b02 	vldr	d1, [sp, #8]
 8002094:	4b18      	ldr	r3, [pc, #96]	; (80020f8 <leg2_setJointAngle_rad+0x90>)
	__HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_4,-_leg2_PWMCompare_90deg[0]/PI/2.0*ang1+_leg2_PWMCompare_0deg[0]);
 8002096:	6420      	str	r0, [r4, #64]	; 0x40
	__HAL_TIM_SetCompare(&htim2,TIM_CHANNEL_4,_leg2_PWMCompare_90deg[1]/PI/2.0*ang2+_leg2_PWMCompare_0deg[1]);
 8002098:	ec51 0b11 	vmov	r0, r1, d1
 800209c:	681c      	ldr	r4, [r3, #0]
 800209e:	a312      	add	r3, pc, #72	; (adr r3, 80020e8 <leg2_setJointAngle_rad+0x80>)
 80020a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020a4:	f7fe fa68 	bl	8000578 <__aeabi_dmul>
 80020a8:	2200      	movs	r2, #0
 80020aa:	4b14      	ldr	r3, [pc, #80]	; (80020fc <leg2_setJointAngle_rad+0x94>)
 80020ac:	f7fe f8b2 	bl	8000214 <__adddf3>
 80020b0:	f7fe fd3a 	bl	8000b28 <__aeabi_d2uiz>
	__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_4,_leg2_PWMCompare_90deg[2]/PI/2.0*ang3+_leg2_PWMCompare_0deg[2]);
 80020b4:	ed9d 2b00 	vldr	d2, [sp]
 80020b8:	4b11      	ldr	r3, [pc, #68]	; (8002100 <leg2_setJointAngle_rad+0x98>)
	__HAL_TIM_SetCompare(&htim2,TIM_CHANNEL_4,_leg2_PWMCompare_90deg[1]/PI/2.0*ang2+_leg2_PWMCompare_0deg[1]);
 80020ba:	6420      	str	r0, [r4, #64]	; 0x40
	__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_4,_leg2_PWMCompare_90deg[2]/PI/2.0*ang3+_leg2_PWMCompare_0deg[2]);
 80020bc:	ec51 0b12 	vmov	r0, r1, d2
 80020c0:	681c      	ldr	r4, [r3, #0]
 80020c2:	a309      	add	r3, pc, #36	; (adr r3, 80020e8 <leg2_setJointAngle_rad+0x80>)
 80020c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020c8:	f7fe fa56 	bl	8000578 <__aeabi_dmul>
 80020cc:	2200      	movs	r2, #0
 80020ce:	4b0d      	ldr	r3, [pc, #52]	; (8002104 <leg2_setJointAngle_rad+0x9c>)
 80020d0:	f7fe f8a0 	bl	8000214 <__adddf3>
 80020d4:	f7fe fd28 	bl	8000b28 <__aeabi_d2uiz>
 80020d8:	6420      	str	r0, [r4, #64]	; 0x40
}
 80020da:	b004      	add	sp, #16
 80020dc:	bd10      	pop	{r4, pc}
 80020de:	bf00      	nop
 80020e0:	47c04a0a 	.word	0x47c04a0a
 80020e4:	c073fe6c 	.word	0xc073fe6c
 80020e8:	7151774b 	.word	0x7151774b
 80020ec:	4072ccd8 	.word	0x4072ccd8
 80020f0:	20000270 	.word	0x20000270
 80020f4:	4087e800 	.word	0x4087e800
 80020f8:	2000035c 	.word	0x2000035c
 80020fc:	40863000 	.word	0x40863000
 8002100:	200002c8 	.word	0x200002c8
 8002104:	4087c000 	.word	0x4087c000

08002108 <leg3_setJointAngle_rad>:

void leg3_setJointAngle_rad (const double ang1, const double ang2, const double ang3){
 8002108:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	__HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_3,_leg3_PWMCompare_90deg[0]/PI/2.0*ang1+_leg3_PWMCompare_0deg[0]);
 800210a:	4b23      	ldr	r3, [pc, #140]	; (8002198 <leg3_setJointAngle_rad+0x90>)
 800210c:	ec51 0b10 	vmov	r0, r1, d0
 8002110:	681c      	ldr	r4, [r3, #0]
 8002112:	a31b      	add	r3, pc, #108	; (adr r3, 8002180 <leg3_setJointAngle_rad+0x78>)
 8002114:	e9d3 2300 	ldrd	r2, r3, [r3]
void leg3_setJointAngle_rad (const double ang1, const double ang2, const double ang3){
 8002118:	ed8d 2b00 	vstr	d2, [sp]
 800211c:	ed8d 1b02 	vstr	d1, [sp, #8]
	__HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_3,_leg3_PWMCompare_90deg[0]/PI/2.0*ang1+_leg3_PWMCompare_0deg[0]);
 8002120:	f7fe fa2a 	bl	8000578 <__aeabi_dmul>
 8002124:	2200      	movs	r2, #0
 8002126:	4b1d      	ldr	r3, [pc, #116]	; (800219c <leg3_setJointAngle_rad+0x94>)
 8002128:	f7fe f874 	bl	8000214 <__adddf3>
 800212c:	f7fe fcfc 	bl	8000b28 <__aeabi_d2uiz>
	__HAL_TIM_SetCompare(&htim2,TIM_CHANNEL_2,-_leg3_PWMCompare_90deg[1]/PI/2.0*ang2+_leg3_PWMCompare_0deg[1]);
 8002130:	ed9d 1b02 	vldr	d1, [sp, #8]
 8002134:	4b1a      	ldr	r3, [pc, #104]	; (80021a0 <leg3_setJointAngle_rad+0x98>)
	__HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_3,_leg3_PWMCompare_90deg[0]/PI/2.0*ang1+_leg3_PWMCompare_0deg[0]);
 8002136:	63e0      	str	r0, [r4, #60]	; 0x3c
	__HAL_TIM_SetCompare(&htim2,TIM_CHANNEL_2,-_leg3_PWMCompare_90deg[1]/PI/2.0*ang2+_leg3_PWMCompare_0deg[1]);
 8002138:	ec51 0b11 	vmov	r0, r1, d1
 800213c:	681c      	ldr	r4, [r3, #0]
 800213e:	a312      	add	r3, pc, #72	; (adr r3, 8002188 <leg3_setJointAngle_rad+0x80>)
 8002140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002144:	f7fe fa18 	bl	8000578 <__aeabi_dmul>
 8002148:	2200      	movs	r2, #0
 800214a:	4b16      	ldr	r3, [pc, #88]	; (80021a4 <leg3_setJointAngle_rad+0x9c>)
 800214c:	f7fe f862 	bl	8000214 <__adddf3>
 8002150:	f7fe fcea 	bl	8000b28 <__aeabi_d2uiz>
	__HAL_TIM_SetCompare(&htim2,TIM_CHANNEL_1,-_leg3_PWMCompare_90deg[2]/PI/2.0*ang3+_leg3_PWMCompare_0deg[2]);
 8002154:	ed9d 2b00 	vldr	d2, [sp]
	__HAL_TIM_SetCompare(&htim2,TIM_CHANNEL_2,-_leg3_PWMCompare_90deg[1]/PI/2.0*ang2+_leg3_PWMCompare_0deg[1]);
 8002158:	63a0      	str	r0, [r4, #56]	; 0x38
	__HAL_TIM_SetCompare(&htim2,TIM_CHANNEL_1,-_leg3_PWMCompare_90deg[2]/PI/2.0*ang3+_leg3_PWMCompare_0deg[2]);
 800215a:	a30d      	add	r3, pc, #52	; (adr r3, 8002190 <leg3_setJointAngle_rad+0x88>)
 800215c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002160:	ec51 0b12 	vmov	r0, r1, d2
 8002164:	f7fe fa08 	bl	8000578 <__aeabi_dmul>
 8002168:	2200      	movs	r2, #0
 800216a:	4b0f      	ldr	r3, [pc, #60]	; (80021a8 <leg3_setJointAngle_rad+0xa0>)
 800216c:	f7fe f852 	bl	8000214 <__adddf3>
 8002170:	f7fe fcda 	bl	8000b28 <__aeabi_d2uiz>
 8002174:	6360      	str	r0, [r4, #52]	; 0x34
}
 8002176:	b004      	add	sp, #16
 8002178:	bd10      	pop	{r4, pc}
 800217a:	bf00      	nop
 800217c:	f3af 8000 	nop.w
 8002180:	47c04a0a 	.word	0x47c04a0a
 8002184:	4073fe6c 	.word	0x4073fe6c
 8002188:	66ed2bfb 	.word	0x66ed2bfb
 800218c:	c073193d 	.word	0xc073193d
 8002190:	7151774b 	.word	0x7151774b
 8002194:	c072ccd8 	.word	0xc072ccd8
 8002198:	20000270 	.word	0x20000270
 800219c:	40865800 	.word	0x40865800
 80021a0:	2000035c 	.word	0x2000035c
 80021a4:	40863000 	.word	0x40863000
 80021a8:	4086d000 	.word	0x4086d000
 80021ac:	00000000 	.word	0x00000000

080021b0 <leg4_setJointAngle_rad>:

void leg4_setJointAngle_rad (const double ang1, const double ang2, const double ang3){
 80021b0:	b530      	push	{r4, r5, lr}
	__HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_3,-_leg4_PWMCompare_90deg[0]/PI/2.0*ang1+_leg4_PWMCompare_0deg[0]);
 80021b2:	4b21      	ldr	r3, [pc, #132]	; (8002238 <leg4_setJointAngle_rad+0x88>)
void leg4_setJointAngle_rad (const double ang1, const double ang2, const double ang3){
 80021b4:	b085      	sub	sp, #20
	__HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_3,-_leg4_PWMCompare_90deg[0]/PI/2.0*ang1+_leg4_PWMCompare_0deg[0]);
 80021b6:	ec51 0b10 	vmov	r0, r1, d0
 80021ba:	681c      	ldr	r4, [r3, #0]
 80021bc:	a31a      	add	r3, pc, #104	; (adr r3, 8002228 <leg4_setJointAngle_rad+0x78>)
 80021be:	e9d3 2300 	ldrd	r2, r3, [r3]
void leg4_setJointAngle_rad (const double ang1, const double ang2, const double ang3){
 80021c2:	ed8d 2b00 	vstr	d2, [sp]
 80021c6:	ed8d 1b02 	vstr	d1, [sp, #8]
	__HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_3,-_leg4_PWMCompare_90deg[0]/PI/2.0*ang1+_leg4_PWMCompare_0deg[0]);
 80021ca:	f7fe f9d5 	bl	8000578 <__aeabi_dmul>
 80021ce:	2200      	movs	r2, #0
 80021d0:	4b1a      	ldr	r3, [pc, #104]	; (800223c <leg4_setJointAngle_rad+0x8c>)
 80021d2:	f7fe f81f 	bl	8000214 <__adddf3>
 80021d6:	f7fe fca7 	bl	8000b28 <__aeabi_d2uiz>
	__HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_1,-_leg4_PWMCompare_90deg[1]/PI/2.0*ang2+_leg4_PWMCompare_0deg[1]);
 80021da:	ed9d 1b02 	vldr	d1, [sp, #8]
 80021de:	4b18      	ldr	r3, [pc, #96]	; (8002240 <leg4_setJointAngle_rad+0x90>)
	__HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_3,-_leg4_PWMCompare_90deg[0]/PI/2.0*ang1+_leg4_PWMCompare_0deg[0]);
 80021e0:	63e0      	str	r0, [r4, #60]	; 0x3c
	__HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_1,-_leg4_PWMCompare_90deg[1]/PI/2.0*ang2+_leg4_PWMCompare_0deg[1]);
 80021e2:	681d      	ldr	r5, [r3, #0]
 80021e4:	ec51 0b11 	vmov	r0, r1, d1
 80021e8:	a311      	add	r3, pc, #68	; (adr r3, 8002230 <leg4_setJointAngle_rad+0x80>)
 80021ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ee:	f7fe f9c3 	bl	8000578 <__aeabi_dmul>
 80021f2:	2200      	movs	r2, #0
 80021f4:	4b13      	ldr	r3, [pc, #76]	; (8002244 <leg4_setJointAngle_rad+0x94>)
 80021f6:	f7fe f80d 	bl	8000214 <__adddf3>
 80021fa:	f7fe fc95 	bl	8000b28 <__aeabi_d2uiz>
	__HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_4,-_leg4_PWMCompare_90deg[2]/PI/2.0*ang3+_leg4_PWMCompare_0deg[2]);
 80021fe:	ed9d 2b00 	vldr	d2, [sp]
	__HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_1,-_leg4_PWMCompare_90deg[1]/PI/2.0*ang2+_leg4_PWMCompare_0deg[1]);
 8002202:	6368      	str	r0, [r5, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_4,-_leg4_PWMCompare_90deg[2]/PI/2.0*ang3+_leg4_PWMCompare_0deg[2]);
 8002204:	a30a      	add	r3, pc, #40	; (adr r3, 8002230 <leg4_setJointAngle_rad+0x80>)
 8002206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800220a:	ec51 0b12 	vmov	r0, r1, d2
 800220e:	f7fe f9b3 	bl	8000578 <__aeabi_dmul>
 8002212:	2200      	movs	r2, #0
 8002214:	4b0c      	ldr	r3, [pc, #48]	; (8002248 <leg4_setJointAngle_rad+0x98>)
 8002216:	f7fd fffd 	bl	8000214 <__adddf3>
 800221a:	f7fe fc85 	bl	8000b28 <__aeabi_d2uiz>
 800221e:	6420      	str	r0, [r4, #64]	; 0x40
}
 8002220:	b005      	add	sp, #20
 8002222:	bd30      	pop	{r4, r5, pc}
 8002224:	f3af 8000 	nop.w
 8002228:	f49def8a 	.word	0xf49def8a
 800222c:	c0766193 	.word	0xc0766193
 8002230:	74c83b10 	.word	0x74c83b10
 8002234:	c072b361 	.word	0xc072b361
 8002238:	2000022c 	.word	0x2000022c
 800223c:	408e0000 	.word	0x408e0000
 8002240:	20000270 	.word	0x20000270
 8002244:	4087c000 	.word	0x4087c000
 8002248:	40881000 	.word	0x40881000
 800224c:	00000000 	.word	0x00000000

08002250 <leg1_setPosition>:


void leg1_setPosition (const double rx, const double ry, const double rz){
 8002250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002254:	ed2d 8b02 	vpush	{d8}
 8002258:	ec57 6b10 	vmov	r6, r7, d0
 800225c:	b085      	sub	sp, #20
	double tempC, tempS, ang1, ang2, ang3;
	tempC = (rx*rx+ry*ry+rz*rz-_leg_length[0]*_leg_length[0]-_leg_length[1]*_leg_length[1]-_leg_length[2]*_leg_length[2])/2/_leg_length[1]/_leg_length[2];
 800225e:	ee10 2a10 	vmov	r2, s0
 8002262:	ee10 0a10 	vmov	r0, s0
 8002266:	463b      	mov	r3, r7
 8002268:	4639      	mov	r1, r7
void leg1_setPosition (const double rx, const double ry, const double rz){
 800226a:	ec55 4b12 	vmov	r4, r5, d2
 800226e:	ec5b ab11 	vmov	sl, fp, d1
	tempC = (rx*rx+ry*ry+rz*rz-_leg_length[0]*_leg_length[0]-_leg_length[1]*_leg_length[1]-_leg_length[2]*_leg_length[2])/2/_leg_length[1]/_leg_length[2];
 8002272:	f7fe f981 	bl	8000578 <__aeabi_dmul>
 8002276:	4652      	mov	r2, sl
 8002278:	4680      	mov	r8, r0
 800227a:	4689      	mov	r9, r1
 800227c:	465b      	mov	r3, fp
 800227e:	4650      	mov	r0, sl
 8002280:	4659      	mov	r1, fp
 8002282:	f7fe f979 	bl	8000578 <__aeabi_dmul>
 8002286:	4602      	mov	r2, r0
 8002288:	460b      	mov	r3, r1
 800228a:	4640      	mov	r0, r8
 800228c:	4649      	mov	r1, r9
 800228e:	f7fd ffc1 	bl	8000214 <__adddf3>
 8002292:	4622      	mov	r2, r4
 8002294:	4680      	mov	r8, r0
 8002296:	4689      	mov	r9, r1
 8002298:	462b      	mov	r3, r5
 800229a:	4620      	mov	r0, r4
 800229c:	4629      	mov	r1, r5
 800229e:	f7fe f96b 	bl	8000578 <__aeabi_dmul>
 80022a2:	4602      	mov	r2, r0
 80022a4:	460b      	mov	r3, r1
 80022a6:	4640      	mov	r0, r8
 80022a8:	4649      	mov	r1, r9
 80022aa:	f7fd ffb3 	bl	8000214 <__adddf3>
 80022ae:	a388      	add	r3, pc, #544	; (adr r3, 80024d0 <leg1_setPosition+0x280>)
 80022b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022b4:	f7fd ffac 	bl	8000210 <__aeabi_dsub>
 80022b8:	a387      	add	r3, pc, #540	; (adr r3, 80024d8 <leg1_setPosition+0x288>)
 80022ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022be:	f7fd ffa7 	bl	8000210 <__aeabi_dsub>
 80022c2:	a387      	add	r3, pc, #540	; (adr r3, 80024e0 <leg1_setPosition+0x290>)
 80022c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022c8:	f7fd ffa2 	bl	8000210 <__aeabi_dsub>
 80022cc:	2200      	movs	r2, #0
 80022ce:	4b7e      	ldr	r3, [pc, #504]	; (80024c8 <leg1_setPosition+0x278>)
 80022d0:	f7fe f952 	bl	8000578 <__aeabi_dmul>
 80022d4:	a372      	add	r3, pc, #456	; (adr r3, 80024a0 <leg1_setPosition+0x250>)
 80022d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022da:	f7fe fa77 	bl	80007cc <__aeabi_ddiv>
 80022de:	a372      	add	r3, pc, #456	; (adr r3, 80024a8 <leg1_setPosition+0x258>)
 80022e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022e4:	f7fe fa72 	bl	80007cc <__aeabi_ddiv>
	tempS = -sqrt(fabs(1.0-tempC*tempC));		//+ -> -
 80022e8:	4602      	mov	r2, r0
 80022ea:	460b      	mov	r3, r1
	tempC = (rx*rx+ry*ry+rz*rz-_leg_length[0]*_leg_length[0]-_leg_length[1]*_leg_length[1]-_leg_length[2]*_leg_length[2])/2/_leg_length[1]/_leg_length[2];
 80022ec:	4680      	mov	r8, r0
 80022ee:	4689      	mov	r9, r1
	tempS = -sqrt(fabs(1.0-tempC*tempC));		//+ -> -
 80022f0:	f7fe f942 	bl	8000578 <__aeabi_dmul>
 80022f4:	4602      	mov	r2, r0
 80022f6:	460b      	mov	r3, r1
 80022f8:	2000      	movs	r0, #0
 80022fa:	4974      	ldr	r1, [pc, #464]	; (80024cc <leg1_setPosition+0x27c>)
 80022fc:	f7fd ff88 	bl	8000210 <__aeabi_dsub>
 8002300:	4602      	mov	r2, r0
 8002302:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8002306:	ec43 2b10 	vmov	d0, r2, r3
 800230a:	f002 fc6f 	bl	8004bec <sqrt>
 800230e:	ec51 0b10 	vmov	r0, r1, d0
 8002312:	ee10 2a10 	vmov	r2, s0
 8002316:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
	ang3 = atan2(tempS, tempC);
 800231a:	ec49 8b11 	vmov	d1, r8, r9
 800231e:	ec43 2b10 	vmov	d0, r2, r3
 8002322:	f002 fc61 	bl	8004be8 <atan2>
 8002326:	eeb0 8a40 	vmov.f32	s16, s0
 800232a:	eef0 8a60 	vmov.f32	s17, s1

	tempS = -rx/sqrt(fabs(_leg_length[1]*_leg_length[1]+_leg_length[2]*_leg_length[2]+2.0*_leg_length[1]*_leg_length[2]*cos(ang3)));
 800232e:	f002 fbcf 	bl	8004ad0 <cos>
 8002332:	ec59 8b10 	vmov	r8, r9, d0
 8002336:	ee10 0a10 	vmov	r0, s0
 800233a:	a35d      	add	r3, pc, #372	; (adr r3, 80024b0 <leg1_setPosition+0x260>)
 800233c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002340:	4649      	mov	r1, r9
 8002342:	f7fe f919 	bl	8000578 <__aeabi_dmul>
 8002346:	a35c      	add	r3, pc, #368	; (adr r3, 80024b8 <leg1_setPosition+0x268>)
 8002348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800234c:	f7fd ff62 	bl	8000214 <__adddf3>
 8002350:	4602      	mov	r2, r0
 8002352:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8002356:	ec43 2b10 	vmov	d0, r2, r3
 800235a:	f002 fc47 	bl	8004bec <sqrt>
 800235e:	4630      	mov	r0, r6
 8002360:	ec53 2b10 	vmov	r2, r3, d0
 8002364:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
 8002368:	f7fe fa30 	bl	80007cc <__aeabi_ddiv>
	tempC = sqrt(fabs(1.0-tempS*tempS));		//+ <- -
 800236c:	4602      	mov	r2, r0
 800236e:	460b      	mov	r3, r1
	tempS = -rx/sqrt(fabs(_leg_length[1]*_leg_length[1]+_leg_length[2]*_leg_length[2]+2.0*_leg_length[1]*_leg_length[2]*cos(ang3)));
 8002370:	4606      	mov	r6, r0
 8002372:	460f      	mov	r7, r1
	tempC = sqrt(fabs(1.0-tempS*tempS));		//+ <- -
 8002374:	f7fe f900 	bl	8000578 <__aeabi_dmul>
 8002378:	4602      	mov	r2, r0
 800237a:	460b      	mov	r3, r1
 800237c:	2000      	movs	r0, #0
 800237e:	4953      	ldr	r1, [pc, #332]	; (80024cc <leg1_setPosition+0x27c>)
 8002380:	f7fd ff46 	bl	8000210 <__aeabi_dsub>
 8002384:	4602      	mov	r2, r0
 8002386:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800238a:	ec43 2b10 	vmov	d0, r2, r3
 800238e:	f002 fc2d 	bl	8004bec <sqrt>
	ang2 = atan2(tempS, tempC) - atan2(_leg_length[2]*sin(ang3), _leg_length[1]+_leg_length[2]*cos(ang3));
 8002392:	eeb0 1a40 	vmov.f32	s2, s0
 8002396:	eef0 1a60 	vmov.f32	s3, s1
 800239a:	ec47 6b10 	vmov	d0, r6, r7
 800239e:	f002 fc23 	bl	8004be8 <atan2>
 80023a2:	ec57 6b10 	vmov	r6, r7, d0
 80023a6:	eeb0 0a48 	vmov.f32	s0, s16
 80023aa:	eef0 0a68 	vmov.f32	s1, s17
 80023ae:	f002 fbd3 	bl	8004b58 <sin>
 80023b2:	a33d      	add	r3, pc, #244	; (adr r3, 80024a8 <leg1_setPosition+0x258>)
 80023b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b8:	4640      	mov	r0, r8
 80023ba:	4649      	mov	r1, r9
 80023bc:	ed8d 0b02 	vstr	d0, [sp, #8]
 80023c0:	f7fe f8da 	bl	8000578 <__aeabi_dmul>
 80023c4:	a336      	add	r3, pc, #216	; (adr r3, 80024a0 <leg1_setPosition+0x250>)
 80023c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ca:	f7fd ff23 	bl	8000214 <__adddf3>
 80023ce:	ed9d 0b02 	vldr	d0, [sp, #8]
 80023d2:	e9cd 0100 	strd	r0, r1, [sp]
 80023d6:	a334      	add	r3, pc, #208	; (adr r3, 80024a8 <leg1_setPosition+0x258>)
 80023d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023dc:	ec51 0b10 	vmov	r0, r1, d0
 80023e0:	f7fe f8ca 	bl	8000578 <__aeabi_dmul>
 80023e4:	ed9d 1b00 	vldr	d1, [sp]
 80023e8:	ec41 0b10 	vmov	d0, r0, r1
 80023ec:	f002 fbfc 	bl	8004be8 <atan2>
 80023f0:	4630      	mov	r0, r6
 80023f2:	ec53 2b10 	vmov	r2, r3, d0
 80023f6:	4639      	mov	r1, r7
 80023f8:	f7fd ff0a 	bl	8000210 <__aeabi_dsub>

	ang1 = atan2(ry, -rz) - atan2(_leg_length[0], _leg_length[1]*cos(ang2)+_leg_length[2]*cos(ang2+ang3));
 80023fc:	4622      	mov	r2, r4
 80023fe:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8002402:	ec43 2b11 	vmov	d1, r2, r3
 8002406:	ec4b ab10 	vmov	d0, sl, fp
	ang2 = atan2(tempS, tempC) - atan2(_leg_length[2]*sin(ang3), _leg_length[1]+_leg_length[2]*cos(ang3));
 800240a:	4606      	mov	r6, r0
 800240c:	460f      	mov	r7, r1
	ang1 = atan2(ry, -rz) - atan2(_leg_length[0], _leg_length[1]*cos(ang2)+_leg_length[2]*cos(ang2+ang3));
 800240e:	f002 fbeb 	bl	8004be8 <atan2>
 8002412:	ec55 4b10 	vmov	r4, r5, d0
 8002416:	ec47 6b10 	vmov	d0, r6, r7
 800241a:	f002 fb59 	bl	8004ad0 <cos>
 800241e:	4632      	mov	r2, r6
 8002420:	463b      	mov	r3, r7
 8002422:	ec51 0b18 	vmov	r0, r1, d8
 8002426:	ec59 8b10 	vmov	r8, r9, d0
 800242a:	f7fd fef3 	bl	8000214 <__adddf3>
 800242e:	ec41 0b10 	vmov	d0, r0, r1
 8002432:	f002 fb4d 	bl	8004ad0 <cos>
 8002436:	a31a      	add	r3, pc, #104	; (adr r3, 80024a0 <leg1_setPosition+0x250>)
 8002438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800243c:	4640      	mov	r0, r8
 800243e:	4649      	mov	r1, r9
 8002440:	ed8d 0b00 	vstr	d0, [sp]
 8002444:	f7fe f898 	bl	8000578 <__aeabi_dmul>
 8002448:	ed9d 0b00 	vldr	d0, [sp]
 800244c:	4680      	mov	r8, r0
 800244e:	4689      	mov	r9, r1
 8002450:	a315      	add	r3, pc, #84	; (adr r3, 80024a8 <leg1_setPosition+0x258>)
 8002452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002456:	ec51 0b10 	vmov	r0, r1, d0
 800245a:	f7fe f88d 	bl	8000578 <__aeabi_dmul>
 800245e:	4602      	mov	r2, r0
 8002460:	460b      	mov	r3, r1
 8002462:	4640      	mov	r0, r8
 8002464:	4649      	mov	r1, r9
 8002466:	f7fd fed5 	bl	8000214 <__adddf3>
 800246a:	ed9f 0b15 	vldr	d0, [pc, #84]	; 80024c0 <leg1_setPosition+0x270>
 800246e:	ec41 0b11 	vmov	d1, r0, r1
 8002472:	f002 fbb9 	bl	8004be8 <atan2>
 8002476:	4620      	mov	r0, r4
 8002478:	ec53 2b10 	vmov	r2, r3, d0
 800247c:	4629      	mov	r1, r5
 800247e:	f7fd fec7 	bl	8000210 <__aeabi_dsub>

	leg1_setJointAngle_rad(ang1, ang2, ang3);
 8002482:	eeb0 2a48 	vmov.f32	s4, s16
 8002486:	eef0 2a68 	vmov.f32	s5, s17
 800248a:	ec47 6b11 	vmov	d1, r6, r7
 800248e:	ec41 0b10 	vmov	d0, r0, r1
}
 8002492:	b005      	add	sp, #20
 8002494:	ecbd 8b02 	vpop	{d8}
 8002498:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	leg1_setJointAngle_rad(ang1, ang2, ang3);
 800249c:	f7ff bd90 	b.w	8001fc0 <leg1_setJointAngle_rad>
 80024a0:	8f5c28f6 	.word	0x8f5c28f6
 80024a4:	404e75c2 	.word	0x404e75c2
 80024a8:	51eb851f 	.word	0x51eb851f
 80024ac:	40585eb8 	.word	0x40585eb8
 80024b0:	4a2339c1 	.word	0x4a2339c1
 80024b4:	40c7327b 	.word	0x40c7327b
 80024b8:	63f14121 	.word	0x63f14121
 80024bc:	40c9cecc 	.word	0x40c9cecc
 80024c0:	66666666 	.word	0x66666666
 80024c4:	404dc666 	.word	0x404dc666
 80024c8:	3fe00000 	.word	0x3fe00000
 80024cc:	3ff00000 	.word	0x3ff00000
 80024d0:	ae147ae1 	.word	0xae147ae1
 80024d4:	40abb467 	.word	0x40abb467
 80024d8:	28240b78 	.word	0x28240b78
 80024dc:	40acfe7e 	.word	0x40acfe7e
 80024e0:	d9e83e43 	.word	0xd9e83e43
 80024e4:	40c28f2c 	.word	0x40c28f2c

080024e8 <leg2_setPosition>:

void leg2_setPosition (const double rx, const double ry, const double rz){
 80024e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024ec:	ed2d 8b02 	vpush	{d8}
 80024f0:	ec57 6b10 	vmov	r6, r7, d0
 80024f4:	b085      	sub	sp, #20
	double tempC, tempS, ang1, ang2, ang3;
	tempC = (rx*rx+ry*ry+rz*rz-_leg_length[0]*_leg_length[0]-_leg_length[1]*_leg_length[1]-_leg_length[2]*_leg_length[2])/2/_leg_length[1]/_leg_length[2];
 80024f6:	ee10 2a10 	vmov	r2, s0
 80024fa:	ee10 0a10 	vmov	r0, s0
 80024fe:	463b      	mov	r3, r7
 8002500:	4639      	mov	r1, r7
void leg2_setPosition (const double rx, const double ry, const double rz){
 8002502:	ec55 4b12 	vmov	r4, r5, d2
 8002506:	ec5b ab11 	vmov	sl, fp, d1
	tempC = (rx*rx+ry*ry+rz*rz-_leg_length[0]*_leg_length[0]-_leg_length[1]*_leg_length[1]-_leg_length[2]*_leg_length[2])/2/_leg_length[1]/_leg_length[2];
 800250a:	f7fe f835 	bl	8000578 <__aeabi_dmul>
 800250e:	4652      	mov	r2, sl
 8002510:	4680      	mov	r8, r0
 8002512:	4689      	mov	r9, r1
 8002514:	465b      	mov	r3, fp
 8002516:	4650      	mov	r0, sl
 8002518:	4659      	mov	r1, fp
 800251a:	f7fe f82d 	bl	8000578 <__aeabi_dmul>
 800251e:	4602      	mov	r2, r0
 8002520:	460b      	mov	r3, r1
 8002522:	4640      	mov	r0, r8
 8002524:	4649      	mov	r1, r9
 8002526:	f7fd fe75 	bl	8000214 <__adddf3>
 800252a:	4622      	mov	r2, r4
 800252c:	4680      	mov	r8, r0
 800252e:	4689      	mov	r9, r1
 8002530:	462b      	mov	r3, r5
 8002532:	4620      	mov	r0, r4
 8002534:	4629      	mov	r1, r5
 8002536:	f7fe f81f 	bl	8000578 <__aeabi_dmul>
 800253a:	4602      	mov	r2, r0
 800253c:	460b      	mov	r3, r1
 800253e:	4640      	mov	r0, r8
 8002540:	4649      	mov	r1, r9
 8002542:	f7fd fe67 	bl	8000214 <__adddf3>
 8002546:	a388      	add	r3, pc, #544	; (adr r3, 8002768 <leg2_setPosition+0x280>)
 8002548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800254c:	f7fd fe60 	bl	8000210 <__aeabi_dsub>
 8002550:	a387      	add	r3, pc, #540	; (adr r3, 8002770 <leg2_setPosition+0x288>)
 8002552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002556:	f7fd fe5b 	bl	8000210 <__aeabi_dsub>
 800255a:	a387      	add	r3, pc, #540	; (adr r3, 8002778 <leg2_setPosition+0x290>)
 800255c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002560:	f7fd fe56 	bl	8000210 <__aeabi_dsub>
 8002564:	2200      	movs	r2, #0
 8002566:	4b7e      	ldr	r3, [pc, #504]	; (8002760 <leg2_setPosition+0x278>)
 8002568:	f7fe f806 	bl	8000578 <__aeabi_dmul>
 800256c:	a372      	add	r3, pc, #456	; (adr r3, 8002738 <leg2_setPosition+0x250>)
 800256e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002572:	f7fe f92b 	bl	80007cc <__aeabi_ddiv>
 8002576:	a372      	add	r3, pc, #456	; (adr r3, 8002740 <leg2_setPosition+0x258>)
 8002578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800257c:	f7fe f926 	bl	80007cc <__aeabi_ddiv>
	tempS = -sqrt(fabs(1.0-tempC*tempC));		//+ -> -
 8002580:	4602      	mov	r2, r0
 8002582:	460b      	mov	r3, r1
	tempC = (rx*rx+ry*ry+rz*rz-_leg_length[0]*_leg_length[0]-_leg_length[1]*_leg_length[1]-_leg_length[2]*_leg_length[2])/2/_leg_length[1]/_leg_length[2];
 8002584:	4680      	mov	r8, r0
 8002586:	4689      	mov	r9, r1
	tempS = -sqrt(fabs(1.0-tempC*tempC));		//+ -> -
 8002588:	f7fd fff6 	bl	8000578 <__aeabi_dmul>
 800258c:	4602      	mov	r2, r0
 800258e:	460b      	mov	r3, r1
 8002590:	2000      	movs	r0, #0
 8002592:	4974      	ldr	r1, [pc, #464]	; (8002764 <leg2_setPosition+0x27c>)
 8002594:	f7fd fe3c 	bl	8000210 <__aeabi_dsub>
 8002598:	4602      	mov	r2, r0
 800259a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800259e:	ec43 2b10 	vmov	d0, r2, r3
 80025a2:	f002 fb23 	bl	8004bec <sqrt>
 80025a6:	ec51 0b10 	vmov	r0, r1, d0
 80025aa:	ee10 2a10 	vmov	r2, s0
 80025ae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
	ang3 = atan2(tempS, tempC);
 80025b2:	ec49 8b11 	vmov	d1, r8, r9
 80025b6:	ec43 2b10 	vmov	d0, r2, r3
 80025ba:	f002 fb15 	bl	8004be8 <atan2>
 80025be:	eeb0 8a40 	vmov.f32	s16, s0
 80025c2:	eef0 8a60 	vmov.f32	s17, s1

	tempS = -rx/sqrt(fabs(_leg_length[1]*_leg_length[1]+_leg_length[2]*_leg_length[2]+2.0*_leg_length[1]*_leg_length[2]*cos(ang3)));
 80025c6:	f002 fa83 	bl	8004ad0 <cos>
 80025ca:	ec59 8b10 	vmov	r8, r9, d0
 80025ce:	ee10 0a10 	vmov	r0, s0
 80025d2:	a35d      	add	r3, pc, #372	; (adr r3, 8002748 <leg2_setPosition+0x260>)
 80025d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025d8:	4649      	mov	r1, r9
 80025da:	f7fd ffcd 	bl	8000578 <__aeabi_dmul>
 80025de:	a35c      	add	r3, pc, #368	; (adr r3, 8002750 <leg2_setPosition+0x268>)
 80025e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025e4:	f7fd fe16 	bl	8000214 <__adddf3>
 80025e8:	4602      	mov	r2, r0
 80025ea:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80025ee:	ec43 2b10 	vmov	d0, r2, r3
 80025f2:	f002 fafb 	bl	8004bec <sqrt>
 80025f6:	4630      	mov	r0, r6
 80025f8:	ec53 2b10 	vmov	r2, r3, d0
 80025fc:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
 8002600:	f7fe f8e4 	bl	80007cc <__aeabi_ddiv>
	tempC = sqrt(fabs(1.0-tempS*tempS));		//+ <- -
 8002604:	4602      	mov	r2, r0
 8002606:	460b      	mov	r3, r1
	tempS = -rx/sqrt(fabs(_leg_length[1]*_leg_length[1]+_leg_length[2]*_leg_length[2]+2.0*_leg_length[1]*_leg_length[2]*cos(ang3)));
 8002608:	4606      	mov	r6, r0
 800260a:	460f      	mov	r7, r1
	tempC = sqrt(fabs(1.0-tempS*tempS));		//+ <- -
 800260c:	f7fd ffb4 	bl	8000578 <__aeabi_dmul>
 8002610:	4602      	mov	r2, r0
 8002612:	460b      	mov	r3, r1
 8002614:	2000      	movs	r0, #0
 8002616:	4953      	ldr	r1, [pc, #332]	; (8002764 <leg2_setPosition+0x27c>)
 8002618:	f7fd fdfa 	bl	8000210 <__aeabi_dsub>
 800261c:	4602      	mov	r2, r0
 800261e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8002622:	ec43 2b10 	vmov	d0, r2, r3
 8002626:	f002 fae1 	bl	8004bec <sqrt>
	ang2 = atan2(tempS, tempC) - atan2(_leg_length[2]*sin(ang3), _leg_length[1]+_leg_length[2]*cos(ang3));
 800262a:	eeb0 1a40 	vmov.f32	s2, s0
 800262e:	eef0 1a60 	vmov.f32	s3, s1
 8002632:	ec47 6b10 	vmov	d0, r6, r7
 8002636:	f002 fad7 	bl	8004be8 <atan2>
 800263a:	ec57 6b10 	vmov	r6, r7, d0
 800263e:	eeb0 0a48 	vmov.f32	s0, s16
 8002642:	eef0 0a68 	vmov.f32	s1, s17
 8002646:	f002 fa87 	bl	8004b58 <sin>
 800264a:	a33d      	add	r3, pc, #244	; (adr r3, 8002740 <leg2_setPosition+0x258>)
 800264c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002650:	4640      	mov	r0, r8
 8002652:	4649      	mov	r1, r9
 8002654:	ed8d 0b02 	vstr	d0, [sp, #8]
 8002658:	f7fd ff8e 	bl	8000578 <__aeabi_dmul>
 800265c:	a336      	add	r3, pc, #216	; (adr r3, 8002738 <leg2_setPosition+0x250>)
 800265e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002662:	f7fd fdd7 	bl	8000214 <__adddf3>
 8002666:	ed9d 0b02 	vldr	d0, [sp, #8]
 800266a:	e9cd 0100 	strd	r0, r1, [sp]
 800266e:	a334      	add	r3, pc, #208	; (adr r3, 8002740 <leg2_setPosition+0x258>)
 8002670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002674:	ec51 0b10 	vmov	r0, r1, d0
 8002678:	f7fd ff7e 	bl	8000578 <__aeabi_dmul>
 800267c:	ed9d 1b00 	vldr	d1, [sp]
 8002680:	ec41 0b10 	vmov	d0, r0, r1
 8002684:	f002 fab0 	bl	8004be8 <atan2>
 8002688:	4630      	mov	r0, r6
 800268a:	ec53 2b10 	vmov	r2, r3, d0
 800268e:	4639      	mov	r1, r7
 8002690:	f7fd fdbe 	bl	8000210 <__aeabi_dsub>

	ang1 = atan2(ry, -rz) - atan2(_leg_length[0], _leg_length[1]*cos(ang2)+_leg_length[2]*cos(ang2+ang3));
 8002694:	4622      	mov	r2, r4
 8002696:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800269a:	ec43 2b11 	vmov	d1, r2, r3
 800269e:	ec4b ab10 	vmov	d0, sl, fp
	ang2 = atan2(tempS, tempC) - atan2(_leg_length[2]*sin(ang3), _leg_length[1]+_leg_length[2]*cos(ang3));
 80026a2:	4606      	mov	r6, r0
 80026a4:	460f      	mov	r7, r1
	ang1 = atan2(ry, -rz) - atan2(_leg_length[0], _leg_length[1]*cos(ang2)+_leg_length[2]*cos(ang2+ang3));
 80026a6:	f002 fa9f 	bl	8004be8 <atan2>
 80026aa:	ec55 4b10 	vmov	r4, r5, d0
 80026ae:	ec47 6b10 	vmov	d0, r6, r7
 80026b2:	f002 fa0d 	bl	8004ad0 <cos>
 80026b6:	4632      	mov	r2, r6
 80026b8:	463b      	mov	r3, r7
 80026ba:	ec51 0b18 	vmov	r0, r1, d8
 80026be:	ec59 8b10 	vmov	r8, r9, d0
 80026c2:	f7fd fda7 	bl	8000214 <__adddf3>
 80026c6:	ec41 0b10 	vmov	d0, r0, r1
 80026ca:	f002 fa01 	bl	8004ad0 <cos>
 80026ce:	a31a      	add	r3, pc, #104	; (adr r3, 8002738 <leg2_setPosition+0x250>)
 80026d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026d4:	4640      	mov	r0, r8
 80026d6:	4649      	mov	r1, r9
 80026d8:	ed8d 0b00 	vstr	d0, [sp]
 80026dc:	f7fd ff4c 	bl	8000578 <__aeabi_dmul>
 80026e0:	ed9d 0b00 	vldr	d0, [sp]
 80026e4:	4680      	mov	r8, r0
 80026e6:	4689      	mov	r9, r1
 80026e8:	a315      	add	r3, pc, #84	; (adr r3, 8002740 <leg2_setPosition+0x258>)
 80026ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ee:	ec51 0b10 	vmov	r0, r1, d0
 80026f2:	f7fd ff41 	bl	8000578 <__aeabi_dmul>
 80026f6:	4602      	mov	r2, r0
 80026f8:	460b      	mov	r3, r1
 80026fa:	4640      	mov	r0, r8
 80026fc:	4649      	mov	r1, r9
 80026fe:	f7fd fd89 	bl	8000214 <__adddf3>
 8002702:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8002758 <leg2_setPosition+0x270>
 8002706:	ec41 0b11 	vmov	d1, r0, r1
 800270a:	f002 fa6d 	bl	8004be8 <atan2>
 800270e:	4620      	mov	r0, r4
 8002710:	ec53 2b10 	vmov	r2, r3, d0
 8002714:	4629      	mov	r1, r5
 8002716:	f7fd fd7b 	bl	8000210 <__aeabi_dsub>

	leg2_setJointAngle_rad(ang1, ang2, ang3);
 800271a:	eeb0 2a48 	vmov.f32	s4, s16
 800271e:	eef0 2a68 	vmov.f32	s5, s17
 8002722:	ec47 6b11 	vmov	d1, r6, r7
 8002726:	ec41 0b10 	vmov	d0, r0, r1
}
 800272a:	b005      	add	sp, #20
 800272c:	ecbd 8b02 	vpop	{d8}
 8002730:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	leg2_setJointAngle_rad(ang1, ang2, ang3);
 8002734:	f7ff bc98 	b.w	8002068 <leg2_setJointAngle_rad>
 8002738:	8f5c28f6 	.word	0x8f5c28f6
 800273c:	404e75c2 	.word	0x404e75c2
 8002740:	51eb851f 	.word	0x51eb851f
 8002744:	40585eb8 	.word	0x40585eb8
 8002748:	4a2339c1 	.word	0x4a2339c1
 800274c:	40c7327b 	.word	0x40c7327b
 8002750:	63f14121 	.word	0x63f14121
 8002754:	40c9cecc 	.word	0x40c9cecc
 8002758:	66666666 	.word	0x66666666
 800275c:	404dc666 	.word	0x404dc666
 8002760:	3fe00000 	.word	0x3fe00000
 8002764:	3ff00000 	.word	0x3ff00000
 8002768:	ae147ae1 	.word	0xae147ae1
 800276c:	40abb467 	.word	0x40abb467
 8002770:	28240b78 	.word	0x28240b78
 8002774:	40acfe7e 	.word	0x40acfe7e
 8002778:	d9e83e43 	.word	0xd9e83e43
 800277c:	40c28f2c 	.word	0x40c28f2c

08002780 <leg3_setPosition>:

void leg3_setPosition (const double rx, const double ry, const double rz){
 8002780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002784:	ec57 6b10 	vmov	r6, r7, d0
 8002788:	b087      	sub	sp, #28
	double tempC, tempS, ang1, ang2, ang3;
	tempC = (rx*rx+ry*ry+rz*rz-_leg_length[0]*_leg_length[0]-_leg_length[1]*_leg_length[1]-_leg_length[2]*_leg_length[2])/2/_leg_length[1]/_leg_length[2];
 800278a:	ee10 2a10 	vmov	r2, s0
 800278e:	ee10 0a10 	vmov	r0, s0
 8002792:	463b      	mov	r3, r7
 8002794:	4639      	mov	r1, r7
void leg3_setPosition (const double rx, const double ry, const double rz){
 8002796:	ec55 4b12 	vmov	r4, r5, d2
 800279a:	ec5b ab11 	vmov	sl, fp, d1
	tempC = (rx*rx+ry*ry+rz*rz-_leg_length[0]*_leg_length[0]-_leg_length[1]*_leg_length[1]-_leg_length[2]*_leg_length[2])/2/_leg_length[1]/_leg_length[2];
 800279e:	f7fd feeb 	bl	8000578 <__aeabi_dmul>
 80027a2:	4652      	mov	r2, sl
 80027a4:	4680      	mov	r8, r0
 80027a6:	4689      	mov	r9, r1
 80027a8:	465b      	mov	r3, fp
 80027aa:	4650      	mov	r0, sl
 80027ac:	4659      	mov	r1, fp
 80027ae:	f7fd fee3 	bl	8000578 <__aeabi_dmul>
 80027b2:	4602      	mov	r2, r0
 80027b4:	460b      	mov	r3, r1
 80027b6:	4640      	mov	r0, r8
 80027b8:	4649      	mov	r1, r9
 80027ba:	f7fd fd2b 	bl	8000214 <__adddf3>
 80027be:	4622      	mov	r2, r4
 80027c0:	4680      	mov	r8, r0
 80027c2:	4689      	mov	r9, r1
 80027c4:	462b      	mov	r3, r5
 80027c6:	4620      	mov	r0, r4
 80027c8:	4629      	mov	r1, r5
 80027ca:	f7fd fed5 	bl	8000578 <__aeabi_dmul>
 80027ce:	4602      	mov	r2, r0
 80027d0:	460b      	mov	r3, r1
 80027d2:	4640      	mov	r0, r8
 80027d4:	4649      	mov	r1, r9
 80027d6:	f7fd fd1d 	bl	8000214 <__adddf3>
 80027da:	a385      	add	r3, pc, #532	; (adr r3, 80029f0 <leg3_setPosition+0x270>)
 80027dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027e0:	f7fd fd16 	bl	8000210 <__aeabi_dsub>
 80027e4:	a384      	add	r3, pc, #528	; (adr r3, 80029f8 <leg3_setPosition+0x278>)
 80027e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ea:	f7fd fd11 	bl	8000210 <__aeabi_dsub>
 80027ee:	a384      	add	r3, pc, #528	; (adr r3, 8002a00 <leg3_setPosition+0x280>)
 80027f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027f4:	f7fd fd0c 	bl	8000210 <__aeabi_dsub>
 80027f8:	2200      	movs	r2, #0
 80027fa:	4b7b      	ldr	r3, [pc, #492]	; (80029e8 <leg3_setPosition+0x268>)
 80027fc:	f7fd febc 	bl	8000578 <__aeabi_dmul>
 8002800:	a36f      	add	r3, pc, #444	; (adr r3, 80029c0 <leg3_setPosition+0x240>)
 8002802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002806:	f7fd ffe1 	bl	80007cc <__aeabi_ddiv>
 800280a:	a36f      	add	r3, pc, #444	; (adr r3, 80029c8 <leg3_setPosition+0x248>)
 800280c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002810:	f7fd ffdc 	bl	80007cc <__aeabi_ddiv>
	tempS = sqrt(fabs(1.0-tempC*tempC));		//+ <- -
 8002814:	4602      	mov	r2, r0
 8002816:	460b      	mov	r3, r1
	tempC = (rx*rx+ry*ry+rz*rz-_leg_length[0]*_leg_length[0]-_leg_length[1]*_leg_length[1]-_leg_length[2]*_leg_length[2])/2/_leg_length[1]/_leg_length[2];
 8002818:	4680      	mov	r8, r0
 800281a:	4689      	mov	r9, r1
	tempS = sqrt(fabs(1.0-tempC*tempC));		//+ <- -
 800281c:	f7fd feac 	bl	8000578 <__aeabi_dmul>
 8002820:	4602      	mov	r2, r0
 8002822:	460b      	mov	r3, r1
 8002824:	2000      	movs	r0, #0
 8002826:	4971      	ldr	r1, [pc, #452]	; (80029ec <leg3_setPosition+0x26c>)
 8002828:	f7fd fcf2 	bl	8000210 <__aeabi_dsub>
 800282c:	4602      	mov	r2, r0
 800282e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8002832:	ec43 2b10 	vmov	d0, r2, r3
 8002836:	f002 f9d9 	bl	8004bec <sqrt>
	ang3 = -atan2(tempS, tempC);
 800283a:	ec49 8b11 	vmov	d1, r8, r9
 800283e:	f002 f9d3 	bl	8004be8 <atan2>
 8002842:	ed8d 0b00 	vstr	d0, [sp]
 8002846:	9b01      	ldr	r3, [sp, #4]
 8002848:	f8dd 8000 	ldr.w	r8, [sp]
 800284c:	f103 4900 	add.w	r9, r3, #2147483648	; 0x80000000

	tempS = -rx/sqrt(fabs(_leg_length[1]*_leg_length[1]+_leg_length[2]*_leg_length[2]+2.0*_leg_length[1]*_leg_length[2]*cos(ang3)));
 8002850:	f002 f93e 	bl	8004ad0 <cos>
 8002854:	a35e      	add	r3, pc, #376	; (adr r3, 80029d0 <leg3_setPosition+0x250>)
 8002856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800285a:	ec51 0b10 	vmov	r0, r1, d0
 800285e:	ed8d 0b02 	vstr	d0, [sp, #8]
 8002862:	f7fd fe89 	bl	8000578 <__aeabi_dmul>
 8002866:	a35c      	add	r3, pc, #368	; (adr r3, 80029d8 <leg3_setPosition+0x258>)
 8002868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800286c:	f7fd fcd2 	bl	8000214 <__adddf3>
 8002870:	4602      	mov	r2, r0
 8002872:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8002876:	ec43 2b10 	vmov	d0, r2, r3
 800287a:	f002 f9b7 	bl	8004bec <sqrt>
 800287e:	4630      	mov	r0, r6
 8002880:	ec53 2b10 	vmov	r2, r3, d0
 8002884:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
 8002888:	f7fd ffa0 	bl	80007cc <__aeabi_ddiv>
	tempC = sqrt(fabs(1.0-tempS*tempS));		//+ <- -
 800288c:	4602      	mov	r2, r0
 800288e:	460b      	mov	r3, r1
	tempS = -rx/sqrt(fabs(_leg_length[1]*_leg_length[1]+_leg_length[2]*_leg_length[2]+2.0*_leg_length[1]*_leg_length[2]*cos(ang3)));
 8002890:	4606      	mov	r6, r0
 8002892:	460f      	mov	r7, r1
	tempC = sqrt(fabs(1.0-tempS*tempS));		//+ <- -
 8002894:	f7fd fe70 	bl	8000578 <__aeabi_dmul>
 8002898:	4602      	mov	r2, r0
 800289a:	460b      	mov	r3, r1
 800289c:	2000      	movs	r0, #0
 800289e:	4953      	ldr	r1, [pc, #332]	; (80029ec <leg3_setPosition+0x26c>)
 80028a0:	f7fd fcb6 	bl	8000210 <__aeabi_dsub>
 80028a4:	4602      	mov	r2, r0
 80028a6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80028aa:	ec43 2b10 	vmov	d0, r2, r3
 80028ae:	f002 f99d 	bl	8004bec <sqrt>
	ang2 = atan2(tempS, tempC) - atan2(_leg_length[2]*sin(ang3), _leg_length[1]+_leg_length[2]*cos(ang3));
 80028b2:	eeb0 1a40 	vmov.f32	s2, s0
 80028b6:	eef0 1a60 	vmov.f32	s3, s1
 80028ba:	ec47 6b10 	vmov	d0, r6, r7
 80028be:	f002 f993 	bl	8004be8 <atan2>
 80028c2:	ec57 6b10 	vmov	r6, r7, d0
 80028c6:	ec49 8b10 	vmov	d0, r8, r9
 80028ca:	f002 f945 	bl	8004b58 <sin>
 80028ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80028d2:	a33d      	add	r3, pc, #244	; (adr r3, 80029c8 <leg3_setPosition+0x248>)
 80028d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028d8:	ed8d 0b04 	vstr	d0, [sp, #16]
 80028dc:	f7fd fe4c 	bl	8000578 <__aeabi_dmul>
 80028e0:	a337      	add	r3, pc, #220	; (adr r3, 80029c0 <leg3_setPosition+0x240>)
 80028e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028e6:	f7fd fc95 	bl	8000214 <__adddf3>
 80028ea:	ed9d 0b04 	vldr	d0, [sp, #16]
 80028ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80028f2:	a335      	add	r3, pc, #212	; (adr r3, 80029c8 <leg3_setPosition+0x248>)
 80028f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028f8:	ec51 0b10 	vmov	r0, r1, d0
 80028fc:	f7fd fe3c 	bl	8000578 <__aeabi_dmul>
 8002900:	ed9d 1b02 	vldr	d1, [sp, #8]
 8002904:	ec41 0b10 	vmov	d0, r0, r1
 8002908:	f002 f96e 	bl	8004be8 <atan2>
 800290c:	4630      	mov	r0, r6
 800290e:	ec53 2b10 	vmov	r2, r3, d0
 8002912:	4639      	mov	r1, r7
 8002914:	f7fd fc7c 	bl	8000210 <__aeabi_dsub>

	ang1 = atan2(-ry, -rz) - atan2(_leg_length[0], _leg_length[1]*cos(ang2)+_leg_length[2]*cos(ang2+ang3));
 8002918:	4652      	mov	r2, sl
	ang2 = atan2(tempS, tempC) - atan2(_leg_length[2]*sin(ang3), _leg_length[1]+_leg_length[2]*cos(ang3));
 800291a:	4606      	mov	r6, r0
 800291c:	460f      	mov	r7, r1
	ang1 = atan2(-ry, -rz) - atan2(_leg_length[0], _leg_length[1]*cos(ang2)+_leg_length[2]*cos(ang2+ang3));
 800291e:	4620      	mov	r0, r4
 8002920:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8002924:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8002928:	ec41 0b11 	vmov	d1, r0, r1
 800292c:	ec43 2b10 	vmov	d0, r2, r3
 8002930:	f002 f95a 	bl	8004be8 <atan2>
 8002934:	ec5b ab10 	vmov	sl, fp, d0
 8002938:	ec47 6b10 	vmov	d0, r6, r7
 800293c:	f002 f8c8 	bl	8004ad0 <cos>
 8002940:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002944:	4630      	mov	r0, r6
 8002946:	4639      	mov	r1, r7
 8002948:	ec55 4b10 	vmov	r4, r5, d0
 800294c:	f7fd fc60 	bl	8000210 <__aeabi_dsub>
 8002950:	ec41 0b10 	vmov	d0, r0, r1
 8002954:	f002 f8bc 	bl	8004ad0 <cos>
 8002958:	a319      	add	r3, pc, #100	; (adr r3, 80029c0 <leg3_setPosition+0x240>)
 800295a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800295e:	4620      	mov	r0, r4
 8002960:	4629      	mov	r1, r5
 8002962:	ed8d 0b00 	vstr	d0, [sp]
 8002966:	f7fd fe07 	bl	8000578 <__aeabi_dmul>
 800296a:	ed9d 0b00 	vldr	d0, [sp]
 800296e:	4604      	mov	r4, r0
 8002970:	460d      	mov	r5, r1
 8002972:	a315      	add	r3, pc, #84	; (adr r3, 80029c8 <leg3_setPosition+0x248>)
 8002974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002978:	ec51 0b10 	vmov	r0, r1, d0
 800297c:	f7fd fdfc 	bl	8000578 <__aeabi_dmul>
 8002980:	4602      	mov	r2, r0
 8002982:	460b      	mov	r3, r1
 8002984:	4620      	mov	r0, r4
 8002986:	4629      	mov	r1, r5
 8002988:	f7fd fc44 	bl	8000214 <__adddf3>
 800298c:	ed9f 0b14 	vldr	d0, [pc, #80]	; 80029e0 <leg3_setPosition+0x260>
 8002990:	ec41 0b11 	vmov	d1, r0, r1
 8002994:	f002 f928 	bl	8004be8 <atan2>
 8002998:	4650      	mov	r0, sl
 800299a:	ec53 2b10 	vmov	r2, r3, d0
 800299e:	4659      	mov	r1, fp
 80029a0:	f7fd fc36 	bl	8000210 <__aeabi_dsub>

	leg3_setJointAngle_rad(ang1, ang2, ang3);
 80029a4:	ec49 8b12 	vmov	d2, r8, r9
 80029a8:	ec47 6b11 	vmov	d1, r6, r7
 80029ac:	ec41 0b10 	vmov	d0, r0, r1
}
 80029b0:	b007      	add	sp, #28
 80029b2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	leg3_setJointAngle_rad(ang1, ang2, ang3);
 80029b6:	f7ff bba7 	b.w	8002108 <leg3_setJointAngle_rad>
 80029ba:	bf00      	nop
 80029bc:	f3af 8000 	nop.w
 80029c0:	8f5c28f6 	.word	0x8f5c28f6
 80029c4:	404e75c2 	.word	0x404e75c2
 80029c8:	51eb851f 	.word	0x51eb851f
 80029cc:	40585eb8 	.word	0x40585eb8
 80029d0:	4a2339c1 	.word	0x4a2339c1
 80029d4:	40c7327b 	.word	0x40c7327b
 80029d8:	63f14121 	.word	0x63f14121
 80029dc:	40c9cecc 	.word	0x40c9cecc
 80029e0:	66666666 	.word	0x66666666
 80029e4:	404dc666 	.word	0x404dc666
 80029e8:	3fe00000 	.word	0x3fe00000
 80029ec:	3ff00000 	.word	0x3ff00000
 80029f0:	ae147ae1 	.word	0xae147ae1
 80029f4:	40abb467 	.word	0x40abb467
 80029f8:	28240b78 	.word	0x28240b78
 80029fc:	40acfe7e 	.word	0x40acfe7e
 8002a00:	d9e83e43 	.word	0xd9e83e43
 8002a04:	40c28f2c 	.word	0x40c28f2c

08002a08 <leg4_setPosition>:

void leg4_setPosition (const double rx, const double ry, const double rz){
 8002a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a0c:	ec57 6b10 	vmov	r6, r7, d0
 8002a10:	b087      	sub	sp, #28
	double tempC, tempS, ang1, ang2, ang3;
	tempC = (rx*rx+ry*ry+rz*rz-_leg_length[0]*_leg_length[0]-_leg_length[1]*_leg_length[1]-_leg_length[2]*_leg_length[2])/2/_leg_length[1]/_leg_length[2];
 8002a12:	ee10 2a10 	vmov	r2, s0
 8002a16:	ee10 0a10 	vmov	r0, s0
 8002a1a:	463b      	mov	r3, r7
 8002a1c:	4639      	mov	r1, r7
void leg4_setPosition (const double rx, const double ry, const double rz){
 8002a1e:	ec55 4b12 	vmov	r4, r5, d2
 8002a22:	ec5b ab11 	vmov	sl, fp, d1
	tempC = (rx*rx+ry*ry+rz*rz-_leg_length[0]*_leg_length[0]-_leg_length[1]*_leg_length[1]-_leg_length[2]*_leg_length[2])/2/_leg_length[1]/_leg_length[2];
 8002a26:	f7fd fda7 	bl	8000578 <__aeabi_dmul>
 8002a2a:	4652      	mov	r2, sl
 8002a2c:	4680      	mov	r8, r0
 8002a2e:	4689      	mov	r9, r1
 8002a30:	465b      	mov	r3, fp
 8002a32:	4650      	mov	r0, sl
 8002a34:	4659      	mov	r1, fp
 8002a36:	f7fd fd9f 	bl	8000578 <__aeabi_dmul>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	4640      	mov	r0, r8
 8002a40:	4649      	mov	r1, r9
 8002a42:	f7fd fbe7 	bl	8000214 <__adddf3>
 8002a46:	4622      	mov	r2, r4
 8002a48:	4680      	mov	r8, r0
 8002a4a:	4689      	mov	r9, r1
 8002a4c:	462b      	mov	r3, r5
 8002a4e:	4620      	mov	r0, r4
 8002a50:	4629      	mov	r1, r5
 8002a52:	f7fd fd91 	bl	8000578 <__aeabi_dmul>
 8002a56:	4602      	mov	r2, r0
 8002a58:	460b      	mov	r3, r1
 8002a5a:	4640      	mov	r0, r8
 8002a5c:	4649      	mov	r1, r9
 8002a5e:	f7fd fbd9 	bl	8000214 <__adddf3>
 8002a62:	a385      	add	r3, pc, #532	; (adr r3, 8002c78 <leg4_setPosition+0x270>)
 8002a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a68:	f7fd fbd2 	bl	8000210 <__aeabi_dsub>
 8002a6c:	a384      	add	r3, pc, #528	; (adr r3, 8002c80 <leg4_setPosition+0x278>)
 8002a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a72:	f7fd fbcd 	bl	8000210 <__aeabi_dsub>
 8002a76:	a384      	add	r3, pc, #528	; (adr r3, 8002c88 <leg4_setPosition+0x280>)
 8002a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a7c:	f7fd fbc8 	bl	8000210 <__aeabi_dsub>
 8002a80:	2200      	movs	r2, #0
 8002a82:	4b7b      	ldr	r3, [pc, #492]	; (8002c70 <leg4_setPosition+0x268>)
 8002a84:	f7fd fd78 	bl	8000578 <__aeabi_dmul>
 8002a88:	a36f      	add	r3, pc, #444	; (adr r3, 8002c48 <leg4_setPosition+0x240>)
 8002a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a8e:	f7fd fe9d 	bl	80007cc <__aeabi_ddiv>
 8002a92:	a36f      	add	r3, pc, #444	; (adr r3, 8002c50 <leg4_setPosition+0x248>)
 8002a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a98:	f7fd fe98 	bl	80007cc <__aeabi_ddiv>
	tempS = sqrt(fabs(1.0-tempC*tempC));		//+ <- -
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	460b      	mov	r3, r1
	tempC = (rx*rx+ry*ry+rz*rz-_leg_length[0]*_leg_length[0]-_leg_length[1]*_leg_length[1]-_leg_length[2]*_leg_length[2])/2/_leg_length[1]/_leg_length[2];
 8002aa0:	4680      	mov	r8, r0
 8002aa2:	4689      	mov	r9, r1
	tempS = sqrt(fabs(1.0-tempC*tempC));		//+ <- -
 8002aa4:	f7fd fd68 	bl	8000578 <__aeabi_dmul>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	460b      	mov	r3, r1
 8002aac:	2000      	movs	r0, #0
 8002aae:	4971      	ldr	r1, [pc, #452]	; (8002c74 <leg4_setPosition+0x26c>)
 8002ab0:	f7fd fbae 	bl	8000210 <__aeabi_dsub>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8002aba:	ec43 2b10 	vmov	d0, r2, r3
 8002abe:	f002 f895 	bl	8004bec <sqrt>
	ang3 = -atan2(tempS, tempC);
 8002ac2:	ec49 8b11 	vmov	d1, r8, r9
 8002ac6:	f002 f88f 	bl	8004be8 <atan2>
 8002aca:	ed8d 0b00 	vstr	d0, [sp]
 8002ace:	9b01      	ldr	r3, [sp, #4]
 8002ad0:	f8dd 8000 	ldr.w	r8, [sp]
 8002ad4:	f103 4900 	add.w	r9, r3, #2147483648	; 0x80000000

	tempS = -rx/sqrt(fabs(_leg_length[1]*_leg_length[1]+_leg_length[2]*_leg_length[2]+2.0*_leg_length[1]*_leg_length[2]*cos(ang3)));
 8002ad8:	f001 fffa 	bl	8004ad0 <cos>
 8002adc:	a35e      	add	r3, pc, #376	; (adr r3, 8002c58 <leg4_setPosition+0x250>)
 8002ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ae2:	ec51 0b10 	vmov	r0, r1, d0
 8002ae6:	ed8d 0b02 	vstr	d0, [sp, #8]
 8002aea:	f7fd fd45 	bl	8000578 <__aeabi_dmul>
 8002aee:	a35c      	add	r3, pc, #368	; (adr r3, 8002c60 <leg4_setPosition+0x258>)
 8002af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002af4:	f7fd fb8e 	bl	8000214 <__adddf3>
 8002af8:	4602      	mov	r2, r0
 8002afa:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8002afe:	ec43 2b10 	vmov	d0, r2, r3
 8002b02:	f002 f873 	bl	8004bec <sqrt>
 8002b06:	4630      	mov	r0, r6
 8002b08:	ec53 2b10 	vmov	r2, r3, d0
 8002b0c:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
 8002b10:	f7fd fe5c 	bl	80007cc <__aeabi_ddiv>
	tempC = sqrt(fabs(1.0-tempS*tempS));		//+ <- -
 8002b14:	4602      	mov	r2, r0
 8002b16:	460b      	mov	r3, r1
	tempS = -rx/sqrt(fabs(_leg_length[1]*_leg_length[1]+_leg_length[2]*_leg_length[2]+2.0*_leg_length[1]*_leg_length[2]*cos(ang3)));
 8002b18:	4606      	mov	r6, r0
 8002b1a:	460f      	mov	r7, r1
	tempC = sqrt(fabs(1.0-tempS*tempS));		//+ <- -
 8002b1c:	f7fd fd2c 	bl	8000578 <__aeabi_dmul>
 8002b20:	4602      	mov	r2, r0
 8002b22:	460b      	mov	r3, r1
 8002b24:	2000      	movs	r0, #0
 8002b26:	4953      	ldr	r1, [pc, #332]	; (8002c74 <leg4_setPosition+0x26c>)
 8002b28:	f7fd fb72 	bl	8000210 <__aeabi_dsub>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8002b32:	ec43 2b10 	vmov	d0, r2, r3
 8002b36:	f002 f859 	bl	8004bec <sqrt>
	ang2 = atan2(tempS, tempC) - atan2(_leg_length[2]*sin(ang3), _leg_length[1]+_leg_length[2]*cos(ang3));
 8002b3a:	eeb0 1a40 	vmov.f32	s2, s0
 8002b3e:	eef0 1a60 	vmov.f32	s3, s1
 8002b42:	ec47 6b10 	vmov	d0, r6, r7
 8002b46:	f002 f84f 	bl	8004be8 <atan2>
 8002b4a:	ec57 6b10 	vmov	r6, r7, d0
 8002b4e:	ec49 8b10 	vmov	d0, r8, r9
 8002b52:	f002 f801 	bl	8004b58 <sin>
 8002b56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002b5a:	a33d      	add	r3, pc, #244	; (adr r3, 8002c50 <leg4_setPosition+0x248>)
 8002b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b60:	ed8d 0b04 	vstr	d0, [sp, #16]
 8002b64:	f7fd fd08 	bl	8000578 <__aeabi_dmul>
 8002b68:	a337      	add	r3, pc, #220	; (adr r3, 8002c48 <leg4_setPosition+0x240>)
 8002b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b6e:	f7fd fb51 	bl	8000214 <__adddf3>
 8002b72:	ed9d 0b04 	vldr	d0, [sp, #16]
 8002b76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002b7a:	a335      	add	r3, pc, #212	; (adr r3, 8002c50 <leg4_setPosition+0x248>)
 8002b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b80:	ec51 0b10 	vmov	r0, r1, d0
 8002b84:	f7fd fcf8 	bl	8000578 <__aeabi_dmul>
 8002b88:	ed9d 1b02 	vldr	d1, [sp, #8]
 8002b8c:	ec41 0b10 	vmov	d0, r0, r1
 8002b90:	f002 f82a 	bl	8004be8 <atan2>
 8002b94:	4630      	mov	r0, r6
 8002b96:	ec53 2b10 	vmov	r2, r3, d0
 8002b9a:	4639      	mov	r1, r7
 8002b9c:	f7fd fb38 	bl	8000210 <__aeabi_dsub>

	ang1 = atan2(-ry, -rz) - atan2(_leg_length[0], _leg_length[1]*cos(ang2)+_leg_length[2]*cos(ang2+ang3));
 8002ba0:	4652      	mov	r2, sl
	ang2 = atan2(tempS, tempC) - atan2(_leg_length[2]*sin(ang3), _leg_length[1]+_leg_length[2]*cos(ang3));
 8002ba2:	4606      	mov	r6, r0
 8002ba4:	460f      	mov	r7, r1
	ang1 = atan2(-ry, -rz) - atan2(_leg_length[0], _leg_length[1]*cos(ang2)+_leg_length[2]*cos(ang2+ang3));
 8002ba6:	4620      	mov	r0, r4
 8002ba8:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8002bac:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8002bb0:	ec41 0b11 	vmov	d1, r0, r1
 8002bb4:	ec43 2b10 	vmov	d0, r2, r3
 8002bb8:	f002 f816 	bl	8004be8 <atan2>
 8002bbc:	ec5b ab10 	vmov	sl, fp, d0
 8002bc0:	ec47 6b10 	vmov	d0, r6, r7
 8002bc4:	f001 ff84 	bl	8004ad0 <cos>
 8002bc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002bcc:	4630      	mov	r0, r6
 8002bce:	4639      	mov	r1, r7
 8002bd0:	ec55 4b10 	vmov	r4, r5, d0
 8002bd4:	f7fd fb1c 	bl	8000210 <__aeabi_dsub>
 8002bd8:	ec41 0b10 	vmov	d0, r0, r1
 8002bdc:	f001 ff78 	bl	8004ad0 <cos>
 8002be0:	a319      	add	r3, pc, #100	; (adr r3, 8002c48 <leg4_setPosition+0x240>)
 8002be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002be6:	4620      	mov	r0, r4
 8002be8:	4629      	mov	r1, r5
 8002bea:	ed8d 0b00 	vstr	d0, [sp]
 8002bee:	f7fd fcc3 	bl	8000578 <__aeabi_dmul>
 8002bf2:	ed9d 0b00 	vldr	d0, [sp]
 8002bf6:	4604      	mov	r4, r0
 8002bf8:	460d      	mov	r5, r1
 8002bfa:	a315      	add	r3, pc, #84	; (adr r3, 8002c50 <leg4_setPosition+0x248>)
 8002bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c00:	ec51 0b10 	vmov	r0, r1, d0
 8002c04:	f7fd fcb8 	bl	8000578 <__aeabi_dmul>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	460b      	mov	r3, r1
 8002c0c:	4620      	mov	r0, r4
 8002c0e:	4629      	mov	r1, r5
 8002c10:	f7fd fb00 	bl	8000214 <__adddf3>
 8002c14:	ed9f 0b14 	vldr	d0, [pc, #80]	; 8002c68 <leg4_setPosition+0x260>
 8002c18:	ec41 0b11 	vmov	d1, r0, r1
 8002c1c:	f001 ffe4 	bl	8004be8 <atan2>
 8002c20:	4650      	mov	r0, sl
 8002c22:	ec53 2b10 	vmov	r2, r3, d0
 8002c26:	4659      	mov	r1, fp
 8002c28:	f7fd faf2 	bl	8000210 <__aeabi_dsub>

	leg4_setJointAngle_rad(ang1, ang2, ang3);
 8002c2c:	ec49 8b12 	vmov	d2, r8, r9
 8002c30:	ec47 6b11 	vmov	d1, r6, r7
 8002c34:	ec41 0b10 	vmov	d0, r0, r1
}
 8002c38:	b007      	add	sp, #28
 8002c3a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	leg4_setJointAngle_rad(ang1, ang2, ang3);
 8002c3e:	f7ff bab7 	b.w	80021b0 <leg4_setJointAngle_rad>
 8002c42:	bf00      	nop
 8002c44:	f3af 8000 	nop.w
 8002c48:	8f5c28f6 	.word	0x8f5c28f6
 8002c4c:	404e75c2 	.word	0x404e75c2
 8002c50:	51eb851f 	.word	0x51eb851f
 8002c54:	40585eb8 	.word	0x40585eb8
 8002c58:	4a2339c1 	.word	0x4a2339c1
 8002c5c:	40c7327b 	.word	0x40c7327b
 8002c60:	63f14121 	.word	0x63f14121
 8002c64:	40c9cecc 	.word	0x40c9cecc
 8002c68:	66666666 	.word	0x66666666
 8002c6c:	404dc666 	.word	0x404dc666
 8002c70:	3fe00000 	.word	0x3fe00000
 8002c74:	3ff00000 	.word	0x3ff00000
 8002c78:	ae147ae1 	.word	0xae147ae1
 8002c7c:	40abb467 	.word	0x40abb467
 8002c80:	28240b78 	.word	0x28240b78
 8002c84:	40acfe7e 	.word	0x40acfe7e
 8002c88:	d9e83e43 	.word	0xd9e83e43
 8002c8c:	40c28f2c 	.word	0x40c28f2c

08002c90 <getVal_cubicCurve>:
 *  Created on: 2018/12/27
 *      Author: Sano
 */
#include "cubicCurve.h"

double getVal_cubicCurve (cubicCoes coes, double u){
 8002c90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c92:	ec55 4b14 	vmov	r4, r5, d4
 8002c96:	b08f      	sub	sp, #60	; 0x3c
	return coes.coe1*u*u*u + coes.coe2*u*u + coes.coe3*u + coes.coe4;
 8002c98:	ec53 2b10 	vmov	r2, r3, d0
 8002c9c:	ee14 0a10 	vmov	r0, s8
 8002ca0:	4629      	mov	r1, r5
double getVal_cubicCurve (cubicCoes coes, double u){
 8002ca2:	ed8d 3b00 	vstr	d3, [sp]
 8002ca6:	ed8d 2b02 	vstr	d2, [sp, #8]
 8002caa:	ed8d 1b04 	vstr	d1, [sp, #16]
	return coes.coe1*u*u*u + coes.coe2*u*u + coes.coe3*u + coes.coe4;
 8002cae:	f7fd fc63 	bl	8000578 <__aeabi_dmul>
 8002cb2:	4622      	mov	r2, r4
 8002cb4:	462b      	mov	r3, r5
 8002cb6:	f7fd fc5f 	bl	8000578 <__aeabi_dmul>
 8002cba:	4622      	mov	r2, r4
 8002cbc:	462b      	mov	r3, r5
 8002cbe:	f7fd fc5b 	bl	8000578 <__aeabi_dmul>
 8002cc2:	ed9d 1b04 	vldr	d1, [sp, #16]
 8002cc6:	4606      	mov	r6, r0
 8002cc8:	ec53 2b11 	vmov	r2, r3, d1
 8002ccc:	460f      	mov	r7, r1
 8002cce:	4620      	mov	r0, r4
 8002cd0:	4629      	mov	r1, r5
 8002cd2:	f7fd fc51 	bl	8000578 <__aeabi_dmul>
 8002cd6:	4622      	mov	r2, r4
 8002cd8:	462b      	mov	r3, r5
 8002cda:	f7fd fc4d 	bl	8000578 <__aeabi_dmul>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	4630      	mov	r0, r6
 8002ce4:	4639      	mov	r1, r7
 8002ce6:	f7fd fa95 	bl	8000214 <__adddf3>
 8002cea:	ed9d 2b02 	vldr	d2, [sp, #8]
 8002cee:	4606      	mov	r6, r0
 8002cf0:	ec53 2b12 	vmov	r2, r3, d2
 8002cf4:	460f      	mov	r7, r1
 8002cf6:	4620      	mov	r0, r4
 8002cf8:	4629      	mov	r1, r5
 8002cfa:	f7fd fc3d 	bl	8000578 <__aeabi_dmul>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	460b      	mov	r3, r1
 8002d02:	4630      	mov	r0, r6
 8002d04:	4639      	mov	r1, r7
 8002d06:	f7fd fa85 	bl	8000214 <__adddf3>
 8002d0a:	ed9d 3b00 	vldr	d3, [sp]
 8002d0e:	ec53 2b13 	vmov	r2, r3, d3
 8002d12:	f7fd fa7f 	bl	8000214 <__adddf3>
}
 8002d16:	ec41 0b10 	vmov	d0, r0, r1
 8002d1a:	b00f      	add	sp, #60	; 0x3c
 8002d1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002d20 <hermite>:

cubicCoes hermite (double p0, double v0, double p1, double v1){
 8002d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d24:	ec5b ab10 	vmov	sl, fp, d0
 8002d28:	ec55 4b11 	vmov	r4, r5, d1
 8002d2c:	b095      	sub	sp, #84	; 0x54
	cubicCoes coes;

	coes.coe1 = 2.0*p0 + v0 - 2.0*p1 + v1;
 8002d2e:	ee10 2a10 	vmov	r2, s0
 8002d32:	ee10 0a10 	vmov	r0, s0
 8002d36:	465b      	mov	r3, fp
 8002d38:	4659      	mov	r1, fp
cubicCoes hermite (double p0, double v0, double p1, double v1){
 8002d3a:	ec57 6b12 	vmov	r6, r7, d2
 8002d3e:	ed8d 3b00 	vstr	d3, [sp]
	coes.coe1 = 2.0*p0 + v0 - 2.0*p1 + v1;
 8002d42:	f7fd fa67 	bl	8000214 <__adddf3>
 8002d46:	4622      	mov	r2, r4
 8002d48:	462b      	mov	r3, r5
 8002d4a:	f7fd fa63 	bl	8000214 <__adddf3>
 8002d4e:	4632      	mov	r2, r6
 8002d50:	4680      	mov	r8, r0
 8002d52:	4689      	mov	r9, r1
 8002d54:	463b      	mov	r3, r7
 8002d56:	4630      	mov	r0, r6
 8002d58:	4639      	mov	r1, r7
 8002d5a:	f7fd fa5b 	bl	8000214 <__adddf3>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	460b      	mov	r3, r1
 8002d62:	4640      	mov	r0, r8
 8002d64:	4649      	mov	r1, r9
 8002d66:	f7fd fa53 	bl	8000210 <__aeabi_dsub>
 8002d6a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002d6e:	f7fd fa51 	bl	8000214 <__adddf3>
	coes.coe2 = -3.0*p0 - 2.0*v0 + 3.0*p1 - v1;
 8002d72:	2200      	movs	r2, #0
	coes.coe1 = 2.0*p0 + v0 - 2.0*p1 + v1;
 8002d74:	e9cd 0102 	strd	r0, r1, [sp, #8]
	coes.coe2 = -3.0*p0 - 2.0*v0 + 3.0*p1 - v1;
 8002d78:	4b17      	ldr	r3, [pc, #92]	; (8002dd8 <hermite+0xb8>)
 8002d7a:	4650      	mov	r0, sl
 8002d7c:	4659      	mov	r1, fp
 8002d7e:	f7fd fbfb 	bl	8000578 <__aeabi_dmul>
 8002d82:	4622      	mov	r2, r4
 8002d84:	4680      	mov	r8, r0
 8002d86:	4689      	mov	r9, r1
 8002d88:	462b      	mov	r3, r5
 8002d8a:	4620      	mov	r0, r4
 8002d8c:	4629      	mov	r1, r5
 8002d8e:	f7fd fa41 	bl	8000214 <__adddf3>
 8002d92:	4602      	mov	r2, r0
 8002d94:	460b      	mov	r3, r1
 8002d96:	4640      	mov	r0, r8
 8002d98:	4649      	mov	r1, r9
 8002d9a:	f7fd fa39 	bl	8000210 <__aeabi_dsub>
 8002d9e:	2200      	movs	r2, #0
 8002da0:	4680      	mov	r8, r0
 8002da2:	4689      	mov	r9, r1
 8002da4:	4b0d      	ldr	r3, [pc, #52]	; (8002ddc <hermite+0xbc>)
 8002da6:	4630      	mov	r0, r6
 8002da8:	4639      	mov	r1, r7
 8002daa:	f7fd fbe5 	bl	8000578 <__aeabi_dmul>
 8002dae:	4602      	mov	r2, r0
 8002db0:	460b      	mov	r3, r1
 8002db2:	4640      	mov	r0, r8
 8002db4:	4649      	mov	r1, r9
 8002db6:	f7fd fa2d 	bl	8000214 <__adddf3>
 8002dba:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002dbe:	f7fd fa27 	bl	8000210 <__aeabi_dsub>
	coes.coe3 = v0;
	coes.coe4 = p0;

	return coes;
}
 8002dc2:	ed9d 0b02 	vldr	d0, [sp, #8]
 8002dc6:	ec41 0b11 	vmov	d1, r0, r1
 8002dca:	ec45 4b12 	vmov	d2, r4, r5
 8002dce:	ec4b ab13 	vmov	d3, sl, fp
 8002dd2:	b015      	add	sp, #84	; 0x54
 8002dd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002dd8:	c0080000 	.word	0xc0080000
 8002ddc:	40080000 	.word	0x40080000

08002de0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002de0:	b530      	push	{r4, r5, lr}
 8002de2:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002de4:	2200      	movs	r2, #0
 8002de6:	4b27      	ldr	r3, [pc, #156]	; (8002e84 <SystemClock_Config+0xa4>)
 8002de8:	9200      	str	r2, [sp, #0]
 8002dea:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002dec:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8002df0:	6419      	str	r1, [r3, #64]	; 0x40
 8002df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002df4:	4924      	ldr	r1, [pc, #144]	; (8002e88 <SystemClock_Config+0xa8>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8002df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dfa:	9300      	str	r3, [sp, #0]
 8002dfc:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002dfe:	9201      	str	r2, [sp, #4]
 8002e00:	680b      	ldr	r3, [r1, #0]
 8002e02:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002e06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e0a:	600b      	str	r3, [r1, #0]
 8002e0c:	680b      	ldr	r3, [r1, #0]
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002e0e:	920e      	str	r2, [sp, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002e10:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002e14:	9301      	str	r3, [sp, #4]
 8002e16:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8002e1c:	2310      	movs	r3, #16
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002e1e:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8002e20:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002e22:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002e24:	2504      	movs	r5, #4
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002e26:	f44f 73a8 	mov.w	r3, #336	; 0x150
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e2a:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002e2c:	9407      	str	r4, [sp, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e2e:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002e30:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002e32:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002e34:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002e36:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e38:	f7fe fad0 	bl	80013dc <HAL_RCC_OscConfig>
 8002e3c:	b100      	cbz	r0, 8002e40 <SystemClock_Config+0x60>
 8002e3e:	e7fe      	b.n	8002e3e <SystemClock_Config+0x5e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e40:	230f      	movs	r3, #15
 8002e42:	9302      	str	r3, [sp, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e44:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002e46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002e4a:	9006      	str	r0, [sp, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002e4c:	4621      	mov	r1, r4
 8002e4e:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e50:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002e52:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002e54:	f7fe f9ba 	bl	80011cc <HAL_RCC_ClockConfig>
 8002e58:	4604      	mov	r4, r0
 8002e5a:	b100      	cbz	r0, 8002e5e <SystemClock_Config+0x7e>
 8002e5c:	e7fe      	b.n	8002e5c <SystemClock_Config+0x7c>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002e5e:	f7fe fa4f 	bl	8001300 <HAL_RCC_GetHCLKFreq>
 8002e62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e66:	fbb0 f0f3 	udiv	r0, r0, r3
 8002e6a:	f7fe f8a7 	bl	8000fbc <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002e6e:	4628      	mov	r0, r5
 8002e70:	f7fe f8ba 	bl	8000fe8 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002e74:	4622      	mov	r2, r4
 8002e76:	4621      	mov	r1, r4
 8002e78:	f04f 30ff 	mov.w	r0, #4294967295
 8002e7c:	f7fe f85e 	bl	8000f3c <HAL_NVIC_SetPriority>
}
 8002e80:	b015      	add	sp, #84	; 0x54
 8002e82:	bd30      	pop	{r4, r5, pc}
 8002e84:	40023800 	.word	0x40023800
 8002e88:	40007000 	.word	0x40007000

08002e8c <main>:
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b094      	sub	sp, #80	; 0x50
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e90:	2400      	movs	r4, #0
  HAL_Init();
 8002e92:	f7fe f815 	bl	8000ec0 <HAL_Init>
  SystemClock_Config();
 8002e96:	f7ff ffa3 	bl	8002de0 <SystemClock_Config>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e9a:	4b96      	ldr	r3, [pc, #600]	; (80030f4 <main+0x268>)
 8002e9c:	9400      	str	r4, [sp, #0]
 8002e9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8002ea0:	4895      	ldr	r0, [pc, #596]	; (80030f8 <main+0x26c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ea2:	f042 0204 	orr.w	r2, r2, #4
 8002ea6:	631a      	str	r2, [r3, #48]	; 0x30
 8002ea8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002eaa:	f002 0204 	and.w	r2, r2, #4
 8002eae:	9200      	str	r2, [sp, #0]
 8002eb0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002eb2:	9401      	str	r4, [sp, #4]
 8002eb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002eb6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002eba:	631a      	str	r2, [r3, #48]	; 0x30
 8002ebc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ebe:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8002ec2:	9201      	str	r2, [sp, #4]
 8002ec4:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ec6:	9402      	str	r4, [sp, #8]
 8002ec8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002eca:	f042 0201 	orr.w	r2, r2, #1
 8002ece:	631a      	str	r2, [r3, #48]	; 0x30
 8002ed0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ed2:	f002 0201 	and.w	r2, r2, #1
 8002ed6:	9202      	str	r2, [sp, #8]
 8002ed8:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002eda:	9403      	str	r4, [sp, #12]
 8002edc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ede:	f042 0202 	orr.w	r2, r2, #2
 8002ee2:	631a      	str	r2, [r3, #48]	; 0x30
 8002ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee6:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8002eea:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002eec:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8002eee:	f44f 6180 	mov.w	r1, #1024	; 0x400

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ef2:	2501      	movs	r5, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ef4:	9b03      	ldr	r3, [sp, #12]
  GPIO_InitStruct.Pin = B1_Pin;
 8002ef6:	f44f 5600 	mov.w	r6, #8192	; 0x2000
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8002efa:	f7fe f961 	bl	80011c0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002efe:	4b7f      	ldr	r3, [pc, #508]	; (80030fc <main+0x270>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002f00:	487d      	ldr	r0, [pc, #500]	; (80030f8 <main+0x26c>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002f02:	930e      	str	r3, [sp, #56]	; 0x38
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002f04:	a90d      	add	r1, sp, #52	; 0x34
  GPIO_InitStruct.Pin = B1_Pin;
 8002f06:	960d      	str	r6, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f08:	950f      	str	r5, [sp, #60]	; 0x3c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002f0a:	f7fe f87f 	bl	800100c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8002f0e:	230d      	movs	r3, #13
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f10:	a90d      	add	r1, sp, #52	; 0x34
 8002f12:	4879      	ldr	r0, [pc, #484]	; (80030f8 <main+0x26c>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8002f14:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f16:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f18:	950f      	str	r5, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f1a:	f7fe f877 	bl	800100c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002f1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f22:	a90d      	add	r1, sp, #52	; 0x34
 8002f24:	4874      	ldr	r0, [pc, #464]	; (80030f8 <main+0x26c>)
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002f26:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f28:	950e      	str	r5, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f2a:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f2c:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f2e:	f7fe f86d 	bl	800100c <HAL_GPIO_Init>
  huart2.Instance = USART2;
 8002f32:	4873      	ldr	r0, [pc, #460]	; (8003100 <main+0x274>)
  huart2.Init.BaudRate = 115200;
 8002f34:	4973      	ldr	r1, [pc, #460]	; (8003104 <main+0x278>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002f36:	6084      	str	r4, [r0, #8]
  huart2.Init.BaudRate = 115200;
 8002f38:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002f3c:	270c      	movs	r7, #12
  huart2.Init.BaudRate = 115200;
 8002f3e:	e880 000a 	stmia.w	r0, {r1, r3}
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002f42:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002f44:	6104      	str	r4, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002f46:	6147      	str	r7, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f48:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f4a:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f4c:	f7ff f808 	bl	8001f60 <HAL_UART_Init>
 8002f50:	b100      	cbz	r0, 8002f54 <main+0xc8>
 8002f52:	e7fe      	b.n	8002f52 <main+0xc6>
  hspi1.Instance = SPI1;
 8002f54:	4b6c      	ldr	r3, [pc, #432]	; (8003108 <main+0x27c>)
 8002f56:	4a6d      	ldr	r2, [pc, #436]	; (800310c <main+0x280>)
 8002f58:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8002f5a:	6058      	str	r0, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002f5c:	6098      	str	r0, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002f5e:	60d8      	str	r0, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f60:	6118      	str	r0, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002f62:	6158      	str	r0, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8002f64:	6198      	str	r0, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002f66:	6218      	str	r0, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002f68:	6258      	str	r0, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f6a:	6298      	str	r0, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002f6c:	220a      	movs	r2, #10
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002f6e:	4618      	mov	r0, r3
  hspi1.Init.CRCPolynomial = 10;
 8002f70:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002f72:	f7fe fbcd 	bl	8001710 <HAL_SPI_Init>
 8002f76:	b100      	cbz	r0, 8002f7a <main+0xee>
 8002f78:	e7fe      	b.n	8002f78 <main+0xec>
  htim1.Instance = TIM1;
 8002f7a:	4c65      	ldr	r4, [pc, #404]	; (8003110 <main+0x284>)
  htim1.Init.Prescaler = 168;
 8002f7c:	4b65      	ldr	r3, [pc, #404]	; (8003114 <main+0x288>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f7e:	60a0      	str	r0, [r4, #8]
  htim1.Init.Prescaler = 168;
 8002f80:	f04f 09a8 	mov.w	r9, #168	; 0xa8
  htim1.Init.Period = 9999;
 8002f84:	f242 780f 	movw	r8, #9999	; 0x270f
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f88:	6120      	str	r0, [r4, #16]
  htim1.Init.RepetitionCounter = 0;
 8002f8a:	6160      	str	r0, [r4, #20]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002f8c:	4620      	mov	r0, r4
  htim1.Init.Prescaler = 168;
 8002f8e:	e884 0208 	stmia.w	r4, {r3, r9}
  htim1.Init.Period = 9999;
 8002f92:	f8c4 800c 	str.w	r8, [r4, #12]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002f96:	f7fe fdad 	bl	8001af4 <HAL_TIM_PWM_Init>
 8002f9a:	b100      	cbz	r0, 8002f9e <main+0x112>
 8002f9c:	e7fe      	b.n	8002f9c <main+0x110>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f9e:	9004      	str	r0, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fa0:	9005      	str	r0, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002fa2:	a904      	add	r1, sp, #16
 8002fa4:	4620      	mov	r0, r4
 8002fa6:	f7fe fe77 	bl	8001c98 <HAL_TIMEx_MasterConfigSynchronization>
 8002faa:	b100      	cbz	r0, 8002fae <main+0x122>
 8002fac:	e7fe      	b.n	8002fac <main+0x120>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002fae:	2560      	movs	r5, #96	; 0x60
  sConfigOC.Pulse = 0;
 8002fb0:	9007      	str	r0, [sp, #28]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002fb2:	9008      	str	r0, [sp, #32]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002fb4:	9009      	str	r0, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002fb6:	900a      	str	r0, [sp, #40]	; 0x28
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002fb8:	900b      	str	r0, [sp, #44]	; 0x2c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002fba:	900c      	str	r0, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002fbc:	2204      	movs	r2, #4
 8002fbe:	a906      	add	r1, sp, #24
 8002fc0:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002fc2:	9506      	str	r5, [sp, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002fc4:	f7fe fde0 	bl	8001b88 <HAL_TIM_PWM_ConfigChannel>
 8002fc8:	b100      	cbz	r0, 8002fcc <main+0x140>
 8002fca:	e7fe      	b.n	8002fca <main+0x13e>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002fcc:	463a      	mov	r2, r7
 8002fce:	a906      	add	r1, sp, #24
 8002fd0:	4620      	mov	r0, r4
 8002fd2:	f7fe fdd9 	bl	8001b88 <HAL_TIM_PWM_ConfigChannel>
 8002fd6:	b100      	cbz	r0, 8002fda <main+0x14e>
 8002fd8:	e7fe      	b.n	8002fd8 <main+0x14c>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002fda:	900d      	str	r0, [sp, #52]	; 0x34
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002fdc:	900e      	str	r0, [sp, #56]	; 0x38
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002fde:	900f      	str	r0, [sp, #60]	; 0x3c
  sBreakDeadTimeConfig.DeadTime = 0;
 8002fe0:	9010      	str	r0, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002fe2:	9011      	str	r0, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002fe4:	9013      	str	r0, [sp, #76]	; 0x4c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002fe6:	a90d      	add	r1, sp, #52	; 0x34
 8002fe8:	4620      	mov	r0, r4
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002fea:	9612      	str	r6, [sp, #72]	; 0x48
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002fec:	f7fe fe76 	bl	8001cdc <HAL_TIMEx_ConfigBreakDeadTime>
 8002ff0:	4606      	mov	r6, r0
 8002ff2:	b100      	cbz	r0, 8002ff6 <main+0x16a>
 8002ff4:	e7fe      	b.n	8002ff4 <main+0x168>
  HAL_TIM_MspPostInit(&htim1);
 8002ff6:	4620      	mov	r0, r4
  htim2.Instance = TIM2;
 8002ff8:	4c47      	ldr	r4, [pc, #284]	; (8003118 <main+0x28c>)
  HAL_TIM_MspPostInit(&htim1);
 8002ffa:	f000 f9ed 	bl	80033d8 <HAL_TIM_MspPostInit>
  htim2.Instance = TIM2;
 8002ffe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003002:	4620      	mov	r0, r4
  htim2.Init.Prescaler = 168;
 8003004:	e884 0208 	stmia.w	r4, {r3, r9}
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003008:	60a6      	str	r6, [r4, #8]
  htim2.Init.Period = 9999;
 800300a:	f8c4 800c 	str.w	r8, [r4, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800300e:	6126      	str	r6, [r4, #16]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003010:	f7fe fd70 	bl	8001af4 <HAL_TIM_PWM_Init>
 8003014:	b100      	cbz	r0, 8003018 <main+0x18c>
 8003016:	e7fe      	b.n	8003016 <main+0x18a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003018:	9006      	str	r0, [sp, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800301a:	9007      	str	r0, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800301c:	a906      	add	r1, sp, #24
 800301e:	4620      	mov	r0, r4
 8003020:	f7fe fe3a 	bl	8001c98 <HAL_TIMEx_MasterConfigSynchronization>
 8003024:	4602      	mov	r2, r0
 8003026:	b100      	cbz	r0, 800302a <main+0x19e>
 8003028:	e7fe      	b.n	8003028 <main+0x19c>
  sConfigOC.Pulse = 0;
 800302a:	900e      	str	r0, [sp, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800302c:	900f      	str	r0, [sp, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800302e:	9011      	str	r0, [sp, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003030:	a90d      	add	r1, sp, #52	; 0x34
 8003032:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003034:	950d      	str	r5, [sp, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003036:	f7fe fda7 	bl	8001b88 <HAL_TIM_PWM_ConfigChannel>
 800303a:	b100      	cbz	r0, 800303e <main+0x1b2>
 800303c:	e7fe      	b.n	800303c <main+0x1b0>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800303e:	2204      	movs	r2, #4
 8003040:	a90d      	add	r1, sp, #52	; 0x34
 8003042:	4835      	ldr	r0, [pc, #212]	; (8003118 <main+0x28c>)
 8003044:	f7fe fda0 	bl	8001b88 <HAL_TIM_PWM_ConfigChannel>
 8003048:	b100      	cbz	r0, 800304c <main+0x1c0>
 800304a:	e7fe      	b.n	800304a <main+0x1be>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800304c:	220c      	movs	r2, #12
 800304e:	a90d      	add	r1, sp, #52	; 0x34
 8003050:	4831      	ldr	r0, [pc, #196]	; (8003118 <main+0x28c>)
 8003052:	f7fe fd99 	bl	8001b88 <HAL_TIM_PWM_ConfigChannel>
 8003056:	4605      	mov	r5, r0
 8003058:	b100      	cbz	r0, 800305c <main+0x1d0>
 800305a:	e7fe      	b.n	800305a <main+0x1ce>
  htim3.Instance = TIM3;
 800305c:	4c2f      	ldr	r4, [pc, #188]	; (800311c <main+0x290>)
  HAL_TIM_MspPostInit(&htim2);
 800305e:	482e      	ldr	r0, [pc, #184]	; (8003118 <main+0x28c>)
 8003060:	f000 f9ba 	bl	80033d8 <HAL_TIM_MspPostInit>
  htim3.Init.Prescaler = 168;
 8003064:	4b2e      	ldr	r3, [pc, #184]	; (8003120 <main+0x294>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003066:	60a5      	str	r5, [r4, #8]
  htim3.Init.Prescaler = 168;
 8003068:	27a8      	movs	r7, #168	; 0xa8
  htim3.Init.Period = 9999;
 800306a:	f242 760f 	movw	r6, #9999	; 0x270f
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800306e:	4620      	mov	r0, r4
  htim3.Init.Prescaler = 168;
 8003070:	e884 0088 	stmia.w	r4, {r3, r7}
  htim3.Init.Period = 9999;
 8003074:	60e6      	str	r6, [r4, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003076:	6125      	str	r5, [r4, #16]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003078:	f7fe fd3c 	bl	8001af4 <HAL_TIM_PWM_Init>
 800307c:	b100      	cbz	r0, 8003080 <main+0x1f4>
 800307e:	e7fe      	b.n	800307e <main+0x1f2>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003080:	9006      	str	r0, [sp, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003082:	9007      	str	r0, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003084:	a906      	add	r1, sp, #24
 8003086:	4620      	mov	r0, r4
 8003088:	f7fe fe06 	bl	8001c98 <HAL_TIMEx_MasterConfigSynchronization>
 800308c:	4602      	mov	r2, r0
 800308e:	b100      	cbz	r0, 8003092 <main+0x206>
 8003090:	e7fe      	b.n	8003090 <main+0x204>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003092:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = 0;
 8003094:	900e      	str	r0, [sp, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003096:	900f      	str	r0, [sp, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003098:	9011      	str	r0, [sp, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800309a:	a90d      	add	r1, sp, #52	; 0x34
 800309c:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800309e:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80030a0:	f7fe fd72 	bl	8001b88 <HAL_TIM_PWM_ConfigChannel>
 80030a4:	b100      	cbz	r0, 80030a8 <main+0x21c>
 80030a6:	e7fe      	b.n	80030a6 <main+0x21a>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80030a8:	2204      	movs	r2, #4
 80030aa:	a90d      	add	r1, sp, #52	; 0x34
 80030ac:	4620      	mov	r0, r4
 80030ae:	f7fe fd6b 	bl	8001b88 <HAL_TIM_PWM_ConfigChannel>
 80030b2:	b100      	cbz	r0, 80030b6 <main+0x22a>
 80030b4:	e7fe      	b.n	80030b4 <main+0x228>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80030b6:	2208      	movs	r2, #8
 80030b8:	a90d      	add	r1, sp, #52	; 0x34
 80030ba:	4620      	mov	r0, r4
 80030bc:	f7fe fd64 	bl	8001b88 <HAL_TIM_PWM_ConfigChannel>
 80030c0:	b100      	cbz	r0, 80030c4 <main+0x238>
 80030c2:	e7fe      	b.n	80030c2 <main+0x236>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80030c4:	220c      	movs	r2, #12
 80030c6:	a90d      	add	r1, sp, #52	; 0x34
 80030c8:	4620      	mov	r0, r4
 80030ca:	f7fe fd5d 	bl	8001b88 <HAL_TIM_PWM_ConfigChannel>
 80030ce:	4605      	mov	r5, r0
 80030d0:	b100      	cbz	r0, 80030d4 <main+0x248>
 80030d2:	e7fe      	b.n	80030d2 <main+0x246>
  HAL_TIM_MspPostInit(&htim3);
 80030d4:	4620      	mov	r0, r4
  htim4.Instance = TIM4;
 80030d6:	4c13      	ldr	r4, [pc, #76]	; (8003124 <main+0x298>)
  HAL_TIM_MspPostInit(&htim3);
 80030d8:	f000 f97e 	bl	80033d8 <HAL_TIM_MspPostInit>
  htim4.Instance = TIM4;
 80030dc:	4b12      	ldr	r3, [pc, #72]	; (8003128 <main+0x29c>)
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030de:	60a5      	str	r5, [r4, #8]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80030e0:	4620      	mov	r0, r4
  htim4.Init.Prescaler = 168;
 80030e2:	e884 0088 	stmia.w	r4, {r3, r7}
  htim4.Init.Period = 9999;
 80030e6:	60e6      	str	r6, [r4, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030e8:	6125      	str	r5, [r4, #16]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80030ea:	f7fe fd03 	bl	8001af4 <HAL_TIM_PWM_Init>
 80030ee:	b1e8      	cbz	r0, 800312c <main+0x2a0>
 80030f0:	e7fe      	b.n	80030f0 <main+0x264>
 80030f2:	bf00      	nop
 80030f4:	40023800 	.word	0x40023800
 80030f8:	40020800 	.word	0x40020800
 80030fc:	10210000 	.word	0x10210000
 8003100:	20000398 	.word	0x20000398
 8003104:	40004400 	.word	0x40004400
 8003108:	20000304 	.word	0x20000304
 800310c:	40013000 	.word	0x40013000
 8003110:	200002c8 	.word	0x200002c8
 8003114:	40010000 	.word	0x40010000
 8003118:	2000035c 	.word	0x2000035c
 800311c:	20000270 	.word	0x20000270
 8003120:	40000400 	.word	0x40000400
 8003124:	2000022c 	.word	0x2000022c
 8003128:	40000800 	.word	0x40000800
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800312c:	9006      	str	r0, [sp, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800312e:	9007      	str	r0, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003130:	a906      	add	r1, sp, #24
 8003132:	4620      	mov	r0, r4
 8003134:	f7fe fdb0 	bl	8001c98 <HAL_TIMEx_MasterConfigSynchronization>
 8003138:	b100      	cbz	r0, 800313c <main+0x2b0>
 800313a:	e7fe      	b.n	800313a <main+0x2ae>
  sConfigOC.Pulse = 0;
 800313c:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800313e:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003140:	a90d      	add	r1, sp, #52	; 0x34
 8003142:	4833      	ldr	r0, [pc, #204]	; (8003210 <main+0x384>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003144:	930d      	str	r3, [sp, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8003146:	920e      	str	r2, [sp, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003148:	920f      	str	r2, [sp, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800314a:	9211      	str	r2, [sp, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800314c:	f7fe fd1c 	bl	8001b88 <HAL_TIM_PWM_ConfigChannel>
 8003150:	b100      	cbz	r0, 8003154 <main+0x2c8>
 8003152:	e7fe      	b.n	8003152 <main+0x2c6>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003154:	2208      	movs	r2, #8
 8003156:	a90d      	add	r1, sp, #52	; 0x34
 8003158:	482d      	ldr	r0, [pc, #180]	; (8003210 <main+0x384>)
 800315a:	f7fe fd15 	bl	8001b88 <HAL_TIM_PWM_ConfigChannel>
 800315e:	b100      	cbz	r0, 8003162 <main+0x2d6>
 8003160:	e7fe      	b.n	8003160 <main+0x2d4>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003162:	220c      	movs	r2, #12
 8003164:	a90d      	add	r1, sp, #52	; 0x34
 8003166:	482a      	ldr	r0, [pc, #168]	; (8003210 <main+0x384>)
 8003168:	f7fe fd0e 	bl	8001b88 <HAL_TIM_PWM_ConfigChannel>
 800316c:	4605      	mov	r5, r0
 800316e:	b100      	cbz	r0, 8003172 <main+0x2e6>
 8003170:	e7fe      	b.n	8003170 <main+0x2e4>
  HAL_TIM_MspPostInit(&htim4);
 8003172:	4827      	ldr	r0, [pc, #156]	; (8003210 <main+0x384>)
  htim7.Instance = TIM7;
 8003174:	4c27      	ldr	r4, [pc, #156]	; (8003214 <main+0x388>)
  HAL_TIM_MspPostInit(&htim4);
 8003176:	f000 f92f 	bl	80033d8 <HAL_TIM_MspPostInit>
  htim7.Init.Prescaler = 1000-1;
 800317a:	4a27      	ldr	r2, [pc, #156]	; (8003218 <main+0x38c>)
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800317c:	60a5      	str	r5, [r4, #8]
  htim7.Init.Prescaler = 1000-1;
 800317e:	f240 33e7 	movw	r3, #999	; 0x3e7
 8003182:	e884 000c 	stmia.w	r4, {r2, r3}
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003186:	4620      	mov	r0, r4
  htim7.Init.Period = 840;
 8003188:	f44f 7352 	mov.w	r3, #840	; 0x348
 800318c:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800318e:	f7fe fc97 	bl	8001ac0 <HAL_TIM_Base_Init>
 8003192:	b100      	cbz	r0, 8003196 <main+0x30a>
 8003194:	e7fe      	b.n	8003194 <main+0x308>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003196:	900d      	str	r0, [sp, #52]	; 0x34
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003198:	900e      	str	r0, [sp, #56]	; 0x38
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800319a:	a90d      	add	r1, sp, #52	; 0x34
 800319c:	4620      	mov	r0, r4
 800319e:	f7fe fd7b 	bl	8001c98 <HAL_TIMEx_MasterConfigSynchronization>
 80031a2:	4605      	mov	r5, r0
 80031a4:	b100      	cbz	r0, 80031a8 <main+0x31c>
 80031a6:	e7fe      	b.n	80031a6 <main+0x31a>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 80031a8:	2104      	movs	r1, #4
 80031aa:	481c      	ldr	r0, [pc, #112]	; (800321c <main+0x390>)
 80031ac:	f7fe fd5a 	bl	8001c64 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_4);
 80031b0:	210c      	movs	r1, #12
 80031b2:	481a      	ldr	r0, [pc, #104]	; (800321c <main+0x390>)
 80031b4:	f7fe fd56 	bl	8001c64 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 80031b8:	4629      	mov	r1, r5
 80031ba:	4819      	ldr	r0, [pc, #100]	; (8003220 <main+0x394>)
 80031bc:	f7fe fd52 	bl	8001c64 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_2);
 80031c0:	2104      	movs	r1, #4
 80031c2:	4817      	ldr	r0, [pc, #92]	; (8003220 <main+0x394>)
 80031c4:	f7fe fd4e 	bl	8001c64 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_4);
 80031c8:	210c      	movs	r1, #12
 80031ca:	4815      	ldr	r0, [pc, #84]	; (8003220 <main+0x394>)
 80031cc:	f7fe fd4a 	bl	8001c64 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 80031d0:	4629      	mov	r1, r5
 80031d2:	4814      	ldr	r0, [pc, #80]	; (8003224 <main+0x398>)
 80031d4:	f7fe fd46 	bl	8001c64 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 80031d8:	2104      	movs	r1, #4
 80031da:	4812      	ldr	r0, [pc, #72]	; (8003224 <main+0x398>)
 80031dc:	f7fe fd42 	bl	8001c64 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 80031e0:	2108      	movs	r1, #8
 80031e2:	4810      	ldr	r0, [pc, #64]	; (8003224 <main+0x398>)
 80031e4:	f7fe fd3e 	bl	8001c64 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_4);
 80031e8:	210c      	movs	r1, #12
 80031ea:	480e      	ldr	r0, [pc, #56]	; (8003224 <main+0x398>)
 80031ec:	f7fe fd3a 	bl	8001c64 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 80031f0:	4629      	mov	r1, r5
 80031f2:	4807      	ldr	r0, [pc, #28]	; (8003210 <main+0x384>)
 80031f4:	f7fe fd36 	bl	8001c64 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_3);
 80031f8:	2108      	movs	r1, #8
 80031fa:	4805      	ldr	r0, [pc, #20]	; (8003210 <main+0x384>)
 80031fc:	f7fe fd32 	bl	8001c64 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_4);
 8003200:	210c      	movs	r1, #12
 8003202:	4803      	ldr	r0, [pc, #12]	; (8003210 <main+0x384>)
 8003204:	f7fe fd2e 	bl	8001c64 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim7);
 8003208:	4620      	mov	r0, r4
 800320a:	f7fe fb43 	bl	8001894 <HAL_TIM_Base_Start_IT>
 800320e:	e7fe      	b.n	800320e <main+0x382>
 8003210:	2000022c 	.word	0x2000022c
 8003214:	200003d8 	.word	0x200003d8
 8003218:	40001400 	.word	0x40001400
 800321c:	200002c8 	.word	0x200002c8
 8003220:	2000035c 	.word	0x2000035c
 8003224:	20000270 	.word	0x20000270

08003228 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003228:	b513      	push	{r0, r1, r4, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800322a:	4b22      	ldr	r3, [pc, #136]	; (80032b4 <HAL_MspInit+0x8c>)
 800322c:	2400      	movs	r4, #0
 800322e:	9400      	str	r4, [sp, #0]
 8003230:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003232:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003236:	645a      	str	r2, [r3, #68]	; 0x44
 8003238:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800323a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800323e:	9200      	str	r2, [sp, #0]
 8003240:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003242:	9401      	str	r4, [sp, #4]
 8003244:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003246:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800324a:	641a      	str	r2, [r3, #64]	; 0x40
 800324c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003252:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003254:	2007      	movs	r0, #7
  __HAL_RCC_PWR_CLK_ENABLE();
 8003256:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003258:	f7fd fe5e 	bl	8000f18 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800325c:	4622      	mov	r2, r4
 800325e:	4621      	mov	r1, r4
 8003260:	f06f 000b 	mvn.w	r0, #11
 8003264:	f7fd fe6a 	bl	8000f3c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8003268:	4622      	mov	r2, r4
 800326a:	4621      	mov	r1, r4
 800326c:	f06f 000a 	mvn.w	r0, #10
 8003270:	f7fd fe64 	bl	8000f3c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8003274:	4622      	mov	r2, r4
 8003276:	4621      	mov	r1, r4
 8003278:	f06f 0009 	mvn.w	r0, #9
 800327c:	f7fd fe5e 	bl	8000f3c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8003280:	4622      	mov	r2, r4
 8003282:	4621      	mov	r1, r4
 8003284:	f06f 0004 	mvn.w	r0, #4
 8003288:	f7fd fe58 	bl	8000f3c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800328c:	4622      	mov	r2, r4
 800328e:	4621      	mov	r1, r4
 8003290:	f06f 0003 	mvn.w	r0, #3
 8003294:	f7fd fe52 	bl	8000f3c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8003298:	4622      	mov	r2, r4
 800329a:	4621      	mov	r1, r4
 800329c:	f06f 0001 	mvn.w	r0, #1
 80032a0:	f7fd fe4c 	bl	8000f3c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80032a4:	4622      	mov	r2, r4
 80032a6:	4621      	mov	r1, r4
 80032a8:	f04f 30ff 	mov.w	r0, #4294967295
 80032ac:	f7fd fe46 	bl	8000f3c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032b0:	b002      	add	sp, #8
 80032b2:	bd10      	pop	{r4, pc}
 80032b4:	40023800 	.word	0x40023800

080032b8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80032b8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 80032ba:	6802      	ldr	r2, [r0, #0]
 80032bc:	4b0f      	ldr	r3, [pc, #60]	; (80032fc <HAL_SPI_MspInit+0x44>)
 80032be:	429a      	cmp	r2, r3
 80032c0:	d119      	bne.n	80032f6 <HAL_SPI_MspInit+0x3e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80032c2:	2100      	movs	r1, #0
 80032c4:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 80032c8:	9100      	str	r1, [sp, #0]
 80032ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032cc:	480c      	ldr	r0, [pc, #48]	; (8003300 <HAL_SPI_MspInit+0x48>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 80032ce:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80032d2:	645a      	str	r2, [r3, #68]	; 0x44
 80032d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d6:	9103      	str	r1, [sp, #12]
    __HAL_RCC_SPI1_CLK_ENABLE();
 80032d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032dc:	9300      	str	r3, [sp, #0]
 80032de:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80032e0:	23f0      	movs	r3, #240	; 0xf0
 80032e2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032e4:	2302      	movs	r3, #2
 80032e6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032e8:	2303      	movs	r3, #3
 80032ea:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032ec:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80032ee:	2305      	movs	r3, #5
 80032f0:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032f2:	f7fd fe8b 	bl	800100c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80032f6:	b007      	add	sp, #28
 80032f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80032fc:	40013000 	.word	0x40013000
 8003300:	40020000 	.word	0x40020000

08003304 <HAL_TIM_PWM_MspInit>:
}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{

  if(htim_pwm->Instance==TIM1)
 8003304:	6803      	ldr	r3, [r0, #0]
 8003306:	4a21      	ldr	r2, [pc, #132]	; (800338c <HAL_TIM_PWM_MspInit+0x88>)
 8003308:	4293      	cmp	r3, r2
{
 800330a:	b084      	sub	sp, #16
  if(htim_pwm->Instance==TIM1)
 800330c:	d10d      	bne.n	800332a <HAL_TIM_PWM_MspInit+0x26>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800330e:	2300      	movs	r3, #0
 8003310:	9300      	str	r3, [sp, #0]
 8003312:	4b1f      	ldr	r3, [pc, #124]	; (8003390 <HAL_TIM_PWM_MspInit+0x8c>)
 8003314:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003316:	f042 0201 	orr.w	r2, r2, #1
 800331a:	645a      	str	r2, [r3, #68]	; 0x44
 800331c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800331e:	f003 0301 	and.w	r3, r3, #1
 8003322:	9300      	str	r3, [sp, #0]
 8003324:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003326:	b004      	add	sp, #16
 8003328:	4770      	bx	lr
  else if(htim_pwm->Instance==TIM2)
 800332a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800332e:	d10c      	bne.n	800334a <HAL_TIM_PWM_MspInit+0x46>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003330:	2300      	movs	r3, #0
 8003332:	9301      	str	r3, [sp, #4]
 8003334:	4b16      	ldr	r3, [pc, #88]	; (8003390 <HAL_TIM_PWM_MspInit+0x8c>)
 8003336:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003338:	f042 0201 	orr.w	r2, r2, #1
 800333c:	641a      	str	r2, [r3, #64]	; 0x40
 800333e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003340:	f003 0301 	and.w	r3, r3, #1
 8003344:	9301      	str	r3, [sp, #4]
 8003346:	9b01      	ldr	r3, [sp, #4]
 8003348:	e7ed      	b.n	8003326 <HAL_TIM_PWM_MspInit+0x22>
  else if(htim_pwm->Instance==TIM3)
 800334a:	4a12      	ldr	r2, [pc, #72]	; (8003394 <HAL_TIM_PWM_MspInit+0x90>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d10c      	bne.n	800336a <HAL_TIM_PWM_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003350:	2300      	movs	r3, #0
 8003352:	9302      	str	r3, [sp, #8]
 8003354:	4b0e      	ldr	r3, [pc, #56]	; (8003390 <HAL_TIM_PWM_MspInit+0x8c>)
 8003356:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003358:	f042 0202 	orr.w	r2, r2, #2
 800335c:	641a      	str	r2, [r3, #64]	; 0x40
 800335e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003360:	f003 0302 	and.w	r3, r3, #2
 8003364:	9302      	str	r3, [sp, #8]
 8003366:	9b02      	ldr	r3, [sp, #8]
 8003368:	e7dd      	b.n	8003326 <HAL_TIM_PWM_MspInit+0x22>
  else if(htim_pwm->Instance==TIM4)
 800336a:	4a0b      	ldr	r2, [pc, #44]	; (8003398 <HAL_TIM_PWM_MspInit+0x94>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d1da      	bne.n	8003326 <HAL_TIM_PWM_MspInit+0x22>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003370:	2300      	movs	r3, #0
 8003372:	9303      	str	r3, [sp, #12]
 8003374:	4b06      	ldr	r3, [pc, #24]	; (8003390 <HAL_TIM_PWM_MspInit+0x8c>)
 8003376:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003378:	f042 0204 	orr.w	r2, r2, #4
 800337c:	641a      	str	r2, [r3, #64]	; 0x40
 800337e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003380:	f003 0304 	and.w	r3, r3, #4
 8003384:	9303      	str	r3, [sp, #12]
 8003386:	9b03      	ldr	r3, [sp, #12]
}
 8003388:	e7cd      	b.n	8003326 <HAL_TIM_PWM_MspInit+0x22>
 800338a:	bf00      	nop
 800338c:	40010000 	.word	0x40010000
 8003390:	40023800 	.word	0x40023800
 8003394:	40000400 	.word	0x40000400
 8003398:	40000800 	.word	0x40000800

0800339c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800339c:	b507      	push	{r0, r1, r2, lr}

  if(htim_base->Instance==TIM7)
 800339e:	4b0d      	ldr	r3, [pc, #52]	; (80033d4 <HAL_TIM_Base_MspInit+0x38>)
 80033a0:	6802      	ldr	r2, [r0, #0]
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d113      	bne.n	80033ce <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80033a6:	f503 3309 	add.w	r3, r3, #140288	; 0x22400
 80033aa:	2100      	movs	r1, #0
 80033ac:	9101      	str	r1, [sp, #4]
 80033ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033b0:	f042 0220 	orr.w	r2, r2, #32
 80033b4:	641a      	str	r2, [r3, #64]	; 0x40
 80033b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b8:	f003 0320 	and.w	r3, r3, #32
 80033bc:	9301      	str	r3, [sp, #4]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 1);
 80033be:	2037      	movs	r0, #55	; 0x37
 80033c0:	2201      	movs	r2, #1
    __HAL_RCC_TIM7_CLK_ENABLE();
 80033c2:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 1);
 80033c4:	f7fd fdba 	bl	8000f3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80033c8:	2037      	movs	r0, #55	; 0x37
 80033ca:	f7fd fdeb 	bl	8000fa4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80033ce:	b003      	add	sp, #12
 80033d0:	f85d fb04 	ldr.w	pc, [sp], #4
 80033d4:	40001400 	.word	0x40001400

080033d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80033d8:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM1)
 80033da:	6803      	ldr	r3, [r0, #0]
 80033dc:	4a29      	ldr	r2, [pc, #164]	; (8003484 <HAL_TIM_MspPostInit+0xac>)
 80033de:	4293      	cmp	r3, r2
{
 80033e0:	b086      	sub	sp, #24
  if(htim->Instance==TIM1)
 80033e2:	d10f      	bne.n	8003404 <HAL_TIM_MspPostInit+0x2c>
  /* USER CODE END TIM1_MspPostInit 0 */
    /**TIM1 GPIO Configuration    
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80033e4:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80033e8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ea:	2302      	movs	r3, #2
 80033ec:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ee:	2300      	movs	r3, #0
 80033f0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033f2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033f4:	4824      	ldr	r0, [pc, #144]	; (8003488 <HAL_TIM_MspPostInit+0xb0>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80033f6:	2301      	movs	r3, #1
 80033f8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033fa:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033fc:	f7fd fe06 	bl	800100c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003400:	b006      	add	sp, #24
 8003402:	bd70      	pop	{r4, r5, r6, pc}
  else if(htim->Instance==TIM2)
 8003404:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003408:	d116      	bne.n	8003438 <HAL_TIM_MspPostInit+0x60>
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800340a:	2400      	movs	r4, #0
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800340c:	2303      	movs	r3, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800340e:	2602      	movs	r6, #2
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003410:	2501      	movs	r5, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003412:	a901      	add	r1, sp, #4
 8003414:	481c      	ldr	r0, [pc, #112]	; (8003488 <HAL_TIM_MspPostInit+0xb0>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003416:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003418:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800341a:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800341c:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800341e:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003420:	f7fd fdf4 	bl	800100c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003424:	2304      	movs	r3, #4
 8003426:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003428:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800342a:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800342c:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800342e:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003430:	eb0d 0103 	add.w	r1, sp, r3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003434:	4815      	ldr	r0, [pc, #84]	; (800348c <HAL_TIM_MspPostInit+0xb4>)
 8003436:	e7e1      	b.n	80033fc <HAL_TIM_MspPostInit+0x24>
  else if(htim->Instance==TIM3)
 8003438:	4a15      	ldr	r2, [pc, #84]	; (8003490 <HAL_TIM_MspPostInit+0xb8>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d114      	bne.n	8003468 <HAL_TIM_MspPostInit+0x90>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800343e:	2402      	movs	r4, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003440:	2500      	movs	r5, #0
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003442:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003444:	a901      	add	r1, sp, #4
 8003446:	4811      	ldr	r0, [pc, #68]	; (800348c <HAL_TIM_MspPostInit+0xb4>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003448:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800344a:	9402      	str	r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800344c:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800344e:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003450:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003452:	f7fd fddb 	bl	800100c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003456:	23c0      	movs	r3, #192	; 0xc0
 8003458:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800345a:	9402      	str	r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800345c:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800345e:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003460:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003462:	a901      	add	r1, sp, #4
 8003464:	480b      	ldr	r0, [pc, #44]	; (8003494 <HAL_TIM_MspPostInit+0xbc>)
 8003466:	e7c9      	b.n	80033fc <HAL_TIM_MspPostInit+0x24>
  else if(htim->Instance==TIM4)
 8003468:	4a0b      	ldr	r2, [pc, #44]	; (8003498 <HAL_TIM_MspPostInit+0xc0>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d1c8      	bne.n	8003400 <HAL_TIM_MspPostInit+0x28>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 800346e:	f44f 7350 	mov.w	r3, #832	; 0x340
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003472:	2200      	movs	r2, #0
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 8003474:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003476:	2302      	movs	r3, #2
 8003478:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800347a:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800347c:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800347e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003480:	a901      	add	r1, sp, #4
 8003482:	e7d7      	b.n	8003434 <HAL_TIM_MspPostInit+0x5c>
 8003484:	40010000 	.word	0x40010000
 8003488:	40020000 	.word	0x40020000
 800348c:	40020400 	.word	0x40020400
 8003490:	40000400 	.word	0x40000400
 8003494:	40020800 	.word	0x40020800
 8003498:	40000800 	.word	0x40000800

0800349c <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800349c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 800349e:	6802      	ldr	r2, [r0, #0]
 80034a0:	4b0f      	ldr	r3, [pc, #60]	; (80034e0 <HAL_UART_MspInit+0x44>)
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d119      	bne.n	80034da <HAL_UART_MspInit+0x3e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80034a6:	2300      	movs	r3, #0
 80034a8:	9300      	str	r3, [sp, #0]
 80034aa:	4b0e      	ldr	r3, [pc, #56]	; (80034e4 <HAL_UART_MspInit+0x48>)
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034ac:	480e      	ldr	r0, [pc, #56]	; (80034e8 <HAL_UART_MspInit+0x4c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80034ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034b0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80034b4:	641a      	str	r2, [r3, #64]	; 0x40
 80034b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034bc:	9300      	str	r3, [sp, #0]
 80034be:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80034c0:	230c      	movs	r3, #12
 80034c2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034c4:	2302      	movs	r3, #2
 80034c6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80034c8:	2301      	movs	r3, #1
 80034ca:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034cc:	2303      	movs	r3, #3
 80034ce:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034d0:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80034d2:	2307      	movs	r3, #7
 80034d4:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034d6:	f7fd fd99 	bl	800100c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80034da:	b007      	add	sp, #28
 80034dc:	f85d fb04 	ldr.w	pc, [sp], #4
 80034e0:	40004400 	.word	0x40004400
 80034e4:	40023800 	.word	0x40023800
 80034e8:	40020000 	.word	0x40020000

080034ec <NMI_Handler>:
 80034ec:	4770      	bx	lr

080034ee <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80034ee:	e7fe      	b.n	80034ee <HardFault_Handler>

080034f0 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80034f0:	e7fe      	b.n	80034f0 <MemManage_Handler>

080034f2 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80034f2:	e7fe      	b.n	80034f2 <BusFault_Handler>

080034f4 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80034f4:	e7fe      	b.n	80034f4 <UsageFault_Handler>

080034f6 <SVC_Handler>:
 80034f6:	4770      	bx	lr

080034f8 <DebugMon_Handler>:
 80034f8:	4770      	bx	lr

080034fa <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80034fa:	4770      	bx	lr

080034fc <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80034fc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80034fe:	f7fd fcf9 	bl	8000ef4 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003502:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8003506:	f7fd bd7c 	b.w	8001002 <HAL_SYSTICK_IRQHandler>
 800350a:	0000      	movs	r0, r0
 800350c:	0000      	movs	r0, r0
	...

08003510 <TIM7_IRQHandler>:

/**
* @brief This function handles TIM7 global interrupt.
*/
void TIM7_IRQHandler(void)
{
 8003510:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  static int counter = 1, i = 1;
  static double t = 0.0, walk_period = 1.0, stride_length = 30, lift_leg_vz = 50, height = 60.92+97.48-10.0, runout_width = 20, runout_vel = 10, ground_width = 100, up_body = 5.0;
  const double gp_x = -17.0, gp_y = -9.1;
  static cubicCoes leg1_path[3], leg2_path[3], leg3_path[3], leg4_path[3];

  if (counter%2 == 0){	//20ms
 8003514:	4bec      	ldr	r3, [pc, #944]	; (80038c8 <TIM7_IRQHandler+0x3b8>)
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	f012 0f01 	tst.w	r2, #1
{
 800351c:	ed2d 8b04 	vpush	{d8-d9}
 8003520:	469b      	mov	fp, r3
  if (counter%2 == 0){	//20ms
 8003522:	f040 8296 	bne.w	8003a52 <TIM7_IRQHandler+0x542>
	  if (t < walk_period/4.0){
 8003526:	4ce9      	ldr	r4, [pc, #932]	; (80038cc <TIM7_IRQHandler+0x3bc>)
 8003528:	4be9      	ldr	r3, [pc, #932]	; (80038d0 <TIM7_IRQHandler+0x3c0>)
 800352a:	4fea      	ldr	r7, [pc, #936]	; (80038d4 <TIM7_IRQHandler+0x3c4>)
 800352c:	4eea      	ldr	r6, [pc, #936]	; (80038d8 <TIM7_IRQHandler+0x3c8>)
 800352e:	4deb      	ldr	r5, [pc, #940]	; (80038dc <TIM7_IRQHandler+0x3cc>)
 8003530:	e9d4 8900 	ldrd	r8, r9, [r4]
 8003534:	2200      	movs	r2, #0
 8003536:	4640      	mov	r0, r8
 8003538:	4649      	mov	r1, r9
 800353a:	f7fd fa8f 	bl	8000a5c <__aeabi_dcmplt>
 800353e:	46a2      	mov	sl, r4
 8003540:	4ce7      	ldr	r4, [pc, #924]	; (80038e0 <TIM7_IRQHandler+0x3d0>)
 8003542:	2800      	cmp	r0, #0
 8003544:	f000 82b8 	beq.w	8003ab8 <TIM7_IRQHandler+0x5a8>
		  if (t < 0.020){
 8003548:	a3c1      	add	r3, pc, #772	; (adr r3, 8003850 <TIM7_IRQHandler+0x340>)
 800354a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800354e:	4640      	mov	r0, r8
 8003550:	4649      	mov	r1, r9
 8003552:	f7fd fa83 	bl	8000a5c <__aeabi_dcmplt>
 8003556:	2800      	cmp	r0, #0
 8003558:	f000 80ea 	beq.w	8003730 <TIM7_IRQHandler+0x220>
			  leg1_path[0] = hermite(gp_x+stride_length/2.0, -stride_length/3.0, gp_x+stride_length/2.0-stride_length/3.0, -stride_length/3.0);
 800355c:	ed9f 3bbe 	vldr	d3, [pc, #760]	; 8003858 <TIM7_IRQHandler+0x348>
 8003560:	ed9f 2bbf 	vldr	d2, [pc, #764]	; 8003860 <TIM7_IRQHandler+0x350>
 8003564:	eeb0 1a43 	vmov.f32	s2, s6
 8003568:	eef0 1a63 	vmov.f32	s3, s7
 800356c:	ed9f 0bbe 	vldr	d0, [pc, #760]	; 8003868 <TIM7_IRQHandler+0x358>
 8003570:	f7ff fbd6 	bl	8002d20 <hermite>
 8003574:	ed87 0b00 	vstr	d0, [r7]
 8003578:	ed87 1b02 	vstr	d1, [r7, #8]
		  	  leg1_path[1] = hermite(gp_y+59.55-209.1/2.0+ground_width/2.0, -runout_vel, gp_y+59.55-209.1/2.0+ground_width/2.0-runout_width/2.0, 0.0);
 800357c:	ed9f 0bbc 	vldr	d0, [pc, #752]	; 8003870 <TIM7_IRQHandler+0x360>
 8003580:	ed9f 1bb5 	vldr	d1, [pc, #724]	; 8003858 <TIM7_IRQHandler+0x348>
			  leg1_path[0] = hermite(gp_x+stride_length/2.0, -stride_length/3.0, gp_x+stride_length/2.0-stride_length/3.0, -stride_length/3.0);
 8003584:	ed87 2b04 	vstr	d2, [r7, #16]
 8003588:	ed87 3b06 	vstr	d3, [r7, #24]
		  	  leg1_path[1] = hermite(gp_y+59.55-209.1/2.0+ground_width/2.0, -runout_vel, gp_y+59.55-209.1/2.0+ground_width/2.0-runout_width/2.0, 0.0);
 800358c:	ed9f 2bba 	vldr	d2, [pc, #744]	; 8003878 <TIM7_IRQHandler+0x368>
 8003590:	ed9f 3bbb 	vldr	d3, [pc, #748]	; 8003880 <TIM7_IRQHandler+0x370>
 8003594:	f7ff fbc4 	bl	8002d20 <hermite>
 8003598:	ed87 3b0e 	vstr	d3, [r7, #56]	; 0x38
		  	  leg1_path[2] = hermite(-height-up_body, 0.0, -height, 0.0);
 800359c:	ed9f 3bb8 	vldr	d3, [pc, #736]	; 8003880 <TIM7_IRQHandler+0x370>
		  	  leg1_path[1] = hermite(gp_y+59.55-209.1/2.0+ground_width/2.0, -runout_vel, gp_y+59.55-209.1/2.0+ground_width/2.0-runout_width/2.0, 0.0);
 80035a0:	ed87 0b08 	vstr	d0, [r7, #32]
 80035a4:	ed87 1b0a 	vstr	d1, [r7, #40]	; 0x28
		  	  leg1_path[2] = hermite(-height-up_body, 0.0, -height, 0.0);
 80035a8:	eeb0 1a43 	vmov.f32	s2, s6
 80035ac:	eef0 1a63 	vmov.f32	s3, s7
 80035b0:	ed9f 0bb5 	vldr	d0, [pc, #724]	; 8003888 <TIM7_IRQHandler+0x378>
		  	  leg1_path[1] = hermite(gp_y+59.55-209.1/2.0+ground_width/2.0, -runout_vel, gp_y+59.55-209.1/2.0+ground_width/2.0-runout_width/2.0, 0.0);
 80035b4:	ed87 2b0c 	vstr	d2, [r7, #48]	; 0x30
		  	  leg1_path[2] = hermite(-height-up_body, 0.0, -height, 0.0);
 80035b8:	ed9f 2bb5 	vldr	d2, [pc, #724]	; 8003890 <TIM7_IRQHandler+0x380>
 80035bc:	f7ff fbb0 	bl	8002d20 <hermite>
 80035c0:	ed87 3b16 	vstr	d3, [r7, #88]	; 0x58

			  leg2_path[0] = hermite(gp_x+stride_length/2.0-stride_length/3.0, -stride_length/3.0, gp_x+stride_length/2.0-2.0*stride_length/3.0, -stride_length/3.0);
 80035c4:	ed9f 3ba4 	vldr	d3, [pc, #656]	; 8003858 <TIM7_IRQHandler+0x348>
		  	  leg1_path[2] = hermite(-height-up_body, 0.0, -height, 0.0);
 80035c8:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
 80035cc:	ed87 1b12 	vstr	d1, [r7, #72]	; 0x48
			  leg2_path[0] = hermite(gp_x+stride_length/2.0-stride_length/3.0, -stride_length/3.0, gp_x+stride_length/2.0-2.0*stride_length/3.0, -stride_length/3.0);
 80035d0:	eeb0 1a43 	vmov.f32	s2, s6
 80035d4:	eef0 1a63 	vmov.f32	s3, s7
 80035d8:	ed9f 0ba1 	vldr	d0, [pc, #644]	; 8003860 <TIM7_IRQHandler+0x350>
		  	  leg1_path[2] = hermite(-height-up_body, 0.0, -height, 0.0);
 80035dc:	ed87 2b14 	vstr	d2, [r7, #80]	; 0x50
			  leg2_path[0] = hermite(gp_x+stride_length/2.0-stride_length/3.0, -stride_length/3.0, gp_x+stride_length/2.0-2.0*stride_length/3.0, -stride_length/3.0);
 80035e0:	ed9f 2bad 	vldr	d2, [pc, #692]	; 8003898 <TIM7_IRQHandler+0x388>
 80035e4:	f7ff fb9c 	bl	8002d20 <hermite>
 80035e8:	ed86 0b00 	vstr	d0, [r6]
 80035ec:	ed86 1b02 	vstr	d1, [r6, #8]
		  	  leg2_path[1] = hermite(gp_y+59.55-209.1/2.0+ground_width/2.0, -runout_vel, gp_y+59.55-209.1/2.0+ground_width/2.0-runout_width/2.0, 0.0);
 80035f0:	ed9f 0b9f 	vldr	d0, [pc, #636]	; 8003870 <TIM7_IRQHandler+0x360>
 80035f4:	ed9f 1b98 	vldr	d1, [pc, #608]	; 8003858 <TIM7_IRQHandler+0x348>
			  leg2_path[0] = hermite(gp_x+stride_length/2.0-stride_length/3.0, -stride_length/3.0, gp_x+stride_length/2.0-2.0*stride_length/3.0, -stride_length/3.0);
 80035f8:	ed86 2b04 	vstr	d2, [r6, #16]
 80035fc:	ed86 3b06 	vstr	d3, [r6, #24]
		  	  leg2_path[1] = hermite(gp_y+59.55-209.1/2.0+ground_width/2.0, -runout_vel, gp_y+59.55-209.1/2.0+ground_width/2.0-runout_width/2.0, 0.0);
 8003600:	ed9f 2b9d 	vldr	d2, [pc, #628]	; 8003878 <TIM7_IRQHandler+0x368>
 8003604:	ed9f 3b9e 	vldr	d3, [pc, #632]	; 8003880 <TIM7_IRQHandler+0x370>
 8003608:	f7ff fb8a 	bl	8002d20 <hermite>
 800360c:	ed86 2b0c 	vstr	d2, [r6, #48]	; 0x30
 8003610:	ed86 3b0e 	vstr	d3, [r6, #56]	; 0x38
		  	  leg2_path[2] = hermite(-height, 0.0, -height, 0.0);
 8003614:	ed9f 2b9e 	vldr	d2, [pc, #632]	; 8003890 <TIM7_IRQHandler+0x380>
 8003618:	ed9f 3b99 	vldr	d3, [pc, #612]	; 8003880 <TIM7_IRQHandler+0x370>
		  	  leg2_path[1] = hermite(gp_y+59.55-209.1/2.0+ground_width/2.0, -runout_vel, gp_y+59.55-209.1/2.0+ground_width/2.0-runout_width/2.0, 0.0);
 800361c:	ed86 0b08 	vstr	d0, [r6, #32]
		  	  leg2_path[2] = hermite(-height, 0.0, -height, 0.0);
 8003620:	eeb0 0a42 	vmov.f32	s0, s4
 8003624:	eef0 0a62 	vmov.f32	s1, s5
		  	  leg2_path[1] = hermite(gp_y+59.55-209.1/2.0+ground_width/2.0, -runout_vel, gp_y+59.55-209.1/2.0+ground_width/2.0-runout_width/2.0, 0.0);
 8003628:	ed86 1b0a 	vstr	d1, [r6, #40]	; 0x28
		  	  leg2_path[2] = hermite(-height, 0.0, -height, 0.0);
 800362c:	eeb0 1a43 	vmov.f32	s2, s6
 8003630:	eef0 1a63 	vmov.f32	s3, s7
 8003634:	f7ff fb74 	bl	8002d20 <hermite>
 8003638:	ed86 3b16 	vstr	d3, [r6, #88]	; 0x58

		  	  leg4_path[0] = hermite(gp_x+stride_length/2.0-2.0*stride_length/3.0, -stride_length/3.0, gp_x-stride_length/2.0, -stride_length/3.0);
 800363c:	ed9f 3b86 	vldr	d3, [pc, #536]	; 8003858 <TIM7_IRQHandler+0x348>
		  	  leg2_path[2] = hermite(-height, 0.0, -height, 0.0);
 8003640:	ed86 0b10 	vstr	d0, [r6, #64]	; 0x40
 8003644:	ed86 1b12 	vstr	d1, [r6, #72]	; 0x48
		  	  leg4_path[0] = hermite(gp_x+stride_length/2.0-2.0*stride_length/3.0, -stride_length/3.0, gp_x-stride_length/2.0, -stride_length/3.0);
 8003648:	eeb0 1a43 	vmov.f32	s2, s6
 800364c:	eef0 1a63 	vmov.f32	s3, s7
 8003650:	ed9f 0b91 	vldr	d0, [pc, #580]	; 8003898 <TIM7_IRQHandler+0x388>
		  	  leg2_path[2] = hermite(-height, 0.0, -height, 0.0);
 8003654:	ed86 2b14 	vstr	d2, [r6, #80]	; 0x50
		  	  leg4_path[0] = hermite(gp_x+stride_length/2.0-2.0*stride_length/3.0, -stride_length/3.0, gp_x-stride_length/2.0, -stride_length/3.0);
 8003658:	ed9f 2b91 	vldr	d2, [pc, #580]	; 80038a0 <TIM7_IRQHandler+0x390>
 800365c:	f7ff fb60 	bl	8002d20 <hermite>
 8003660:	ed84 0b00 	vstr	d0, [r4]
 8003664:	ed84 1b02 	vstr	d1, [r4, #8]
		  	  leg4_path[1] = hermite(gp_y-(59.55-209.1/2.0+ground_width/2.0), -runout_vel, gp_y-(59.55-209.1/2.0+ground_width/2.0)-runout_width/2.0, 0.0);
 8003668:	ed9f 0b8f 	vldr	d0, [pc, #572]	; 80038a8 <TIM7_IRQHandler+0x398>
 800366c:	ed9f 1b7a 	vldr	d1, [pc, #488]	; 8003858 <TIM7_IRQHandler+0x348>
		  	  leg4_path[0] = hermite(gp_x+stride_length/2.0-2.0*stride_length/3.0, -stride_length/3.0, gp_x-stride_length/2.0, -stride_length/3.0);
 8003670:	ed84 2b04 	vstr	d2, [r4, #16]
 8003674:	ed84 3b06 	vstr	d3, [r4, #24]
		  	  leg4_path[1] = hermite(gp_y-(59.55-209.1/2.0+ground_width/2.0), -runout_vel, gp_y-(59.55-209.1/2.0+ground_width/2.0)-runout_width/2.0, 0.0);
 8003678:	ed9f 2b8d 	vldr	d2, [pc, #564]	; 80038b0 <TIM7_IRQHandler+0x3a0>
 800367c:	ed9f 3b80 	vldr	d3, [pc, #512]	; 8003880 <TIM7_IRQHandler+0x370>
 8003680:	f7ff fb4e 	bl	8002d20 <hermite>
 8003684:	ed84 2b0c 	vstr	d2, [r4, #48]	; 0x30
 8003688:	ed84 3b0e 	vstr	d3, [r4, #56]	; 0x38
		  	  leg4_path[2] = hermite(-height, 0.0, -height, 0.0);
 800368c:	ed9f 2b80 	vldr	d2, [pc, #512]	; 8003890 <TIM7_IRQHandler+0x380>
 8003690:	ed9f 3b7b 	vldr	d3, [pc, #492]	; 8003880 <TIM7_IRQHandler+0x370>
		  	  leg4_path[1] = hermite(gp_y-(59.55-209.1/2.0+ground_width/2.0), -runout_vel, gp_y-(59.55-209.1/2.0+ground_width/2.0)-runout_width/2.0, 0.0);
 8003694:	ed84 0b08 	vstr	d0, [r4, #32]
		  	  leg4_path[2] = hermite(-height, 0.0, -height, 0.0);
 8003698:	eeb0 0a42 	vmov.f32	s0, s4
 800369c:	eef0 0a62 	vmov.f32	s1, s5
		  	  leg4_path[1] = hermite(gp_y-(59.55-209.1/2.0+ground_width/2.0), -runout_vel, gp_y-(59.55-209.1/2.0+ground_width/2.0)-runout_width/2.0, 0.0);
 80036a0:	ed84 1b0a 	vstr	d1, [r4, #40]	; 0x28
		  	  leg4_path[2] = hermite(-height, 0.0, -height, 0.0);
 80036a4:	eeb0 1a43 	vmov.f32	s2, s6
 80036a8:	eef0 1a63 	vmov.f32	s3, s7
 80036ac:	f7ff fb38 	bl	8002d20 <hermite>
 80036b0:	ed84 3b16 	vstr	d3, [r4, #88]	; 0x58

			  leg3_path[0] = hermite(gp_x-stride_length/2.0, 0.0, gp_x+stride_length/2.0, 0.0);
 80036b4:	ed9f 3b72 	vldr	d3, [pc, #456]	; 8003880 <TIM7_IRQHandler+0x370>
		  	  leg4_path[2] = hermite(-height, 0.0, -height, 0.0);
 80036b8:	ed84 0b10 	vstr	d0, [r4, #64]	; 0x40
 80036bc:	ed84 1b12 	vstr	d1, [r4, #72]	; 0x48
			  leg3_path[0] = hermite(gp_x-stride_length/2.0, 0.0, gp_x+stride_length/2.0, 0.0);
 80036c0:	eeb0 1a43 	vmov.f32	s2, s6
 80036c4:	eef0 1a63 	vmov.f32	s3, s7
 80036c8:	ed9f 0b75 	vldr	d0, [pc, #468]	; 80038a0 <TIM7_IRQHandler+0x390>
		  	  leg4_path[2] = hermite(-height, 0.0, -height, 0.0);
 80036cc:	ed84 2b14 	vstr	d2, [r4, #80]	; 0x50
			  leg3_path[0] = hermite(gp_x-stride_length/2.0, 0.0, gp_x+stride_length/2.0, 0.0);
 80036d0:	ed9f 2b65 	vldr	d2, [pc, #404]	; 8003868 <TIM7_IRQHandler+0x358>
 80036d4:	f7ff fb24 	bl	8002d20 <hermite>
 80036d8:	ed85 0b00 	vstr	d0, [r5]
 80036dc:	ed85 1b02 	vstr	d1, [r5, #8]
			  leg3_path[1] = hermite(gp_y-(59.55-209.1/2.0+ground_width/2.0), -runout_vel, gp_y-(59.55-209.1/2.0+ground_width/2.0)-runout_width/2.0, 0.0);
 80036e0:	ed9f 0b71 	vldr	d0, [pc, #452]	; 80038a8 <TIM7_IRQHandler+0x398>
 80036e4:	ed9f 1b5c 	vldr	d1, [pc, #368]	; 8003858 <TIM7_IRQHandler+0x348>
			  leg3_path[0] = hermite(gp_x-stride_length/2.0, 0.0, gp_x+stride_length/2.0, 0.0);
 80036e8:	ed85 2b04 	vstr	d2, [r5, #16]
 80036ec:	ed85 3b06 	vstr	d3, [r5, #24]
			  leg3_path[1] = hermite(gp_y-(59.55-209.1/2.0+ground_width/2.0), -runout_vel, gp_y-(59.55-209.1/2.0+ground_width/2.0)-runout_width/2.0, 0.0);
 80036f0:	ed9f 2b6f 	vldr	d2, [pc, #444]	; 80038b0 <TIM7_IRQHandler+0x3a0>
 80036f4:	ed9f 3b62 	vldr	d3, [pc, #392]	; 8003880 <TIM7_IRQHandler+0x370>
 80036f8:	f7ff fb12 	bl	8002d20 <hermite>
 80036fc:	ed85 0b08 	vstr	d0, [r5, #32]
 8003700:	ed85 1b0a 	vstr	d1, [r5, #40]	; 0x28
 8003704:	ed85 2b0c 	vstr	d2, [r5, #48]	; 0x30
 8003708:	ed85 3b0e 	vstr	d3, [r5, #56]	; 0x38
			  leg3_path[2] = hermite(-height, lift_leg_vz, -height-up_body, -lift_leg_vz);
 800370c:	ed9f 2b5e 	vldr	d2, [pc, #376]	; 8003888 <TIM7_IRQHandler+0x378>
 8003710:	ed9f 3b69 	vldr	d3, [pc, #420]	; 80038b8 <TIM7_IRQHandler+0x3a8>
 8003714:	ed9f 1b6a 	vldr	d1, [pc, #424]	; 80038c0 <TIM7_IRQHandler+0x3b0>
 8003718:	ed9f 0b5d 	vldr	d0, [pc, #372]	; 8003890 <TIM7_IRQHandler+0x380>
 800371c:	f7ff fb00 	bl	8002d20 <hermite>
 8003720:	ed85 0b10 	vstr	d0, [r5, #64]	; 0x40
 8003724:	ed85 1b12 	vstr	d1, [r5, #72]	; 0x48
 8003728:	ed85 2b14 	vstr	d2, [r5, #80]	; 0x50
 800372c:	ed85 3b16 	vstr	d3, [r5, #88]	; 0x58
		  }

		  leg1_setPosition(getVal_cubicCurve(leg1_path[0], t*4.0/walk_period),
 8003730:	2200      	movs	r2, #0
 8003732:	4b6c      	ldr	r3, [pc, #432]	; (80038e4 <TIM7_IRQHandler+0x3d4>)
 8003734:	e9da 0100 	ldrd	r0, r1, [sl]
 8003738:	f7fc ff1e 	bl	8000578 <__aeabi_dmul>
 800373c:	ed97 1b02 	vldr	d1, [r7, #8]
 8003740:	ec41 0b14 	vmov	d4, r0, r1
 8003744:	ed97 2b04 	vldr	d2, [r7, #16]
 8003748:	ed97 3b06 	vldr	d3, [r7, #24]
 800374c:	ed97 0b00 	vldr	d0, [r7]
 8003750:	f7ff fa9e 	bl	8002c90 <getVal_cubicCurve>
				   	   	   getVal_cubicCurve(leg1_path[1], t*4.0/walk_period),
 8003754:	2200      	movs	r2, #0
 8003756:	4b63      	ldr	r3, [pc, #396]	; (80038e4 <TIM7_IRQHandler+0x3d4>)
		  leg1_setPosition(getVal_cubicCurve(leg1_path[0], t*4.0/walk_period),
 8003758:	eeb0 8a40 	vmov.f32	s16, s0
 800375c:	eef0 8a60 	vmov.f32	s17, s1
				   	   	   getVal_cubicCurve(leg1_path[1], t*4.0/walk_period),
 8003760:	e9da 0100 	ldrd	r0, r1, [sl]
 8003764:	f7fc ff08 	bl	8000578 <__aeabi_dmul>
		  leg1_setPosition(getVal_cubicCurve(leg1_path[0], t*4.0/walk_period),
 8003768:	ed97 1b0a 	vldr	d1, [r7, #40]	; 0x28
 800376c:	ec41 0b14 	vmov	d4, r0, r1
 8003770:	ed97 2b0c 	vldr	d2, [r7, #48]	; 0x30
 8003774:	ed97 3b0e 	vldr	d3, [r7, #56]	; 0x38
 8003778:	ed97 0b08 	vldr	d0, [r7, #32]
 800377c:	f7ff fa88 	bl	8002c90 <getVal_cubicCurve>
						   getVal_cubicCurve(leg1_path[2], t*4.0/walk_period));
 8003780:	2200      	movs	r2, #0
 8003782:	4b58      	ldr	r3, [pc, #352]	; (80038e4 <TIM7_IRQHandler+0x3d4>)
		  leg1_setPosition(getVal_cubicCurve(leg1_path[0], t*4.0/walk_period),
 8003784:	eeb0 9a40 	vmov.f32	s18, s0
 8003788:	eef0 9a60 	vmov.f32	s19, s1
						   getVal_cubicCurve(leg1_path[2], t*4.0/walk_period));
 800378c:	e9da 0100 	ldrd	r0, r1, [sl]
 8003790:	f7fc fef2 	bl	8000578 <__aeabi_dmul>
		  leg1_setPosition(getVal_cubicCurve(leg1_path[0], t*4.0/walk_period),
 8003794:	ed97 3b16 	vldr	d3, [r7, #88]	; 0x58
 8003798:	ec41 0b14 	vmov	d4, r0, r1
 800379c:	ed97 1b12 	vldr	d1, [r7, #72]	; 0x48
 80037a0:	ed97 2b14 	vldr	d2, [r7, #80]	; 0x50
 80037a4:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 80037a8:	f7ff fa72 	bl	8002c90 <getVal_cubicCurve>
 80037ac:	eeb0 1a49 	vmov.f32	s2, s18
 80037b0:	eef0 1a69 	vmov.f32	s3, s19
 80037b4:	eeb0 2a40 	vmov.f32	s4, s0
 80037b8:	eef0 2a60 	vmov.f32	s5, s1
 80037bc:	eeb0 0a48 	vmov.f32	s0, s16
 80037c0:	eef0 0a68 	vmov.f32	s1, s17
 80037c4:	f7fe fd44 	bl	8002250 <leg1_setPosition>

		  leg2_setPosition(getVal_cubicCurve(leg2_path[0], t*4.0/walk_period),
 80037c8:	2200      	movs	r2, #0
 80037ca:	4b46      	ldr	r3, [pc, #280]	; (80038e4 <TIM7_IRQHandler+0x3d4>)
 80037cc:	e9da 0100 	ldrd	r0, r1, [sl]
 80037d0:	f7fc fed2 	bl	8000578 <__aeabi_dmul>
 80037d4:	ed96 1b02 	vldr	d1, [r6, #8]
 80037d8:	ec41 0b14 	vmov	d4, r0, r1
 80037dc:	ed96 2b04 	vldr	d2, [r6, #16]
 80037e0:	ed96 3b06 	vldr	d3, [r6, #24]
 80037e4:	ed96 0b00 	vldr	d0, [r6]
 80037e8:	f7ff fa52 	bl	8002c90 <getVal_cubicCurve>
				   	   	   getVal_cubicCurve(leg2_path[1], t*4.0/walk_period),
 80037ec:	2200      	movs	r2, #0
 80037ee:	4b3d      	ldr	r3, [pc, #244]	; (80038e4 <TIM7_IRQHandler+0x3d4>)
		  leg2_setPosition(getVal_cubicCurve(leg2_path[0], t*4.0/walk_period),
 80037f0:	eeb0 8a40 	vmov.f32	s16, s0
 80037f4:	eef0 8a60 	vmov.f32	s17, s1
				   	   	   getVal_cubicCurve(leg2_path[1], t*4.0/walk_period),
 80037f8:	e9da 0100 	ldrd	r0, r1, [sl]
 80037fc:	f7fc febc 	bl	8000578 <__aeabi_dmul>
		  leg2_setPosition(getVal_cubicCurve(leg2_path[0], t*4.0/walk_period),
 8003800:	ed96 1b0a 	vldr	d1, [r6, #40]	; 0x28
 8003804:	ec41 0b14 	vmov	d4, r0, r1
 8003808:	ed96 2b0c 	vldr	d2, [r6, #48]	; 0x30
 800380c:	ed96 3b0e 	vldr	d3, [r6, #56]	; 0x38
 8003810:	ed96 0b08 	vldr	d0, [r6, #32]
 8003814:	f7ff fa3c 	bl	8002c90 <getVal_cubicCurve>
						   getVal_cubicCurve(leg2_path[2], t*4.0/walk_period));
 8003818:	2200      	movs	r2, #0
 800381a:	4b32      	ldr	r3, [pc, #200]	; (80038e4 <TIM7_IRQHandler+0x3d4>)
		  leg2_setPosition(getVal_cubicCurve(leg2_path[0], t*4.0/walk_period),
 800381c:	eeb0 9a40 	vmov.f32	s18, s0
 8003820:	eef0 9a60 	vmov.f32	s19, s1
						   getVal_cubicCurve(leg2_path[2], t*4.0/walk_period));
 8003824:	e9da 0100 	ldrd	r0, r1, [sl]
 8003828:	f7fc fea6 	bl	8000578 <__aeabi_dmul>
		  leg2_setPosition(getVal_cubicCurve(leg2_path[0], t*4.0/walk_period),
 800382c:	ed96 3b16 	vldr	d3, [r6, #88]	; 0x58
 8003830:	ec41 0b14 	vmov	d4, r0, r1
 8003834:	ed96 1b12 	vldr	d1, [r6, #72]	; 0x48
 8003838:	ed96 2b14 	vldr	d2, [r6, #80]	; 0x50
 800383c:	ed96 0b10 	vldr	d0, [r6, #64]	; 0x40
 8003840:	f7ff fa26 	bl	8002c90 <getVal_cubicCurve>
 8003844:	eeb0 1a49 	vmov.f32	s2, s18
 8003848:	eef0 1a69 	vmov.f32	s3, s19
 800384c:	e04c      	b.n	80038e8 <TIM7_IRQHandler+0x3d8>
 800384e:	bf00      	nop
 8003850:	47ae147b 	.word	0x47ae147b
 8003854:	3f947ae1 	.word	0x3f947ae1
 8003858:	00000000 	.word	0x00000000
 800385c:	c0240000 	.word	0xc0240000
 8003860:	00000000 	.word	0x00000000
 8003864:	c0280000 	.word	0xc0280000
 8003868:	00000000 	.word	0x00000000
 800386c:	c0000000 	.word	0xc0000000
 8003870:	66666668 	.word	0x66666668
 8003874:	c0106666 	.word	0xc0106666
 8003878:	33333334 	.word	0x33333334
 800387c:	c02c3333 	.word	0xc02c3333
	...
 8003888:	cccccccd 	.word	0xcccccccd
 800388c:	c0632ccc 	.word	0xc0632ccc
 8003890:	cccccccd 	.word	0xcccccccd
 8003894:	c0628ccc 	.word	0xc0628ccc
 8003898:	00000000 	.word	0x00000000
 800389c:	c0360000 	.word	0xc0360000
 80038a0:	00000000 	.word	0x00000000
 80038a4:	c0400000 	.word	0xc0400000
 80038a8:	33333333 	.word	0x33333333
 80038ac:	c02c3333 	.word	0xc02c3333
 80038b0:	9999999a 	.word	0x9999999a
 80038b4:	c0381999 	.word	0xc0381999
 80038b8:	00000000 	.word	0x00000000
 80038bc:	c0490000 	.word	0xc0490000
 80038c0:	00000000 	.word	0x00000000
 80038c4:	40490000 	.word	0x40490000
 80038c8:	20000008 	.word	0x20000008
 80038cc:	20000220 	.word	0x20000220
 80038d0:	3fd00000 	.word	0x3fd00000
 80038d4:	200000a0 	.word	0x200000a0
 80038d8:	20000100 	.word	0x20000100
 80038dc:	20000160 	.word	0x20000160
 80038e0:	200001c0 	.word	0x200001c0
 80038e4:	40100000 	.word	0x40100000
 80038e8:	eeb0 2a40 	vmov.f32	s4, s0
 80038ec:	eef0 2a60 	vmov.f32	s5, s1
 80038f0:	eeb0 0a48 	vmov.f32	s0, s16
 80038f4:	eef0 0a68 	vmov.f32	s1, s17
 80038f8:	f7fe fdf6 	bl	80024e8 <leg2_setPosition>

		  leg3_setPosition(getVal_cubicCurve(leg3_path[0], t*4.0/walk_period),
 80038fc:	2200      	movs	r2, #0
 80038fe:	4b6a      	ldr	r3, [pc, #424]	; (8003aa8 <TIM7_IRQHandler+0x598>)
 8003900:	e9da 0100 	ldrd	r0, r1, [sl]
 8003904:	f7fc fe38 	bl	8000578 <__aeabi_dmul>
 8003908:	ed95 1b02 	vldr	d1, [r5, #8]
 800390c:	ec41 0b14 	vmov	d4, r0, r1
 8003910:	ed95 2b04 	vldr	d2, [r5, #16]
 8003914:	ed95 3b06 	vldr	d3, [r5, #24]
 8003918:	ed95 0b00 	vldr	d0, [r5]
 800391c:	f7ff f9b8 	bl	8002c90 <getVal_cubicCurve>
				   	   	   getVal_cubicCurve(leg3_path[1], t*4.0/walk_period),
 8003920:	2200      	movs	r2, #0
 8003922:	4b61      	ldr	r3, [pc, #388]	; (8003aa8 <TIM7_IRQHandler+0x598>)
		  leg3_setPosition(getVal_cubicCurve(leg3_path[0], t*4.0/walk_period),
 8003924:	eeb0 8a40 	vmov.f32	s16, s0
 8003928:	eef0 8a60 	vmov.f32	s17, s1
				   	   	   getVal_cubicCurve(leg3_path[1], t*4.0/walk_period),
 800392c:	e9da 0100 	ldrd	r0, r1, [sl]
 8003930:	f7fc fe22 	bl	8000578 <__aeabi_dmul>
		  leg3_setPosition(getVal_cubicCurve(leg3_path[0], t*4.0/walk_period),
 8003934:	ed95 1b0a 	vldr	d1, [r5, #40]	; 0x28
 8003938:	ec41 0b14 	vmov	d4, r0, r1
 800393c:	ed95 2b0c 	vldr	d2, [r5, #48]	; 0x30
 8003940:	ed95 3b0e 	vldr	d3, [r5, #56]	; 0x38
 8003944:	ed95 0b08 	vldr	d0, [r5, #32]
 8003948:	f7ff f9a2 	bl	8002c90 <getVal_cubicCurve>
						   getVal_cubicCurve(leg3_path[2], t*4.0/walk_period));
 800394c:	2200      	movs	r2, #0
 800394e:	4b56      	ldr	r3, [pc, #344]	; (8003aa8 <TIM7_IRQHandler+0x598>)
		  leg3_setPosition(getVal_cubicCurve(leg3_path[0], t*4.0/walk_period),
 8003950:	eeb0 9a40 	vmov.f32	s18, s0
 8003954:	eef0 9a60 	vmov.f32	s19, s1
						   getVal_cubicCurve(leg3_path[2], t*4.0/walk_period));
 8003958:	e9da 0100 	ldrd	r0, r1, [sl]
 800395c:	f7fc fe0c 	bl	8000578 <__aeabi_dmul>
		  leg3_setPosition(getVal_cubicCurve(leg3_path[0], t*4.0/walk_period),
 8003960:	ed95 3b16 	vldr	d3, [r5, #88]	; 0x58
 8003964:	ec41 0b14 	vmov	d4, r0, r1
 8003968:	ed95 1b12 	vldr	d1, [r5, #72]	; 0x48
 800396c:	ed95 2b14 	vldr	d2, [r5, #80]	; 0x50
 8003970:	ed95 0b10 	vldr	d0, [r5, #64]	; 0x40
 8003974:	f7ff f98c 	bl	8002c90 <getVal_cubicCurve>
 8003978:	eeb0 1a49 	vmov.f32	s2, s18
 800397c:	eef0 1a69 	vmov.f32	s3, s19
 8003980:	eeb0 2a40 	vmov.f32	s4, s0
 8003984:	eef0 2a60 	vmov.f32	s5, s1
 8003988:	eeb0 0a48 	vmov.f32	s0, s16
 800398c:	eef0 0a68 	vmov.f32	s1, s17
 8003990:	f7fe fef6 	bl	8002780 <leg3_setPosition>

		  leg4_setPosition(getVal_cubicCurve(leg4_path[0], t*4.0/walk_period),
 8003994:	2200      	movs	r2, #0
 8003996:	4b44      	ldr	r3, [pc, #272]	; (8003aa8 <TIM7_IRQHandler+0x598>)
 8003998:	e9da 0100 	ldrd	r0, r1, [sl]
 800399c:	f7fc fdec 	bl	8000578 <__aeabi_dmul>
 80039a0:	ed94 1b02 	vldr	d1, [r4, #8]
 80039a4:	ec41 0b14 	vmov	d4, r0, r1
 80039a8:	ed94 2b04 	vldr	d2, [r4, #16]
 80039ac:	ed94 3b06 	vldr	d3, [r4, #24]
 80039b0:	ed94 0b00 	vldr	d0, [r4]
 80039b4:	f7ff f96c 	bl	8002c90 <getVal_cubicCurve>
				   	   	   getVal_cubicCurve(leg4_path[1], t*4.0/walk_period),
 80039b8:	2200      	movs	r2, #0
 80039ba:	4b3b      	ldr	r3, [pc, #236]	; (8003aa8 <TIM7_IRQHandler+0x598>)
		  leg4_setPosition(getVal_cubicCurve(leg4_path[0], t*4.0/walk_period),
 80039bc:	eeb0 8a40 	vmov.f32	s16, s0
 80039c0:	eef0 8a60 	vmov.f32	s17, s1
				   	   	   getVal_cubicCurve(leg4_path[1], t*4.0/walk_period),
 80039c4:	e9da 0100 	ldrd	r0, r1, [sl]
 80039c8:	f7fc fdd6 	bl	8000578 <__aeabi_dmul>
		  leg4_setPosition(getVal_cubicCurve(leg4_path[0], t*4.0/walk_period),
 80039cc:	ed94 0b08 	vldr	d0, [r4, #32]
 80039d0:	ec41 0b14 	vmov	d4, r0, r1
 80039d4:	ed94 1b0a 	vldr	d1, [r4, #40]	; 0x28
 80039d8:	ed94 2b0c 	vldr	d2, [r4, #48]	; 0x30
 80039dc:	ed94 3b0e 	vldr	d3, [r4, #56]	; 0x38
 80039e0:	f7ff f956 	bl	8002c90 <getVal_cubicCurve>
						   getVal_cubicCurve(leg4_path[2], t*4.0/walk_period));
 80039e4:	e9da 0100 	ldrd	r0, r1, [sl]
		  leg4_setPosition(getVal_cubicCurve(leg4_path[0], t*4.0/walk_period),
 80039e8:	eeb0 9a40 	vmov.f32	s18, s0
 80039ec:	eef0 9a60 	vmov.f32	s19, s1
						   getVal_cubicCurve(leg4_path[2], t*4.0/walk_period));
 80039f0:	4b2d      	ldr	r3, [pc, #180]	; (8003aa8 <TIM7_IRQHandler+0x598>)
 80039f2:	2200      	movs	r2, #0
				  	  	   getVal_cubicCurve(leg3_path[1], (t-walk_period*3.0/4.0)*4.0/walk_period),
						   getVal_cubicCurve(leg3_path[2], (t-walk_period*3.0/4.0)*4.0/walk_period));

		  leg4_setPosition(getVal_cubicCurve(leg4_path[0], (t-walk_period*3.0/4.0)*4.0/walk_period),
				  	  	   getVal_cubicCurve(leg4_path[1], (t-walk_period*3.0/4.0)*4.0/walk_period),
						   getVal_cubicCurve(leg4_path[2], (t-walk_period*3.0/4.0)*4.0/walk_period));
 80039f4:	f7fc fdc0 	bl	8000578 <__aeabi_dmul>
		  leg4_setPosition(getVal_cubicCurve(leg4_path[0], (t-walk_period*3.0/4.0)*4.0/walk_period),
 80039f8:	ed94 3b16 	vldr	d3, [r4, #88]	; 0x58
 80039fc:	ec41 0b14 	vmov	d4, r0, r1
 8003a00:	ed94 1b12 	vldr	d1, [r4, #72]	; 0x48
 8003a04:	ed94 2b14 	vldr	d2, [r4, #80]	; 0x50
 8003a08:	ed94 0b10 	vldr	d0, [r4, #64]	; 0x40
 8003a0c:	f7ff f940 	bl	8002c90 <getVal_cubicCurve>
 8003a10:	eeb0 1a49 	vmov.f32	s2, s18
 8003a14:	eef0 1a69 	vmov.f32	s3, s19
 8003a18:	eeb0 2a40 	vmov.f32	s4, s0
 8003a1c:	eef0 2a60 	vmov.f32	s5, s1
 8003a20:	eeb0 0a48 	vmov.f32	s0, s16
 8003a24:	eef0 0a68 	vmov.f32	s1, s17
 8003a28:	f7fe ffee 	bl	8002a08 <leg4_setPosition>

	  }

	  t += 0.020;
 8003a2c:	a31a      	add	r3, pc, #104	; (adr r3, 8003a98 <TIM7_IRQHandler+0x588>)
 8003a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a32:	e9da 0100 	ldrd	r0, r1, [sl]
 8003a36:	f7fc fbed 	bl	8000214 <__adddf3>
	  if (t > walk_period - 0.020)
 8003a3a:	a319      	add	r3, pc, #100	; (adr r3, 8003aa0 <TIM7_IRQHandler+0x590>)
 8003a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
	  t += 0.020;
 8003a40:	4604      	mov	r4, r0
 8003a42:	460d      	mov	r5, r1
	  if (t > walk_period - 0.020)
 8003a44:	f7fd f828 	bl	8000a98 <__aeabi_dcmpgt>
 8003a48:	2800      	cmp	r0, #0
 8003a4a:	f040 87c2 	bne.w	80049d2 <TIM7_IRQHandler+0x14c2>
	  t += 0.020;
 8003a4e:	e9ca 4500 	strd	r4, r5, [sl]
		  t = 0.0;
  }

  if (counter%100 == 0){  //1s
 8003a52:	f8db 2000 	ldr.w	r2, [fp]
 8003a56:	2364      	movs	r3, #100	; 0x64
 8003a58:	fb92 f4f3 	sdiv	r4, r2, r3
 8003a5c:	fb03 2414 	mls	r4, r3, r4, r2
 8003a60:	b964      	cbnz	r4, 8003a7c <TIM7_IRQHandler+0x56c>
	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_10,i);
 8003a62:	4d12      	ldr	r5, [pc, #72]	; (8003aac <TIM7_IRQHandler+0x59c>)
 8003a64:	4812      	ldr	r0, [pc, #72]	; (8003ab0 <TIM7_IRQHandler+0x5a0>)
 8003a66:	782a      	ldrb	r2, [r5, #0]
 8003a68:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003a6c:	f7fd fba8 	bl	80011c0 <HAL_GPIO_WritePin>
	  i = 1-i;
 8003a70:	682b      	ldr	r3, [r5, #0]
	  counter = 0;
 8003a72:	f8cb 4000 	str.w	r4, [fp]
	  i = 1-i;
 8003a76:	f1c3 0301 	rsb	r3, r3, #1
 8003a7a:	602b      	str	r3, [r5, #0]
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003a7c:	ecbd 8b04 	vpop	{d8-d9}
  counter++;
 8003a80:	f8db 3000 	ldr.w	r3, [fp]
  HAL_TIM_IRQHandler(&htim7);
 8003a84:	480b      	ldr	r0, [pc, #44]	; (8003ab4 <TIM7_IRQHandler+0x5a4>)
  counter++;
 8003a86:	3301      	adds	r3, #1
 8003a88:	f8cb 3000 	str.w	r3, [fp]
}
 8003a8c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  HAL_TIM_IRQHandler(&htim7);
 8003a90:	f7fd bf10 	b.w	80018b4 <HAL_TIM_IRQHandler>
 8003a94:	f3af 8000 	nop.w
 8003a98:	47ae147b 	.word	0x47ae147b
 8003a9c:	3f947ae1 	.word	0x3f947ae1
 8003aa0:	f5c28f5c 	.word	0xf5c28f5c
 8003aa4:	3fef5c28 	.word	0x3fef5c28
 8003aa8:	40100000 	.word	0x40100000
 8003aac:	2000000c 	.word	0x2000000c
 8003ab0:	40020800 	.word	0x40020800
 8003ab4:	200003d8 	.word	0x200003d8
	  }else if (t < walk_period*2.0/4.0){
 8003ab8:	2200      	movs	r2, #0
 8003aba:	4bef      	ldr	r3, [pc, #956]	; (8003e78 <TIM7_IRQHandler+0x968>)
 8003abc:	4640      	mov	r0, r8
 8003abe:	4649      	mov	r1, r9
 8003ac0:	f7fc ffcc 	bl	8000a5c <__aeabi_dcmplt>
 8003ac4:	2800      	cmp	r0, #0
 8003ac6:	f000 8285 	beq.w	8003fd4 <TIM7_IRQHandler+0xac4>
		  if (t < walk_period/4.0 + 0.020){
 8003aca:	a3cb      	add	r3, pc, #812	; (adr r3, 8003df8 <TIM7_IRQHandler+0x8e8>)
 8003acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ad0:	4640      	mov	r0, r8
 8003ad2:	4649      	mov	r1, r9
 8003ad4:	f7fc ffc2 	bl	8000a5c <__aeabi_dcmplt>
 8003ad8:	2800      	cmp	r0, #0
 8003ada:	f000 80ea 	beq.w	8003cb2 <TIM7_IRQHandler+0x7a2>
			  leg3_path[0] = hermite(gp_x+stride_length/2.0, -stride_length/3.0, gp_x+stride_length/2.0-stride_length/3.0, -stride_length/3.0);
 8003ade:	ed9f 3bc8 	vldr	d3, [pc, #800]	; 8003e00 <TIM7_IRQHandler+0x8f0>
 8003ae2:	ed9f 2bc9 	vldr	d2, [pc, #804]	; 8003e08 <TIM7_IRQHandler+0x8f8>
 8003ae6:	eeb0 1a43 	vmov.f32	s2, s6
 8003aea:	eef0 1a63 	vmov.f32	s3, s7
 8003aee:	ed9f 0bc8 	vldr	d0, [pc, #800]	; 8003e10 <TIM7_IRQHandler+0x900>
 8003af2:	f7ff f915 	bl	8002d20 <hermite>
 8003af6:	ed85 0b00 	vstr	d0, [r5]
 8003afa:	ed85 1b02 	vstr	d1, [r5, #8]
		  	  leg3_path[1] = hermite(gp_y-(59.55-209.1/2.0+ground_width/2.0)-runout_width/2.0, 0.0, gp_y-(59.55-209.1/2.0+ground_width/2.0), runout_vel);
 8003afe:	ed9f 0bc6 	vldr	d0, [pc, #792]	; 8003e18 <TIM7_IRQHandler+0x908>
 8003b02:	ed9f 1bc7 	vldr	d1, [pc, #796]	; 8003e20 <TIM7_IRQHandler+0x910>
			  leg3_path[0] = hermite(gp_x+stride_length/2.0, -stride_length/3.0, gp_x+stride_length/2.0-stride_length/3.0, -stride_length/3.0);
 8003b06:	ed85 2b04 	vstr	d2, [r5, #16]
 8003b0a:	ed85 3b06 	vstr	d3, [r5, #24]
		  	  leg3_path[1] = hermite(gp_y-(59.55-209.1/2.0+ground_width/2.0)-runout_width/2.0, 0.0, gp_y-(59.55-209.1/2.0+ground_width/2.0), runout_vel);
 8003b0e:	ed9f 2bc6 	vldr	d2, [pc, #792]	; 8003e28 <TIM7_IRQHandler+0x918>
 8003b12:	ed9f 3bc7 	vldr	d3, [pc, #796]	; 8003e30 <TIM7_IRQHandler+0x920>
 8003b16:	f7ff f903 	bl	8002d20 <hermite>
 8003b1a:	ed85 3b0e 	vstr	d3, [r5, #56]	; 0x38
		  	  leg3_path[2] = hermite(-height-up_body, 0.0, -height, 0.0);
 8003b1e:	ed9f 3bc0 	vldr	d3, [pc, #768]	; 8003e20 <TIM7_IRQHandler+0x910>
		  	  leg3_path[1] = hermite(gp_y-(59.55-209.1/2.0+ground_width/2.0)-runout_width/2.0, 0.0, gp_y-(59.55-209.1/2.0+ground_width/2.0), runout_vel);
 8003b22:	ed85 0b08 	vstr	d0, [r5, #32]
 8003b26:	ed85 1b0a 	vstr	d1, [r5, #40]	; 0x28
		  	  leg3_path[2] = hermite(-height-up_body, 0.0, -height, 0.0);
 8003b2a:	eeb0 1a43 	vmov.f32	s2, s6
 8003b2e:	eef0 1a63 	vmov.f32	s3, s7
 8003b32:	ed9f 0bc1 	vldr	d0, [pc, #772]	; 8003e38 <TIM7_IRQHandler+0x928>
		  	  leg3_path[1] = hermite(gp_y-(59.55-209.1/2.0+ground_width/2.0)-runout_width/2.0, 0.0, gp_y-(59.55-209.1/2.0+ground_width/2.0), runout_vel);
 8003b36:	ed85 2b0c 	vstr	d2, [r5, #48]	; 0x30
		  	  leg3_path[2] = hermite(-height-up_body, 0.0, -height, 0.0);
 8003b3a:	ed9f 2bc1 	vldr	d2, [pc, #772]	; 8003e40 <TIM7_IRQHandler+0x930>
 8003b3e:	f7ff f8ef 	bl	8002d20 <hermite>
 8003b42:	ed85 3b16 	vstr	d3, [r5, #88]	; 0x58
			  leg1_path[0] = hermite(gp_x+stride_length/2.0-stride_length/3.0, -stride_length/3.0, gp_x+stride_length/2.0-2.0*stride_length/3.0, -stride_length/3.0);
 8003b46:	ed9f 3bae 	vldr	d3, [pc, #696]	; 8003e00 <TIM7_IRQHandler+0x8f0>
		  	  leg3_path[2] = hermite(-height-up_body, 0.0, -height, 0.0);
 8003b4a:	ed85 0b10 	vstr	d0, [r5, #64]	; 0x40
 8003b4e:	ed85 1b12 	vstr	d1, [r5, #72]	; 0x48
			  leg1_path[0] = hermite(gp_x+stride_length/2.0-stride_length/3.0, -stride_length/3.0, gp_x+stride_length/2.0-2.0*stride_length/3.0, -stride_length/3.0);
 8003b52:	eeb0 1a43 	vmov.f32	s2, s6
 8003b56:	eef0 1a63 	vmov.f32	s3, s7
 8003b5a:	ed9f 0bab 	vldr	d0, [pc, #684]	; 8003e08 <TIM7_IRQHandler+0x8f8>
		  	  leg3_path[2] = hermite(-height-up_body, 0.0, -height, 0.0);
 8003b5e:	ed85 2b14 	vstr	d2, [r5, #80]	; 0x50
			  leg1_path[0] = hermite(gp_x+stride_length/2.0-stride_length/3.0, -stride_length/3.0, gp_x+stride_length/2.0-2.0*stride_length/3.0, -stride_length/3.0);
 8003b62:	ed9f 2bb9 	vldr	d2, [pc, #740]	; 8003e48 <TIM7_IRQHandler+0x938>
 8003b66:	f7ff f8db 	bl	8002d20 <hermite>
 8003b6a:	ed87 0b00 	vstr	d0, [r7]
 8003b6e:	ed87 1b02 	vstr	d1, [r7, #8]
		  	  leg1_path[1] = hermite(gp_y+59.55-209.1/2.0+ground_width/2.0-runout_width/2.0, 0.0, gp_y+59.55-209.1/2.0+ground_width/2.0, runout_vel);
 8003b72:	ed9f 0bb7 	vldr	d0, [pc, #732]	; 8003e50 <TIM7_IRQHandler+0x940>
 8003b76:	ed9f 1baa 	vldr	d1, [pc, #680]	; 8003e20 <TIM7_IRQHandler+0x910>
			  leg1_path[0] = hermite(gp_x+stride_length/2.0-stride_length/3.0, -stride_length/3.0, gp_x+stride_length/2.0-2.0*stride_length/3.0, -stride_length/3.0);
 8003b7a:	ed87 2b04 	vstr	d2, [r7, #16]
 8003b7e:	ed87 3b06 	vstr	d3, [r7, #24]
		  	  leg1_path[1] = hermite(gp_y+59.55-209.1/2.0+ground_width/2.0-runout_width/2.0, 0.0, gp_y+59.55-209.1/2.0+ground_width/2.0, runout_vel);
 8003b82:	ed9f 2bb5 	vldr	d2, [pc, #724]	; 8003e58 <TIM7_IRQHandler+0x948>
 8003b86:	ed9f 3baa 	vldr	d3, [pc, #680]	; 8003e30 <TIM7_IRQHandler+0x920>
 8003b8a:	f7ff f8c9 	bl	8002d20 <hermite>
 8003b8e:	ed87 2b0c 	vstr	d2, [r7, #48]	; 0x30
 8003b92:	ed87 3b0e 	vstr	d3, [r7, #56]	; 0x38
		  	  leg1_path[2] = hermite(-height, 0.0, -height, 0.0);
 8003b96:	ed9f 2baa 	vldr	d2, [pc, #680]	; 8003e40 <TIM7_IRQHandler+0x930>
 8003b9a:	ed9f 3ba1 	vldr	d3, [pc, #644]	; 8003e20 <TIM7_IRQHandler+0x910>
		  	  leg1_path[1] = hermite(gp_y+59.55-209.1/2.0+ground_width/2.0-runout_width/2.0, 0.0, gp_y+59.55-209.1/2.0+ground_width/2.0, runout_vel);
 8003b9e:	ed87 0b08 	vstr	d0, [r7, #32]
		  	  leg1_path[2] = hermite(-height, 0.0, -height, 0.0);
 8003ba2:	eeb0 0a42 	vmov.f32	s0, s4
 8003ba6:	eef0 0a62 	vmov.f32	s1, s5
		  	  leg1_path[1] = hermite(gp_y+59.55-209.1/2.0+ground_width/2.0-runout_width/2.0, 0.0, gp_y+59.55-209.1/2.0+ground_width/2.0, runout_vel);
 8003baa:	ed87 1b0a 	vstr	d1, [r7, #40]	; 0x28
		  	  leg1_path[2] = hermite(-height, 0.0, -height, 0.0);
 8003bae:	eeb0 1a43 	vmov.f32	s2, s6
 8003bb2:	eef0 1a63 	vmov.f32	s3, s7
 8003bb6:	f7ff f8b3 	bl	8002d20 <hermite>
 8003bba:	ed87 3b16 	vstr	d3, [r7, #88]	; 0x58
		  	  leg2_path[0] = hermite(gp_x+stride_length/2.0-2.0*stride_length/3.0, -stride_length/3.0, gp_x-stride_length/2.0, -stride_length/3.0);
 8003bbe:	ed9f 3b90 	vldr	d3, [pc, #576]	; 8003e00 <TIM7_IRQHandler+0x8f0>
		  	  leg1_path[2] = hermite(-height, 0.0, -height, 0.0);
 8003bc2:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
 8003bc6:	ed87 1b12 	vstr	d1, [r7, #72]	; 0x48
		  	  leg2_path[0] = hermite(gp_x+stride_length/2.0-2.0*stride_length/3.0, -stride_length/3.0, gp_x-stride_length/2.0, -stride_length/3.0);
 8003bca:	eeb0 1a43 	vmov.f32	s2, s6
 8003bce:	eef0 1a63 	vmov.f32	s3, s7
 8003bd2:	ed9f 0b9d 	vldr	d0, [pc, #628]	; 8003e48 <TIM7_IRQHandler+0x938>
		  	  leg1_path[2] = hermite(-height, 0.0, -height, 0.0);
 8003bd6:	ed87 2b14 	vstr	d2, [r7, #80]	; 0x50
		  	  leg2_path[0] = hermite(gp_x+stride_length/2.0-2.0*stride_length/3.0, -stride_length/3.0, gp_x-stride_length/2.0, -stride_length/3.0);
 8003bda:	ed9f 2ba1 	vldr	d2, [pc, #644]	; 8003e60 <TIM7_IRQHandler+0x950>
 8003bde:	f7ff f89f 	bl	8002d20 <hermite>
 8003be2:	ed86 0b00 	vstr	d0, [r6]
 8003be6:	ed86 1b02 	vstr	d1, [r6, #8]
		  	  leg2_path[1] = hermite(gp_y+59.55-209.1/2.0+ground_width/2.0-runout_width/2.0, 0.0, gp_y+59.55-209.1/2.0+ground_width/2.0, runout_vel);
 8003bea:	ed9f 0b99 	vldr	d0, [pc, #612]	; 8003e50 <TIM7_IRQHandler+0x940>
 8003bee:	ed9f 1b8c 	vldr	d1, [pc, #560]	; 8003e20 <TIM7_IRQHandler+0x910>
		  	  leg2_path[0] = hermite(gp_x+stride_length/2.0-2.0*stride_length/3.0, -stride_length/3.0, gp_x-stride_length/2.0, -stride_length/3.0);
 8003bf2:	ed86 2b04 	vstr	d2, [r6, #16]
 8003bf6:	ed86 3b06 	vstr	d3, [r6, #24]
		  	  leg2_path[1] = hermite(gp_y+59.55-209.1/2.0+ground_width/2.0-runout_width/2.0, 0.0, gp_y+59.55-209.1/2.0+ground_width/2.0, runout_vel);
 8003bfa:	ed9f 2b97 	vldr	d2, [pc, #604]	; 8003e58 <TIM7_IRQHandler+0x948>
 8003bfe:	ed9f 3b8c 	vldr	d3, [pc, #560]	; 8003e30 <TIM7_IRQHandler+0x920>
 8003c02:	f7ff f88d 	bl	8002d20 <hermite>
 8003c06:	ed86 2b0c 	vstr	d2, [r6, #48]	; 0x30
 8003c0a:	ed86 3b0e 	vstr	d3, [r6, #56]	; 0x38
		  	  leg2_path[2] = hermite(-height, 0.0, -height, 0.0);
 8003c0e:	ed9f 2b8c 	vldr	d2, [pc, #560]	; 8003e40 <TIM7_IRQHandler+0x930>
 8003c12:	ed9f 3b83 	vldr	d3, [pc, #524]	; 8003e20 <TIM7_IRQHandler+0x910>
		  	  leg2_path[1] = hermite(gp_y+59.55-209.1/2.0+ground_width/2.0-runout_width/2.0, 0.0, gp_y+59.55-209.1/2.0+ground_width/2.0, runout_vel);
 8003c16:	ed86 0b08 	vstr	d0, [r6, #32]
		  	  leg2_path[2] = hermite(-height, 0.0, -height, 0.0);
 8003c1a:	eeb0 0a42 	vmov.f32	s0, s4
 8003c1e:	eef0 0a62 	vmov.f32	s1, s5
		  	  leg2_path[1] = hermite(gp_y+59.55-209.1/2.0+ground_width/2.0-runout_width/2.0, 0.0, gp_y+59.55-209.1/2.0+ground_width/2.0, runout_vel);
 8003c22:	ed86 1b0a 	vstr	d1, [r6, #40]	; 0x28
		  	  leg2_path[2] = hermite(-height, 0.0, -height, 0.0);
 8003c26:	eeb0 1a43 	vmov.f32	s2, s6
 8003c2a:	eef0 1a63 	vmov.f32	s3, s7
 8003c2e:	f7ff f877 	bl	8002d20 <hermite>
 8003c32:	ed86 3b16 	vstr	d3, [r6, #88]	; 0x58
			  leg4_path[0] = hermite(gp_x-stride_length/2.0, 0.0, gp_x+stride_length/2.0, 0.0);
 8003c36:	ed9f 3b7a 	vldr	d3, [pc, #488]	; 8003e20 <TIM7_IRQHandler+0x910>
		  	  leg2_path[2] = hermite(-height, 0.0, -height, 0.0);
 8003c3a:	ed86 0b10 	vstr	d0, [r6, #64]	; 0x40
 8003c3e:	ed86 1b12 	vstr	d1, [r6, #72]	; 0x48
			  leg4_path[0] = hermite(gp_x-stride_length/2.0, 0.0, gp_x+stride_length/2.0, 0.0);
 8003c42:	eeb0 1a43 	vmov.f32	s2, s6
 8003c46:	eef0 1a63 	vmov.f32	s3, s7
 8003c4a:	ed9f 0b85 	vldr	d0, [pc, #532]	; 8003e60 <TIM7_IRQHandler+0x950>
		  	  leg2_path[2] = hermite(-height, 0.0, -height, 0.0);
 8003c4e:	ed86 2b14 	vstr	d2, [r6, #80]	; 0x50
			  leg4_path[0] = hermite(gp_x-stride_length/2.0, 0.0, gp_x+stride_length/2.0, 0.0);
 8003c52:	ed9f 2b6f 	vldr	d2, [pc, #444]	; 8003e10 <TIM7_IRQHandler+0x900>
 8003c56:	f7ff f863 	bl	8002d20 <hermite>
 8003c5a:	ed84 0b00 	vstr	d0, [r4]
 8003c5e:	ed84 1b02 	vstr	d1, [r4, #8]
			  leg4_path[1] = hermite(gp_y-(59.55-209.1/2.0+ground_width/2.0)-runout_width/2.0, 0.0, gp_y-(59.55-209.1/2.0+ground_width/2.0), runout_vel);
 8003c62:	ed9f 0b6d 	vldr	d0, [pc, #436]	; 8003e18 <TIM7_IRQHandler+0x908>
 8003c66:	ed9f 1b6e 	vldr	d1, [pc, #440]	; 8003e20 <TIM7_IRQHandler+0x910>
			  leg4_path[0] = hermite(gp_x-stride_length/2.0, 0.0, gp_x+stride_length/2.0, 0.0);
 8003c6a:	ed84 2b04 	vstr	d2, [r4, #16]
 8003c6e:	ed84 3b06 	vstr	d3, [r4, #24]
			  leg4_path[1] = hermite(gp_y-(59.55-209.1/2.0+ground_width/2.0)-runout_width/2.0, 0.0, gp_y-(59.55-209.1/2.0+ground_width/2.0), runout_vel);
 8003c72:	ed9f 2b6d 	vldr	d2, [pc, #436]	; 8003e28 <TIM7_IRQHandler+0x918>
 8003c76:	ed9f 3b6e 	vldr	d3, [pc, #440]	; 8003e30 <TIM7_IRQHandler+0x920>
 8003c7a:	f7ff f851 	bl	8002d20 <hermite>
 8003c7e:	ed84 0b08 	vstr	d0, [r4, #32]
 8003c82:	ed84 1b0a 	vstr	d1, [r4, #40]	; 0x28
 8003c86:	ed84 2b0c 	vstr	d2, [r4, #48]	; 0x30
 8003c8a:	ed84 3b0e 	vstr	d3, [r4, #56]	; 0x38
			  leg4_path[2] = hermite(-height, lift_leg_vz, -height-up_body, -lift_leg_vz);
 8003c8e:	ed9f 2b6a 	vldr	d2, [pc, #424]	; 8003e38 <TIM7_IRQHandler+0x928>
 8003c92:	ed9f 3b75 	vldr	d3, [pc, #468]	; 8003e68 <TIM7_IRQHandler+0x958>
 8003c96:	ed9f 1b76 	vldr	d1, [pc, #472]	; 8003e70 <TIM7_IRQHandler+0x960>
 8003c9a:	ed9f 0b69 	vldr	d0, [pc, #420]	; 8003e40 <TIM7_IRQHandler+0x930>
 8003c9e:	f7ff f83f 	bl	8002d20 <hermite>
 8003ca2:	ed84 0b10 	vstr	d0, [r4, #64]	; 0x40
 8003ca6:	ed84 1b12 	vstr	d1, [r4, #72]	; 0x48
 8003caa:	ed84 2b14 	vstr	d2, [r4, #80]	; 0x50
 8003cae:	ed84 3b16 	vstr	d3, [r4, #88]	; 0x58
		  leg1_setPosition(getVal_cubicCurve(leg1_path[0], (t-walk_period/4.0)*4.0/walk_period),
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	4b71      	ldr	r3, [pc, #452]	; (8003e7c <TIM7_IRQHandler+0x96c>)
 8003cb6:	e9da 0100 	ldrd	r0, r1, [sl]
 8003cba:	f7fc faa9 	bl	8000210 <__aeabi_dsub>
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	4b6f      	ldr	r3, [pc, #444]	; (8003e80 <TIM7_IRQHandler+0x970>)
 8003cc2:	f7fc fc59 	bl	8000578 <__aeabi_dmul>
 8003cc6:	ed97 1b02 	vldr	d1, [r7, #8]
 8003cca:	ec41 0b14 	vmov	d4, r0, r1
 8003cce:	ed97 2b04 	vldr	d2, [r7, #16]
 8003cd2:	ed97 3b06 	vldr	d3, [r7, #24]
 8003cd6:	ed97 0b00 	vldr	d0, [r7]
 8003cda:	f7fe ffd9 	bl	8002c90 <getVal_cubicCurve>
				   	   	   getVal_cubicCurve(leg1_path[1], (t-walk_period/4.0)*4.0/walk_period),
 8003cde:	2200      	movs	r2, #0
 8003ce0:	4b66      	ldr	r3, [pc, #408]	; (8003e7c <TIM7_IRQHandler+0x96c>)
		  leg1_setPosition(getVal_cubicCurve(leg1_path[0], (t-walk_period/4.0)*4.0/walk_period),
 8003ce2:	eeb0 8a40 	vmov.f32	s16, s0
 8003ce6:	eef0 8a60 	vmov.f32	s17, s1
				   	   	   getVal_cubicCurve(leg1_path[1], (t-walk_period/4.0)*4.0/walk_period),
 8003cea:	e9da 0100 	ldrd	r0, r1, [sl]
 8003cee:	f7fc fa8f 	bl	8000210 <__aeabi_dsub>
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	4b62      	ldr	r3, [pc, #392]	; (8003e80 <TIM7_IRQHandler+0x970>)
 8003cf6:	f7fc fc3f 	bl	8000578 <__aeabi_dmul>
		  leg1_setPosition(getVal_cubicCurve(leg1_path[0], (t-walk_period/4.0)*4.0/walk_period),
 8003cfa:	ed97 1b0a 	vldr	d1, [r7, #40]	; 0x28
 8003cfe:	ec41 0b14 	vmov	d4, r0, r1
 8003d02:	ed97 2b0c 	vldr	d2, [r7, #48]	; 0x30
 8003d06:	ed97 3b0e 	vldr	d3, [r7, #56]	; 0x38
 8003d0a:	ed97 0b08 	vldr	d0, [r7, #32]
 8003d0e:	f7fe ffbf 	bl	8002c90 <getVal_cubicCurve>
						   getVal_cubicCurve(leg1_path[2], (t-walk_period/4.0)*4.0/walk_period));
 8003d12:	2200      	movs	r2, #0
 8003d14:	4b59      	ldr	r3, [pc, #356]	; (8003e7c <TIM7_IRQHandler+0x96c>)
		  leg1_setPosition(getVal_cubicCurve(leg1_path[0], (t-walk_period/4.0)*4.0/walk_period),
 8003d16:	eeb0 9a40 	vmov.f32	s18, s0
 8003d1a:	eef0 9a60 	vmov.f32	s19, s1
						   getVal_cubicCurve(leg1_path[2], (t-walk_period/4.0)*4.0/walk_period));
 8003d1e:	e9da 0100 	ldrd	r0, r1, [sl]
 8003d22:	f7fc fa75 	bl	8000210 <__aeabi_dsub>
 8003d26:	2200      	movs	r2, #0
 8003d28:	4b55      	ldr	r3, [pc, #340]	; (8003e80 <TIM7_IRQHandler+0x970>)
 8003d2a:	f7fc fc25 	bl	8000578 <__aeabi_dmul>
		  leg1_setPosition(getVal_cubicCurve(leg1_path[0], (t-walk_period/4.0)*4.0/walk_period),
 8003d2e:	ed97 3b16 	vldr	d3, [r7, #88]	; 0x58
 8003d32:	ec41 0b14 	vmov	d4, r0, r1
 8003d36:	ed97 1b12 	vldr	d1, [r7, #72]	; 0x48
 8003d3a:	ed97 2b14 	vldr	d2, [r7, #80]	; 0x50
 8003d3e:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 8003d42:	f7fe ffa5 	bl	8002c90 <getVal_cubicCurve>
 8003d46:	eeb0 1a49 	vmov.f32	s2, s18
 8003d4a:	eef0 1a69 	vmov.f32	s3, s19
 8003d4e:	eeb0 2a40 	vmov.f32	s4, s0
 8003d52:	eef0 2a60 	vmov.f32	s5, s1
 8003d56:	eeb0 0a48 	vmov.f32	s0, s16
 8003d5a:	eef0 0a68 	vmov.f32	s1, s17
 8003d5e:	f7fe fa77 	bl	8002250 <leg1_setPosition>
		  leg2_setPosition(getVal_cubicCurve(leg2_path[0], (t-walk_period/4.0)*4.0/walk_period),
 8003d62:	2200      	movs	r2, #0
 8003d64:	4b45      	ldr	r3, [pc, #276]	; (8003e7c <TIM7_IRQHandler+0x96c>)
 8003d66:	e9da 0100 	ldrd	r0, r1, [sl]
 8003d6a:	f7fc fa51 	bl	8000210 <__aeabi_dsub>
 8003d6e:	2200      	movs	r2, #0
 8003d70:	4b43      	ldr	r3, [pc, #268]	; (8003e80 <TIM7_IRQHandler+0x970>)
 8003d72:	f7fc fc01 	bl	8000578 <__aeabi_dmul>
 8003d76:	ed96 1b02 	vldr	d1, [r6, #8]
 8003d7a:	ec41 0b14 	vmov	d4, r0, r1
 8003d7e:	ed96 2b04 	vldr	d2, [r6, #16]
 8003d82:	ed96 3b06 	vldr	d3, [r6, #24]
 8003d86:	ed96 0b00 	vldr	d0, [r6]
 8003d8a:	f7fe ff81 	bl	8002c90 <getVal_cubicCurve>
				   	   	   getVal_cubicCurve(leg2_path[1], (t-walk_period/4.0)*4.0/walk_period),
 8003d8e:	2200      	movs	r2, #0
 8003d90:	4b3a      	ldr	r3, [pc, #232]	; (8003e7c <TIM7_IRQHandler+0x96c>)
		  leg2_setPosition(getVal_cubicCurve(leg2_path[0], (t-walk_period/4.0)*4.0/walk_period),
 8003d92:	eeb0 8a40 	vmov.f32	s16, s0
 8003d96:	eef0 8a60 	vmov.f32	s17, s1
				   	   	   getVal_cubicCurve(leg2_path[1], (t-walk_period/4.0)*4.0/walk_period),
 8003d9a:	e9da 0100 	ldrd	r0, r1, [sl]
 8003d9e:	f7fc fa37 	bl	8000210 <__aeabi_dsub>
 8003da2:	2200      	movs	r2, #0
 8003da4:	4b36      	ldr	r3, [pc, #216]	; (8003e80 <TIM7_IRQHandler+0x970>)
 8003da6:	f7fc fbe7 	bl	8000578 <__aeabi_dmul>
		  leg2_setPosition(getVal_cubicCurve(leg2_path[0], (t-walk_period/4.0)*4.0/walk_period),
 8003daa:	ed96 1b0a 	vldr	d1, [r6, #40]	; 0x28
 8003dae:	ec41 0b14 	vmov	d4, r0, r1
 8003db2:	ed96 2b0c 	vldr	d2, [r6, #48]	; 0x30
 8003db6:	ed96 3b0e 	vldr	d3, [r6, #56]	; 0x38
 8003dba:	ed96 0b08 	vldr	d0, [r6, #32]
 8003dbe:	f7fe ff67 	bl	8002c90 <getVal_cubicCurve>
						   getVal_cubicCurve(leg2_path[2], (t-walk_period/4.0)*4.0/walk_period));
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	4b2d      	ldr	r3, [pc, #180]	; (8003e7c <TIM7_IRQHandler+0x96c>)
		  leg2_setPosition(getVal_cubicCurve(leg2_path[0], (t-walk_period/4.0)*4.0/walk_period),
 8003dc6:	eeb0 9a40 	vmov.f32	s18, s0
 8003dca:	eef0 9a60 	vmov.f32	s19, s1
						   getVal_cubicCurve(leg2_path[2], (t-walk_period/4.0)*4.0/walk_period));
 8003dce:	e9da 0100 	ldrd	r0, r1, [sl]
 8003dd2:	f7fc fa1d 	bl	8000210 <__aeabi_dsub>
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	4b29      	ldr	r3, [pc, #164]	; (8003e80 <TIM7_IRQHandler+0x970>)
 8003dda:	f7fc fbcd 	bl	8000578 <__aeabi_dmul>
		  leg2_setPosition(getVal_cubicCurve(leg2_path[0], (t-walk_period/4.0)*4.0/walk_period),
 8003dde:	ed96 3b16 	vldr	d3, [r6, #88]	; 0x58
 8003de2:	ec41 0b14 	vmov	d4, r0, r1
 8003de6:	ed96 1b12 	vldr	d1, [r6, #72]	; 0x48
 8003dea:	ed96 2b14 	vldr	d2, [r6, #80]	; 0x50
 8003dee:	ed96 0b10 	vldr	d0, [r6, #64]	; 0x40
 8003df2:	f7fe ff4d 	bl	8002c90 <getVal_cubicCurve>
 8003df6:	e045      	b.n	8003e84 <TIM7_IRQHandler+0x974>
 8003df8:	147ae148 	.word	0x147ae148
 8003dfc:	3fd147ae 	.word	0x3fd147ae
 8003e00:	00000000 	.word	0x00000000
 8003e04:	c0240000 	.word	0xc0240000
 8003e08:	00000000 	.word	0x00000000
 8003e0c:	c0280000 	.word	0xc0280000
 8003e10:	00000000 	.word	0x00000000
 8003e14:	c0000000 	.word	0xc0000000
 8003e18:	9999999a 	.word	0x9999999a
 8003e1c:	c0381999 	.word	0xc0381999
	...
 8003e28:	33333333 	.word	0x33333333
 8003e2c:	c02c3333 	.word	0xc02c3333
 8003e30:	00000000 	.word	0x00000000
 8003e34:	40240000 	.word	0x40240000
 8003e38:	cccccccd 	.word	0xcccccccd
 8003e3c:	c0632ccc 	.word	0xc0632ccc
 8003e40:	cccccccd 	.word	0xcccccccd
 8003e44:	c0628ccc 	.word	0xc0628ccc
 8003e48:	00000000 	.word	0x00000000
 8003e4c:	c0360000 	.word	0xc0360000
 8003e50:	33333334 	.word	0x33333334
 8003e54:	c02c3333 	.word	0xc02c3333
 8003e58:	66666668 	.word	0x66666668
 8003e5c:	c0106666 	.word	0xc0106666
 8003e60:	00000000 	.word	0x00000000
 8003e64:	c0400000 	.word	0xc0400000
 8003e68:	00000000 	.word	0x00000000
 8003e6c:	c0490000 	.word	0xc0490000
 8003e70:	00000000 	.word	0x00000000
 8003e74:	40490000 	.word	0x40490000
 8003e78:	3fe00000 	.word	0x3fe00000
 8003e7c:	3fd00000 	.word	0x3fd00000
 8003e80:	40100000 	.word	0x40100000
 8003e84:	eeb0 1a49 	vmov.f32	s2, s18
 8003e88:	eef0 1a69 	vmov.f32	s3, s19
 8003e8c:	eeb0 2a40 	vmov.f32	s4, s0
 8003e90:	eef0 2a60 	vmov.f32	s5, s1
 8003e94:	eeb0 0a48 	vmov.f32	s0, s16
 8003e98:	eef0 0a68 	vmov.f32	s1, s17
 8003e9c:	f7fe fb24 	bl	80024e8 <leg2_setPosition>
		  leg3_setPosition(getVal_cubicCurve(leg3_path[0], (t-walk_period/4.0)*4.0/walk_period),
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	4b4a      	ldr	r3, [pc, #296]	; (8003fcc <TIM7_IRQHandler+0xabc>)
 8003ea4:	e9da 0100 	ldrd	r0, r1, [sl]
 8003ea8:	f7fc f9b2 	bl	8000210 <__aeabi_dsub>
 8003eac:	2200      	movs	r2, #0
 8003eae:	4b48      	ldr	r3, [pc, #288]	; (8003fd0 <TIM7_IRQHandler+0xac0>)
 8003eb0:	f7fc fb62 	bl	8000578 <__aeabi_dmul>
 8003eb4:	ed95 1b02 	vldr	d1, [r5, #8]
 8003eb8:	ec41 0b14 	vmov	d4, r0, r1
 8003ebc:	ed95 2b04 	vldr	d2, [r5, #16]
 8003ec0:	ed95 3b06 	vldr	d3, [r5, #24]
 8003ec4:	ed95 0b00 	vldr	d0, [r5]
 8003ec8:	f7fe fee2 	bl	8002c90 <getVal_cubicCurve>
				   	   	   getVal_cubicCurve(leg3_path[1], (t-walk_period/4.0)*4.0/walk_period),
 8003ecc:	2200      	movs	r2, #0
 8003ece:	4b3f      	ldr	r3, [pc, #252]	; (8003fcc <TIM7_IRQHandler+0xabc>)
		  leg3_setPosition(getVal_cubicCurve(leg3_path[0], (t-walk_period/4.0)*4.0/walk_period),
 8003ed0:	eeb0 8a40 	vmov.f32	s16, s0
 8003ed4:	eef0 8a60 	vmov.f32	s17, s1
				   	   	   getVal_cubicCurve(leg3_path[1], (t-walk_period/4.0)*4.0/walk_period),
 8003ed8:	e9da 0100 	ldrd	r0, r1, [sl]
 8003edc:	f7fc f998 	bl	8000210 <__aeabi_dsub>
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	4b3b      	ldr	r3, [pc, #236]	; (8003fd0 <TIM7_IRQHandler+0xac0>)
 8003ee4:	f7fc fb48 	bl	8000578 <__aeabi_dmul>
		  leg3_setPosition(getVal_cubicCurve(leg3_path[0], (t-walk_period/4.0)*4.0/walk_period),
 8003ee8:	ed95 1b0a 	vldr	d1, [r5, #40]	; 0x28
 8003eec:	ec41 0b14 	vmov	d4, r0, r1
 8003ef0:	ed95 2b0c 	vldr	d2, [r5, #48]	; 0x30
 8003ef4:	ed95 3b0e 	vldr	d3, [r5, #56]	; 0x38
 8003ef8:	ed95 0b08 	vldr	d0, [r5, #32]
 8003efc:	f7fe fec8 	bl	8002c90 <getVal_cubicCurve>
						   getVal_cubicCurve(leg3_path[2], (t-walk_period/4.0)*4.0/walk_period));
 8003f00:	2200      	movs	r2, #0
 8003f02:	4b32      	ldr	r3, [pc, #200]	; (8003fcc <TIM7_IRQHandler+0xabc>)
		  leg3_setPosition(getVal_cubicCurve(leg3_path[0], (t-walk_period/4.0)*4.0/walk_period),
 8003f04:	eeb0 9a40 	vmov.f32	s18, s0
 8003f08:	eef0 9a60 	vmov.f32	s19, s1
						   getVal_cubicCurve(leg3_path[2], (t-walk_period/4.0)*4.0/walk_period));
 8003f0c:	e9da 0100 	ldrd	r0, r1, [sl]
 8003f10:	f7fc f97e 	bl	8000210 <__aeabi_dsub>
 8003f14:	2200      	movs	r2, #0
 8003f16:	4b2e      	ldr	r3, [pc, #184]	; (8003fd0 <TIM7_IRQHandler+0xac0>)
 8003f18:	f7fc fb2e 	bl	8000578 <__aeabi_dmul>
		  leg3_setPosition(getVal_cubicCurve(leg3_path[0], (t-walk_period/4.0)*4.0/walk_period),
 8003f1c:	ed95 3b16 	vldr	d3, [r5, #88]	; 0x58
 8003f20:	ec41 0b14 	vmov	d4, r0, r1
 8003f24:	ed95 1b12 	vldr	d1, [r5, #72]	; 0x48
 8003f28:	ed95 2b14 	vldr	d2, [r5, #80]	; 0x50
 8003f2c:	ed95 0b10 	vldr	d0, [r5, #64]	; 0x40
 8003f30:	f7fe feae 	bl	8002c90 <getVal_cubicCurve>
 8003f34:	eeb0 1a49 	vmov.f32	s2, s18
 8003f38:	eef0 1a69 	vmov.f32	s3, s19
 8003f3c:	eeb0 2a40 	vmov.f32	s4, s0
 8003f40:	eef0 2a60 	vmov.f32	s5, s1
 8003f44:	eeb0 0a48 	vmov.f32	s0, s16
 8003f48:	eef0 0a68 	vmov.f32	s1, s17
 8003f4c:	f7fe fc18 	bl	8002780 <leg3_setPosition>
		  leg4_setPosition(getVal_cubicCurve(leg4_path[0], (t-walk_period/4.0)*4.0/walk_period),
 8003f50:	2200      	movs	r2, #0
 8003f52:	4b1e      	ldr	r3, [pc, #120]	; (8003fcc <TIM7_IRQHandler+0xabc>)
 8003f54:	e9da 0100 	ldrd	r0, r1, [sl]
 8003f58:	f7fc f95a 	bl	8000210 <__aeabi_dsub>
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	4b1c      	ldr	r3, [pc, #112]	; (8003fd0 <TIM7_IRQHandler+0xac0>)
 8003f60:	f7fc fb0a 	bl	8000578 <__aeabi_dmul>
 8003f64:	ed94 1b02 	vldr	d1, [r4, #8]
 8003f68:	ec41 0b14 	vmov	d4, r0, r1
 8003f6c:	ed94 2b04 	vldr	d2, [r4, #16]
 8003f70:	ed94 3b06 	vldr	d3, [r4, #24]
 8003f74:	ed94 0b00 	vldr	d0, [r4]
 8003f78:	f7fe fe8a 	bl	8002c90 <getVal_cubicCurve>
				   	   	   getVal_cubicCurve(leg4_path[1], (t-walk_period/4.0)*4.0/walk_period),
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	4b13      	ldr	r3, [pc, #76]	; (8003fcc <TIM7_IRQHandler+0xabc>)
		  leg4_setPosition(getVal_cubicCurve(leg4_path[0], (t-walk_period/4.0)*4.0/walk_period),
 8003f80:	eeb0 8a40 	vmov.f32	s16, s0
 8003f84:	eef0 8a60 	vmov.f32	s17, s1
				   	   	   getVal_cubicCurve(leg4_path[1], (t-walk_period/4.0)*4.0/walk_period),
 8003f88:	e9da 0100 	ldrd	r0, r1, [sl]
 8003f8c:	f7fc f940 	bl	8000210 <__aeabi_dsub>
 8003f90:	2200      	movs	r2, #0
 8003f92:	4b0f      	ldr	r3, [pc, #60]	; (8003fd0 <TIM7_IRQHandler+0xac0>)
 8003f94:	f7fc faf0 	bl	8000578 <__aeabi_dmul>
		  leg4_setPosition(getVal_cubicCurve(leg4_path[0], (t-walk_period/4.0)*4.0/walk_period),
 8003f98:	ed94 0b08 	vldr	d0, [r4, #32]
 8003f9c:	ec41 0b14 	vmov	d4, r0, r1
 8003fa0:	ed94 1b0a 	vldr	d1, [r4, #40]	; 0x28
 8003fa4:	ed94 2b0c 	vldr	d2, [r4, #48]	; 0x30
 8003fa8:	ed94 3b0e 	vldr	d3, [r4, #56]	; 0x38
 8003fac:	f7fe fe70 	bl	8002c90 <getVal_cubicCurve>
						   getVal_cubicCurve(leg4_path[2], (t-walk_period/4.0)*4.0/walk_period));
 8003fb0:	4b06      	ldr	r3, [pc, #24]	; (8003fcc <TIM7_IRQHandler+0xabc>)
		  leg4_setPosition(getVal_cubicCurve(leg4_path[0], (t-walk_period/4.0)*4.0/walk_period),
 8003fb2:	eeb0 9a40 	vmov.f32	s18, s0
 8003fb6:	eef0 9a60 	vmov.f32	s19, s1
						   getVal_cubicCurve(leg4_path[2], (t-walk_period/4.0)*4.0/walk_period));
 8003fba:	2200      	movs	r2, #0
						   getVal_cubicCurve(leg4_path[2], (t-walk_period*3.0/4.0)*4.0/walk_period));
 8003fbc:	e9da 0100 	ldrd	r0, r1, [sl]
 8003fc0:	f7fc f926 	bl	8000210 <__aeabi_dsub>
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	4b02      	ldr	r3, [pc, #8]	; (8003fd0 <TIM7_IRQHandler+0xac0>)
 8003fc8:	e514      	b.n	80039f4 <TIM7_IRQHandler+0x4e4>
 8003fca:	bf00      	nop
 8003fcc:	3fd00000 	.word	0x3fd00000
 8003fd0:	40100000 	.word	0x40100000
	  }else if (t < walk_period*3.0/4.0){
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	4bf0      	ldr	r3, [pc, #960]	; (8004398 <TIM7_IRQHandler+0xe88>)
 8003fd8:	4640      	mov	r0, r8
 8003fda:	4649      	mov	r1, r9
 8003fdc:	f7fc fd3e 	bl	8000a5c <__aeabi_dcmplt>
 8003fe0:	2800      	cmp	r0, #0
 8003fe2:	f000 8281 	beq.w	80044e8 <TIM7_IRQHandler+0xfd8>
		  if (t < walk_period*2.0/4.0 + 0.020){
 8003fe6:	a3cc      	add	r3, pc, #816	; (adr r3, 8004318 <TIM7_IRQHandler+0xe08>)
 8003fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fec:	4640      	mov	r0, r8
 8003fee:	4649      	mov	r1, r9
 8003ff0:	f7fc fd34 	bl	8000a5c <__aeabi_dcmplt>
 8003ff4:	2800      	cmp	r0, #0
 8003ff6:	f000 80ea 	beq.w	80041ce <TIM7_IRQHandler+0xcbe>
			  leg4_path[0] = hermite(gp_x+stride_length/2.0, -stride_length/3.0, gp_x+stride_length/2.0-stride_length/3.0, -stride_length/3.0);
 8003ffa:	ed9f 3bc9 	vldr	d3, [pc, #804]	; 8004320 <TIM7_IRQHandler+0xe10>
 8003ffe:	ed9f 2bca 	vldr	d2, [pc, #808]	; 8004328 <TIM7_IRQHandler+0xe18>
 8004002:	eeb0 1a43 	vmov.f32	s2, s6
 8004006:	eef0 1a63 	vmov.f32	s3, s7
 800400a:	ed9f 0bc9 	vldr	d0, [pc, #804]	; 8004330 <TIM7_IRQHandler+0xe20>
 800400e:	f7fe fe87 	bl	8002d20 <hermite>
 8004012:	ed84 0b00 	vstr	d0, [r4]
 8004016:	ed84 1b02 	vstr	d1, [r4, #8]
		  	  leg4_path[1] = hermite(gp_y-(59.55-209.1/2.0+ground_width/2.0), runout_vel, gp_y-(59.55-209.1/2.0+ground_width/2.0)+runout_width/2.0, 0.0);
 800401a:	ed9f 0bc7 	vldr	d0, [pc, #796]	; 8004338 <TIM7_IRQHandler+0xe28>
 800401e:	ed9f 1bc8 	vldr	d1, [pc, #800]	; 8004340 <TIM7_IRQHandler+0xe30>
			  leg4_path[0] = hermite(gp_x+stride_length/2.0, -stride_length/3.0, gp_x+stride_length/2.0-stride_length/3.0, -stride_length/3.0);
 8004022:	ed84 2b04 	vstr	d2, [r4, #16]
 8004026:	ed84 3b06 	vstr	d3, [r4, #24]
		  	  leg4_path[1] = hermite(gp_y-(59.55-209.1/2.0+ground_width/2.0), runout_vel, gp_y-(59.55-209.1/2.0+ground_width/2.0)+runout_width/2.0, 0.0);
 800402a:	ed9f 2bc7 	vldr	d2, [pc, #796]	; 8004348 <TIM7_IRQHandler+0xe38>
 800402e:	ed9f 3bc8 	vldr	d3, [pc, #800]	; 8004350 <TIM7_IRQHandler+0xe40>
 8004032:	f7fe fe75 	bl	8002d20 <hermite>
 8004036:	ed84 3b0e 	vstr	d3, [r4, #56]	; 0x38
		  	  leg4_path[2] = hermite(-height-up_body, 0.0, -height, 0.0);
 800403a:	ed9f 3bc5 	vldr	d3, [pc, #788]	; 8004350 <TIM7_IRQHandler+0xe40>
		  	  leg4_path[1] = hermite(gp_y-(59.55-209.1/2.0+ground_width/2.0), runout_vel, gp_y-(59.55-209.1/2.0+ground_width/2.0)+runout_width/2.0, 0.0);
 800403e:	ed84 0b08 	vstr	d0, [r4, #32]
 8004042:	ed84 1b0a 	vstr	d1, [r4, #40]	; 0x28
		  	  leg4_path[2] = hermite(-height-up_body, 0.0, -height, 0.0);
 8004046:	eeb0 1a43 	vmov.f32	s2, s6
 800404a:	eef0 1a63 	vmov.f32	s3, s7
 800404e:	ed9f 0bc2 	vldr	d0, [pc, #776]	; 8004358 <TIM7_IRQHandler+0xe48>
		  	  leg4_path[1] = hermite(gp_y-(59.55-209.1/2.0+ground_width/2.0), runout_vel, gp_y-(59.55-209.1/2.0+ground_width/2.0)+runout_width/2.0, 0.0);
 8004052:	ed84 2b0c 	vstr	d2, [r4, #48]	; 0x30
		  	  leg4_path[2] = hermite(-height-up_body, 0.0, -height, 0.0);
 8004056:	ed9f 2bc2 	vldr	d2, [pc, #776]	; 8004360 <TIM7_IRQHandler+0xe50>
 800405a:	f7fe fe61 	bl	8002d20 <hermite>
 800405e:	ed84 3b16 	vstr	d3, [r4, #88]	; 0x58
			  leg3_path[0] = hermite(gp_x+stride_length/2.0-stride_length/3.0, -stride_length/3.0, gp_x+stride_length/2.0-2.0*stride_length/3.0, -stride_length/3.0);
 8004062:	ed9f 3baf 	vldr	d3, [pc, #700]	; 8004320 <TIM7_IRQHandler+0xe10>
		  	  leg4_path[2] = hermite(-height-up_body, 0.0, -height, 0.0);
 8004066:	ed84 0b10 	vstr	d0, [r4, #64]	; 0x40
 800406a:	ed84 1b12 	vstr	d1, [r4, #72]	; 0x48
			  leg3_path[0] = hermite(gp_x+stride_length/2.0-stride_length/3.0, -stride_length/3.0, gp_x+stride_length/2.0-2.0*stride_length/3.0, -stride_length/3.0);
 800406e:	eeb0 1a43 	vmov.f32	s2, s6
 8004072:	eef0 1a63 	vmov.f32	s3, s7
 8004076:	ed9f 0bac 	vldr	d0, [pc, #688]	; 8004328 <TIM7_IRQHandler+0xe18>
		  	  leg4_path[2] = hermite(-height-up_body, 0.0, -height, 0.0);
 800407a:	ed84 2b14 	vstr	d2, [r4, #80]	; 0x50
			  leg3_path[0] = hermite(gp_x+stride_length/2.0-stride_length/3.0, -stride_length/3.0, gp_x+stride_length/2.0-2.0*stride_length/3.0, -stride_length/3.0);
 800407e:	ed9f 2bba 	vldr	d2, [pc, #744]	; 8004368 <TIM7_IRQHandler+0xe58>
 8004082:	f7fe fe4d 	bl	8002d20 <hermite>
 8004086:	ed85 0b00 	vstr	d0, [r5]
 800408a:	ed85 1b02 	vstr	d1, [r5, #8]
		  	  leg3_path[1] = hermite(gp_y-(59.55-209.1/2.0+ground_width/2.0), runout_vel, gp_y-(59.55-209.1/2.0+ground_width/2.0)+runout_width/2.0, 0.0);
 800408e:	ed9f 0baa 	vldr	d0, [pc, #680]	; 8004338 <TIM7_IRQHandler+0xe28>
 8004092:	ed9f 1bab 	vldr	d1, [pc, #684]	; 8004340 <TIM7_IRQHandler+0xe30>
			  leg3_path[0] = hermite(gp_x+stride_length/2.0-stride_length/3.0, -stride_length/3.0, gp_x+stride_length/2.0-2.0*stride_length/3.0, -stride_length/3.0);
 8004096:	ed85 2b04 	vstr	d2, [r5, #16]
 800409a:	ed85 3b06 	vstr	d3, [r5, #24]
		  	  leg3_path[1] = hermite(gp_y-(59.55-209.1/2.0+ground_width/2.0), runout_vel, gp_y-(59.55-209.1/2.0+ground_width/2.0)+runout_width/2.0, 0.0);
 800409e:	ed9f 2baa 	vldr	d2, [pc, #680]	; 8004348 <TIM7_IRQHandler+0xe38>
 80040a2:	ed9f 3bab 	vldr	d3, [pc, #684]	; 8004350 <TIM7_IRQHandler+0xe40>
 80040a6:	f7fe fe3b 	bl	8002d20 <hermite>
 80040aa:	ed85 2b0c 	vstr	d2, [r5, #48]	; 0x30
 80040ae:	ed85 3b0e 	vstr	d3, [r5, #56]	; 0x38
		  	  leg3_path[2] = hermite(-height, 0.0, -height, 0.0);
 80040b2:	ed9f 2bab 	vldr	d2, [pc, #684]	; 8004360 <TIM7_IRQHandler+0xe50>
 80040b6:	ed9f 3ba6 	vldr	d3, [pc, #664]	; 8004350 <TIM7_IRQHandler+0xe40>
		  	  leg3_path[1] = hermite(gp_y-(59.55-209.1/2.0+ground_width/2.0), runout_vel, gp_y-(59.55-209.1/2.0+ground_width/2.0)+runout_width/2.0, 0.0);
 80040ba:	ed85 0b08 	vstr	d0, [r5, #32]
		  	  leg3_path[2] = hermite(-height, 0.0, -height, 0.0);
 80040be:	eeb0 0a42 	vmov.f32	s0, s4
 80040c2:	eef0 0a62 	vmov.f32	s1, s5
		  	  leg3_path[1] = hermite(gp_y-(59.55-209.1/2.0+ground_width/2.0), runout_vel, gp_y-(59.55-209.1/2.0+ground_width/2.0)+runout_width/2.0, 0.0);
 80040c6:	ed85 1b0a 	vstr	d1, [r5, #40]	; 0x28
		  	  leg3_path[2] = hermite(-height, 0.0, -height, 0.0);
 80040ca:	eeb0 1a43 	vmov.f32	s2, s6
 80040ce:	eef0 1a63 	vmov.f32	s3, s7
 80040d2:	f7fe fe25 	bl	8002d20 <hermite>
 80040d6:	ed85 3b16 	vstr	d3, [r5, #88]	; 0x58
		  	  leg1_path[0] = hermite(gp_x+stride_length/2.0-2.0*stride_length/3.0, -stride_length/3.0, gp_x-stride_length/2.0, -stride_length/3.0);
 80040da:	ed9f 3b91 	vldr	d3, [pc, #580]	; 8004320 <TIM7_IRQHandler+0xe10>
		  	  leg3_path[2] = hermite(-height, 0.0, -height, 0.0);
 80040de:	ed85 0b10 	vstr	d0, [r5, #64]	; 0x40
 80040e2:	ed85 1b12 	vstr	d1, [r5, #72]	; 0x48
		  	  leg1_path[0] = hermite(gp_x+stride_length/2.0-2.0*stride_length/3.0, -stride_length/3.0, gp_x-stride_length/2.0, -stride_length/3.0);
 80040e6:	eeb0 1a43 	vmov.f32	s2, s6
 80040ea:	eef0 1a63 	vmov.f32	s3, s7
 80040ee:	ed9f 0b9e 	vldr	d0, [pc, #632]	; 8004368 <TIM7_IRQHandler+0xe58>
		  	  leg3_path[2] = hermite(-height, 0.0, -height, 0.0);
 80040f2:	ed85 2b14 	vstr	d2, [r5, #80]	; 0x50
		  	  leg1_path[0] = hermite(gp_x+stride_length/2.0-2.0*stride_length/3.0, -stride_length/3.0, gp_x-stride_length/2.0, -stride_length/3.0);
 80040f6:	ed9f 2b9e 	vldr	d2, [pc, #632]	; 8004370 <TIM7_IRQHandler+0xe60>
 80040fa:	f7fe fe11 	bl	8002d20 <hermite>
 80040fe:	ed87 0b00 	vstr	d0, [r7]
 8004102:	ed87 1b02 	vstr	d1, [r7, #8]
		  	  leg1_path[1] = hermite(gp_y+59.55-209.1/2.0+ground_width/2.0, runout_vel, gp_y+59.55-209.1/2.0+ground_width/2.0+runout_width/2.0, 0.0);
 8004106:	ed9f 0b9c 	vldr	d0, [pc, #624]	; 8004378 <TIM7_IRQHandler+0xe68>
 800410a:	ed9f 1b8d 	vldr	d1, [pc, #564]	; 8004340 <TIM7_IRQHandler+0xe30>
		  	  leg1_path[0] = hermite(gp_x+stride_length/2.0-2.0*stride_length/3.0, -stride_length/3.0, gp_x-stride_length/2.0, -stride_length/3.0);
 800410e:	ed87 2b04 	vstr	d2, [r7, #16]
 8004112:	ed87 3b06 	vstr	d3, [r7, #24]
		  	  leg1_path[1] = hermite(gp_y+59.55-209.1/2.0+ground_width/2.0, runout_vel, gp_y+59.55-209.1/2.0+ground_width/2.0+runout_width/2.0, 0.0);
 8004116:	ed9f 2b9a 	vldr	d2, [pc, #616]	; 8004380 <TIM7_IRQHandler+0xe70>
 800411a:	ed9f 3b8d 	vldr	d3, [pc, #564]	; 8004350 <TIM7_IRQHandler+0xe40>
 800411e:	f7fe fdff 	bl	8002d20 <hermite>
 8004122:	ed87 2b0c 	vstr	d2, [r7, #48]	; 0x30
 8004126:	ed87 3b0e 	vstr	d3, [r7, #56]	; 0x38
		  	  leg1_path[2] = hermite(-height, 0.0, -height, 0.0);
 800412a:	ed9f 2b8d 	vldr	d2, [pc, #564]	; 8004360 <TIM7_IRQHandler+0xe50>
 800412e:	ed9f 3b88 	vldr	d3, [pc, #544]	; 8004350 <TIM7_IRQHandler+0xe40>
		  	  leg1_path[1] = hermite(gp_y+59.55-209.1/2.0+ground_width/2.0, runout_vel, gp_y+59.55-209.1/2.0+ground_width/2.0+runout_width/2.0, 0.0);
 8004132:	ed87 0b08 	vstr	d0, [r7, #32]
		  	  leg1_path[2] = hermite(-height, 0.0, -height, 0.0);
 8004136:	eeb0 0a42 	vmov.f32	s0, s4
 800413a:	eef0 0a62 	vmov.f32	s1, s5
		  	  leg1_path[1] = hermite(gp_y+59.55-209.1/2.0+ground_width/2.0, runout_vel, gp_y+59.55-209.1/2.0+ground_width/2.0+runout_width/2.0, 0.0);
 800413e:	ed87 1b0a 	vstr	d1, [r7, #40]	; 0x28
		  	  leg1_path[2] = hermite(-height, 0.0, -height, 0.0);
 8004142:	eeb0 1a43 	vmov.f32	s2, s6
 8004146:	eef0 1a63 	vmov.f32	s3, s7
 800414a:	f7fe fde9 	bl	8002d20 <hermite>
 800414e:	ed87 3b16 	vstr	d3, [r7, #88]	; 0x58
			  leg2_path[0] = hermite(gp_x-stride_length/2.0, 0.0, gp_x+stride_length/2.0, 0.0);
 8004152:	ed9f 3b7f 	vldr	d3, [pc, #508]	; 8004350 <TIM7_IRQHandler+0xe40>
		  	  leg1_path[2] = hermite(-height, 0.0, -height, 0.0);
 8004156:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
 800415a:	ed87 1b12 	vstr	d1, [r7, #72]	; 0x48
			  leg2_path[0] = hermite(gp_x-stride_length/2.0, 0.0, gp_x+stride_length/2.0, 0.0);
 800415e:	eeb0 1a43 	vmov.f32	s2, s6
 8004162:	eef0 1a63 	vmov.f32	s3, s7
 8004166:	ed9f 0b82 	vldr	d0, [pc, #520]	; 8004370 <TIM7_IRQHandler+0xe60>
		  	  leg1_path[2] = hermite(-height, 0.0, -height, 0.0);
 800416a:	ed87 2b14 	vstr	d2, [r7, #80]	; 0x50
			  leg2_path[0] = hermite(gp_x-stride_length/2.0, 0.0, gp_x+stride_length/2.0, 0.0);
 800416e:	ed9f 2b70 	vldr	d2, [pc, #448]	; 8004330 <TIM7_IRQHandler+0xe20>
 8004172:	f7fe fdd5 	bl	8002d20 <hermite>
 8004176:	ed86 0b00 	vstr	d0, [r6]
 800417a:	ed86 1b02 	vstr	d1, [r6, #8]
			  leg2_path[1] = hermite(gp_y+59.55-209.1/2.0+ground_width/2.0, runout_vel, gp_y+59.55-209.1/2.0+ground_width/2.0+runout_width/2.0, 0.0);
 800417e:	ed9f 0b7e 	vldr	d0, [pc, #504]	; 8004378 <TIM7_IRQHandler+0xe68>
 8004182:	ed9f 1b6f 	vldr	d1, [pc, #444]	; 8004340 <TIM7_IRQHandler+0xe30>
			  leg2_path[0] = hermite(gp_x-stride_length/2.0, 0.0, gp_x+stride_length/2.0, 0.0);
 8004186:	ed86 2b04 	vstr	d2, [r6, #16]
 800418a:	ed86 3b06 	vstr	d3, [r6, #24]
			  leg2_path[1] = hermite(gp_y+59.55-209.1/2.0+ground_width/2.0, runout_vel, gp_y+59.55-209.1/2.0+ground_width/2.0+runout_width/2.0, 0.0);
 800418e:	ed9f 2b7c 	vldr	d2, [pc, #496]	; 8004380 <TIM7_IRQHandler+0xe70>
 8004192:	ed9f 3b6f 	vldr	d3, [pc, #444]	; 8004350 <TIM7_IRQHandler+0xe40>
 8004196:	f7fe fdc3 	bl	8002d20 <hermite>
 800419a:	ed86 0b08 	vstr	d0, [r6, #32]
 800419e:	ed86 1b0a 	vstr	d1, [r6, #40]	; 0x28
 80041a2:	ed86 2b0c 	vstr	d2, [r6, #48]	; 0x30
 80041a6:	ed86 3b0e 	vstr	d3, [r6, #56]	; 0x38
			  leg2_path[2] = hermite(-height, lift_leg_vz, -height-up_body, -lift_leg_vz);
 80041aa:	ed9f 2b6b 	vldr	d2, [pc, #428]	; 8004358 <TIM7_IRQHandler+0xe48>
 80041ae:	ed9f 3b76 	vldr	d3, [pc, #472]	; 8004388 <TIM7_IRQHandler+0xe78>
 80041b2:	ed9f 1b77 	vldr	d1, [pc, #476]	; 8004390 <TIM7_IRQHandler+0xe80>
 80041b6:	ed9f 0b6a 	vldr	d0, [pc, #424]	; 8004360 <TIM7_IRQHandler+0xe50>
 80041ba:	f7fe fdb1 	bl	8002d20 <hermite>
 80041be:	ed86 0b10 	vstr	d0, [r6, #64]	; 0x40
 80041c2:	ed86 1b12 	vstr	d1, [r6, #72]	; 0x48
 80041c6:	ed86 2b14 	vstr	d2, [r6, #80]	; 0x50
 80041ca:	ed86 3b16 	vstr	d3, [r6, #88]	; 0x58
		  leg1_setPosition(getVal_cubicCurve(leg1_path[0], (t-walk_period*2.0/4.0)*4.0/walk_period),
 80041ce:	2200      	movs	r2, #0
 80041d0:	4b72      	ldr	r3, [pc, #456]	; (800439c <TIM7_IRQHandler+0xe8c>)
 80041d2:	e9da 0100 	ldrd	r0, r1, [sl]
 80041d6:	f7fc f81b 	bl	8000210 <__aeabi_dsub>
 80041da:	2200      	movs	r2, #0
 80041dc:	4b70      	ldr	r3, [pc, #448]	; (80043a0 <TIM7_IRQHandler+0xe90>)
 80041de:	f7fc f9cb 	bl	8000578 <__aeabi_dmul>
 80041e2:	ed97 1b02 	vldr	d1, [r7, #8]
 80041e6:	ec41 0b14 	vmov	d4, r0, r1
 80041ea:	ed97 2b04 	vldr	d2, [r7, #16]
 80041ee:	ed97 3b06 	vldr	d3, [r7, #24]
 80041f2:	ed97 0b00 	vldr	d0, [r7]
 80041f6:	f7fe fd4b 	bl	8002c90 <getVal_cubicCurve>
				   	   	   getVal_cubicCurve(leg1_path[1], (t-walk_period*2.0/4.0)*4.0/walk_period),
 80041fa:	2200      	movs	r2, #0
 80041fc:	4b67      	ldr	r3, [pc, #412]	; (800439c <TIM7_IRQHandler+0xe8c>)
		  leg1_setPosition(getVal_cubicCurve(leg1_path[0], (t-walk_period*2.0/4.0)*4.0/walk_period),
 80041fe:	eeb0 8a40 	vmov.f32	s16, s0
 8004202:	eef0 8a60 	vmov.f32	s17, s1
				   	   	   getVal_cubicCurve(leg1_path[1], (t-walk_period*2.0/4.0)*4.0/walk_period),
 8004206:	e9da 0100 	ldrd	r0, r1, [sl]
 800420a:	f7fc f801 	bl	8000210 <__aeabi_dsub>
 800420e:	2200      	movs	r2, #0
 8004210:	4b63      	ldr	r3, [pc, #396]	; (80043a0 <TIM7_IRQHandler+0xe90>)
 8004212:	f7fc f9b1 	bl	8000578 <__aeabi_dmul>
		  leg1_setPosition(getVal_cubicCurve(leg1_path[0], (t-walk_period*2.0/4.0)*4.0/walk_period),
 8004216:	ed97 1b0a 	vldr	d1, [r7, #40]	; 0x28
 800421a:	ec41 0b14 	vmov	d4, r0, r1
 800421e:	ed97 2b0c 	vldr	d2, [r7, #48]	; 0x30
 8004222:	ed97 3b0e 	vldr	d3, [r7, #56]	; 0x38
 8004226:	ed97 0b08 	vldr	d0, [r7, #32]
 800422a:	f7fe fd31 	bl	8002c90 <getVal_cubicCurve>
						   getVal_cubicCurve(leg1_path[2], (t-walk_period*2.0/4.0)*4.0/walk_period));
 800422e:	2200      	movs	r2, #0
 8004230:	4b5a      	ldr	r3, [pc, #360]	; (800439c <TIM7_IRQHandler+0xe8c>)
		  leg1_setPosition(getVal_cubicCurve(leg1_path[0], (t-walk_period*2.0/4.0)*4.0/walk_period),
 8004232:	eeb0 9a40 	vmov.f32	s18, s0
 8004236:	eef0 9a60 	vmov.f32	s19, s1
						   getVal_cubicCurve(leg1_path[2], (t-walk_period*2.0/4.0)*4.0/walk_period));
 800423a:	e9da 0100 	ldrd	r0, r1, [sl]
 800423e:	f7fb ffe7 	bl	8000210 <__aeabi_dsub>
 8004242:	2200      	movs	r2, #0
 8004244:	4b56      	ldr	r3, [pc, #344]	; (80043a0 <TIM7_IRQHandler+0xe90>)
 8004246:	f7fc f997 	bl	8000578 <__aeabi_dmul>
		  leg1_setPosition(getVal_cubicCurve(leg1_path[0], (t-walk_period*2.0/4.0)*4.0/walk_period),
 800424a:	ed97 3b16 	vldr	d3, [r7, #88]	; 0x58
 800424e:	ec41 0b14 	vmov	d4, r0, r1
 8004252:	ed97 1b12 	vldr	d1, [r7, #72]	; 0x48
 8004256:	ed97 2b14 	vldr	d2, [r7, #80]	; 0x50
 800425a:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 800425e:	f7fe fd17 	bl	8002c90 <getVal_cubicCurve>
 8004262:	eeb0 1a49 	vmov.f32	s2, s18
 8004266:	eef0 1a69 	vmov.f32	s3, s19
 800426a:	eeb0 2a40 	vmov.f32	s4, s0
 800426e:	eef0 2a60 	vmov.f32	s5, s1
 8004272:	eeb0 0a48 	vmov.f32	s0, s16
 8004276:	eef0 0a68 	vmov.f32	s1, s17
 800427a:	f7fd ffe9 	bl	8002250 <leg1_setPosition>
		  leg2_setPosition(getVal_cubicCurve(leg2_path[0], (t-walk_period*2.0/4.0)*4.0/walk_period),
 800427e:	2200      	movs	r2, #0
 8004280:	4b46      	ldr	r3, [pc, #280]	; (800439c <TIM7_IRQHandler+0xe8c>)
 8004282:	e9da 0100 	ldrd	r0, r1, [sl]
 8004286:	f7fb ffc3 	bl	8000210 <__aeabi_dsub>
 800428a:	2200      	movs	r2, #0
 800428c:	4b44      	ldr	r3, [pc, #272]	; (80043a0 <TIM7_IRQHandler+0xe90>)
 800428e:	f7fc f973 	bl	8000578 <__aeabi_dmul>
 8004292:	ed96 1b02 	vldr	d1, [r6, #8]
 8004296:	ec41 0b14 	vmov	d4, r0, r1
 800429a:	ed96 2b04 	vldr	d2, [r6, #16]
 800429e:	ed96 3b06 	vldr	d3, [r6, #24]
 80042a2:	ed96 0b00 	vldr	d0, [r6]
 80042a6:	f7fe fcf3 	bl	8002c90 <getVal_cubicCurve>
				   	   	   getVal_cubicCurve(leg2_path[1], (t-walk_period*2.0/4.0)*4.0/walk_period),
 80042aa:	2200      	movs	r2, #0
 80042ac:	4b3b      	ldr	r3, [pc, #236]	; (800439c <TIM7_IRQHandler+0xe8c>)
		  leg2_setPosition(getVal_cubicCurve(leg2_path[0], (t-walk_period*2.0/4.0)*4.0/walk_period),
 80042ae:	eeb0 8a40 	vmov.f32	s16, s0
 80042b2:	eef0 8a60 	vmov.f32	s17, s1
				   	   	   getVal_cubicCurve(leg2_path[1], (t-walk_period*2.0/4.0)*4.0/walk_period),
 80042b6:	e9da 0100 	ldrd	r0, r1, [sl]
 80042ba:	f7fb ffa9 	bl	8000210 <__aeabi_dsub>
 80042be:	2200      	movs	r2, #0
 80042c0:	4b37      	ldr	r3, [pc, #220]	; (80043a0 <TIM7_IRQHandler+0xe90>)
 80042c2:	f7fc f959 	bl	8000578 <__aeabi_dmul>
		  leg2_setPosition(getVal_cubicCurve(leg2_path[0], (t-walk_period*2.0/4.0)*4.0/walk_period),
 80042c6:	ed96 1b0a 	vldr	d1, [r6, #40]	; 0x28
 80042ca:	ec41 0b14 	vmov	d4, r0, r1
 80042ce:	ed96 2b0c 	vldr	d2, [r6, #48]	; 0x30
 80042d2:	ed96 3b0e 	vldr	d3, [r6, #56]	; 0x38
 80042d6:	ed96 0b08 	vldr	d0, [r6, #32]
 80042da:	f7fe fcd9 	bl	8002c90 <getVal_cubicCurve>
						   getVal_cubicCurve(leg2_path[2], (t-walk_period*2.0/4.0)*4.0/walk_period));
 80042de:	2200      	movs	r2, #0
 80042e0:	4b2e      	ldr	r3, [pc, #184]	; (800439c <TIM7_IRQHandler+0xe8c>)
		  leg2_setPosition(getVal_cubicCurve(leg2_path[0], (t-walk_period*2.0/4.0)*4.0/walk_period),
 80042e2:	eeb0 9a40 	vmov.f32	s18, s0
 80042e6:	eef0 9a60 	vmov.f32	s19, s1
						   getVal_cubicCurve(leg2_path[2], (t-walk_period*2.0/4.0)*4.0/walk_period));
 80042ea:	e9da 0100 	ldrd	r0, r1, [sl]
 80042ee:	f7fb ff8f 	bl	8000210 <__aeabi_dsub>
 80042f2:	2200      	movs	r2, #0
 80042f4:	4b2a      	ldr	r3, [pc, #168]	; (80043a0 <TIM7_IRQHandler+0xe90>)
 80042f6:	f7fc f93f 	bl	8000578 <__aeabi_dmul>
		  leg2_setPosition(getVal_cubicCurve(leg2_path[0], (t-walk_period*2.0/4.0)*4.0/walk_period),
 80042fa:	ed96 3b16 	vldr	d3, [r6, #88]	; 0x58
 80042fe:	ec41 0b14 	vmov	d4, r0, r1
 8004302:	ed96 1b12 	vldr	d1, [r6, #72]	; 0x48
 8004306:	ed96 2b14 	vldr	d2, [r6, #80]	; 0x50
 800430a:	ed96 0b10 	vldr	d0, [r6, #64]	; 0x40
 800430e:	f7fe fcbf 	bl	8002c90 <getVal_cubicCurve>
 8004312:	e047      	b.n	80043a4 <TIM7_IRQHandler+0xe94>
 8004314:	f3af 8000 	nop.w
 8004318:	0a3d70a4 	.word	0x0a3d70a4
 800431c:	3fe0a3d7 	.word	0x3fe0a3d7
 8004320:	00000000 	.word	0x00000000
 8004324:	c0240000 	.word	0xc0240000
 8004328:	00000000 	.word	0x00000000
 800432c:	c0280000 	.word	0xc0280000
 8004330:	00000000 	.word	0x00000000
 8004334:	c0000000 	.word	0xc0000000
 8004338:	33333333 	.word	0x33333333
 800433c:	c02c3333 	.word	0xc02c3333
 8004340:	00000000 	.word	0x00000000
 8004344:	40240000 	.word	0x40240000
 8004348:	66666666 	.word	0x66666666
 800434c:	c0106666 	.word	0xc0106666
	...
 8004358:	cccccccd 	.word	0xcccccccd
 800435c:	c0632ccc 	.word	0xc0632ccc
 8004360:	cccccccd 	.word	0xcccccccd
 8004364:	c0628ccc 	.word	0xc0628ccc
 8004368:	00000000 	.word	0x00000000
 800436c:	c0360000 	.word	0xc0360000
 8004370:	00000000 	.word	0x00000000
 8004374:	c0400000 	.word	0xc0400000
 8004378:	66666668 	.word	0x66666668
 800437c:	c0106666 	.word	0xc0106666
 8004380:	99999998 	.word	0x99999998
 8004384:	40179999 	.word	0x40179999
 8004388:	00000000 	.word	0x00000000
 800438c:	c0490000 	.word	0xc0490000
 8004390:	00000000 	.word	0x00000000
 8004394:	40490000 	.word	0x40490000
 8004398:	3fe80000 	.word	0x3fe80000
 800439c:	3fe00000 	.word	0x3fe00000
 80043a0:	40100000 	.word	0x40100000
 80043a4:	eeb0 1a49 	vmov.f32	s2, s18
 80043a8:	eef0 1a69 	vmov.f32	s3, s19
 80043ac:	eeb0 2a40 	vmov.f32	s4, s0
 80043b0:	eef0 2a60 	vmov.f32	s5, s1
 80043b4:	eeb0 0a48 	vmov.f32	s0, s16
 80043b8:	eef0 0a68 	vmov.f32	s1, s17
 80043bc:	f7fe f894 	bl	80024e8 <leg2_setPosition>
		  leg3_setPosition(getVal_cubicCurve(leg3_path[0], (t-walk_period*2.0/4.0)*4.0/walk_period),
 80043c0:	2200      	movs	r2, #0
 80043c2:	4b47      	ldr	r3, [pc, #284]	; (80044e0 <TIM7_IRQHandler+0xfd0>)
 80043c4:	e9da 0100 	ldrd	r0, r1, [sl]
 80043c8:	f7fb ff22 	bl	8000210 <__aeabi_dsub>
 80043cc:	2200      	movs	r2, #0
 80043ce:	4b45      	ldr	r3, [pc, #276]	; (80044e4 <TIM7_IRQHandler+0xfd4>)
 80043d0:	f7fc f8d2 	bl	8000578 <__aeabi_dmul>
 80043d4:	ed95 1b02 	vldr	d1, [r5, #8]
 80043d8:	ec41 0b14 	vmov	d4, r0, r1
 80043dc:	ed95 2b04 	vldr	d2, [r5, #16]
 80043e0:	ed95 3b06 	vldr	d3, [r5, #24]
 80043e4:	ed95 0b00 	vldr	d0, [r5]
 80043e8:	f7fe fc52 	bl	8002c90 <getVal_cubicCurve>
				   	   	   getVal_cubicCurve(leg3_path[1], (t-walk_period*2.0/4.0)*4.0/walk_period),
 80043ec:	2200      	movs	r2, #0
 80043ee:	4b3c      	ldr	r3, [pc, #240]	; (80044e0 <TIM7_IRQHandler+0xfd0>)
		  leg3_setPosition(getVal_cubicCurve(leg3_path[0], (t-walk_period*2.0/4.0)*4.0/walk_period),
 80043f0:	eeb0 8a40 	vmov.f32	s16, s0
 80043f4:	eef0 8a60 	vmov.f32	s17, s1
				   	   	   getVal_cubicCurve(leg3_path[1], (t-walk_period*2.0/4.0)*4.0/walk_period),
 80043f8:	e9da 0100 	ldrd	r0, r1, [sl]
 80043fc:	f7fb ff08 	bl	8000210 <__aeabi_dsub>
 8004400:	2200      	movs	r2, #0
 8004402:	4b38      	ldr	r3, [pc, #224]	; (80044e4 <TIM7_IRQHandler+0xfd4>)
 8004404:	f7fc f8b8 	bl	8000578 <__aeabi_dmul>
		  leg3_setPosition(getVal_cubicCurve(leg3_path[0], (t-walk_period*2.0/4.0)*4.0/walk_period),
 8004408:	ed95 1b0a 	vldr	d1, [r5, #40]	; 0x28
 800440c:	ec41 0b14 	vmov	d4, r0, r1
 8004410:	ed95 2b0c 	vldr	d2, [r5, #48]	; 0x30
 8004414:	ed95 3b0e 	vldr	d3, [r5, #56]	; 0x38
 8004418:	ed95 0b08 	vldr	d0, [r5, #32]
 800441c:	f7fe fc38 	bl	8002c90 <getVal_cubicCurve>
						   getVal_cubicCurve(leg3_path[2], (t-walk_period*2.0/4.0)*4.0/walk_period));
 8004420:	2200      	movs	r2, #0
 8004422:	4b2f      	ldr	r3, [pc, #188]	; (80044e0 <TIM7_IRQHandler+0xfd0>)
		  leg3_setPosition(getVal_cubicCurve(leg3_path[0], (t-walk_period*2.0/4.0)*4.0/walk_period),
 8004424:	eeb0 9a40 	vmov.f32	s18, s0
 8004428:	eef0 9a60 	vmov.f32	s19, s1
						   getVal_cubicCurve(leg3_path[2], (t-walk_period*2.0/4.0)*4.0/walk_period));
 800442c:	e9da 0100 	ldrd	r0, r1, [sl]
 8004430:	f7fb feee 	bl	8000210 <__aeabi_dsub>
 8004434:	2200      	movs	r2, #0
 8004436:	4b2b      	ldr	r3, [pc, #172]	; (80044e4 <TIM7_IRQHandler+0xfd4>)
 8004438:	f7fc f89e 	bl	8000578 <__aeabi_dmul>
		  leg3_setPosition(getVal_cubicCurve(leg3_path[0], (t-walk_period*2.0/4.0)*4.0/walk_period),
 800443c:	ed95 3b16 	vldr	d3, [r5, #88]	; 0x58
 8004440:	ec41 0b14 	vmov	d4, r0, r1
 8004444:	ed95 1b12 	vldr	d1, [r5, #72]	; 0x48
 8004448:	ed95 2b14 	vldr	d2, [r5, #80]	; 0x50
 800444c:	ed95 0b10 	vldr	d0, [r5, #64]	; 0x40
 8004450:	f7fe fc1e 	bl	8002c90 <getVal_cubicCurve>
 8004454:	eeb0 1a49 	vmov.f32	s2, s18
 8004458:	eef0 1a69 	vmov.f32	s3, s19
 800445c:	eeb0 2a40 	vmov.f32	s4, s0
 8004460:	eef0 2a60 	vmov.f32	s5, s1
 8004464:	eeb0 0a48 	vmov.f32	s0, s16
 8004468:	eef0 0a68 	vmov.f32	s1, s17
 800446c:	f7fe f988 	bl	8002780 <leg3_setPosition>
		  leg4_setPosition(getVal_cubicCurve(leg4_path[0], (t-walk_period*2.0/4.0)*4.0/walk_period),
 8004470:	2200      	movs	r2, #0
 8004472:	4b1b      	ldr	r3, [pc, #108]	; (80044e0 <TIM7_IRQHandler+0xfd0>)
 8004474:	e9da 0100 	ldrd	r0, r1, [sl]
 8004478:	f7fb feca 	bl	8000210 <__aeabi_dsub>
 800447c:	2200      	movs	r2, #0
 800447e:	4b19      	ldr	r3, [pc, #100]	; (80044e4 <TIM7_IRQHandler+0xfd4>)
 8004480:	f7fc f87a 	bl	8000578 <__aeabi_dmul>
 8004484:	ed94 1b02 	vldr	d1, [r4, #8]
 8004488:	ec41 0b14 	vmov	d4, r0, r1
 800448c:	ed94 2b04 	vldr	d2, [r4, #16]
 8004490:	ed94 3b06 	vldr	d3, [r4, #24]
 8004494:	ed94 0b00 	vldr	d0, [r4]
 8004498:	f7fe fbfa 	bl	8002c90 <getVal_cubicCurve>
				   	   	   getVal_cubicCurve(leg4_path[1], (t-walk_period*2.0/4.0)*4.0/walk_period),
 800449c:	2200      	movs	r2, #0
 800449e:	4b10      	ldr	r3, [pc, #64]	; (80044e0 <TIM7_IRQHandler+0xfd0>)
		  leg4_setPosition(getVal_cubicCurve(leg4_path[0], (t-walk_period*2.0/4.0)*4.0/walk_period),
 80044a0:	eeb0 8a40 	vmov.f32	s16, s0
 80044a4:	eef0 8a60 	vmov.f32	s17, s1
				   	   	   getVal_cubicCurve(leg4_path[1], (t-walk_period*2.0/4.0)*4.0/walk_period),
 80044a8:	e9da 0100 	ldrd	r0, r1, [sl]
 80044ac:	f7fb feb0 	bl	8000210 <__aeabi_dsub>
 80044b0:	2200      	movs	r2, #0
 80044b2:	4b0c      	ldr	r3, [pc, #48]	; (80044e4 <TIM7_IRQHandler+0xfd4>)
 80044b4:	f7fc f860 	bl	8000578 <__aeabi_dmul>
		  leg4_setPosition(getVal_cubicCurve(leg4_path[0], (t-walk_period*2.0/4.0)*4.0/walk_period),
 80044b8:	ed94 0b08 	vldr	d0, [r4, #32]
 80044bc:	ec41 0b14 	vmov	d4, r0, r1
 80044c0:	ed94 1b0a 	vldr	d1, [r4, #40]	; 0x28
 80044c4:	ed94 2b0c 	vldr	d2, [r4, #48]	; 0x30
 80044c8:	ed94 3b0e 	vldr	d3, [r4, #56]	; 0x38
 80044cc:	f7fe fbe0 	bl	8002c90 <getVal_cubicCurve>
						   getVal_cubicCurve(leg4_path[2], (t-walk_period*2.0/4.0)*4.0/walk_period));
 80044d0:	2200      	movs	r2, #0
		  leg4_setPosition(getVal_cubicCurve(leg4_path[0], (t-walk_period*2.0/4.0)*4.0/walk_period),
 80044d2:	eeb0 9a40 	vmov.f32	s18, s0
 80044d6:	eef0 9a60 	vmov.f32	s19, s1
						   getVal_cubicCurve(leg4_path[2], (t-walk_period*2.0/4.0)*4.0/walk_period));
 80044da:	4b01      	ldr	r3, [pc, #4]	; (80044e0 <TIM7_IRQHandler+0xfd0>)
 80044dc:	e56e      	b.n	8003fbc <TIM7_IRQHandler+0xaac>
 80044de:	bf00      	nop
 80044e0:	3fe00000 	.word	0x3fe00000
 80044e4:	40100000 	.word	0x40100000
		  if (t < walk_period*3.0/4.0 + 0.020){
 80044e8:	f20f 4334 	addw	r3, pc, #1076	; 0x434
 80044ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044f0:	4640      	mov	r0, r8
 80044f2:	4649      	mov	r1, r9
 80044f4:	f7fc fab2 	bl	8000a5c <__aeabi_dcmplt>
 80044f8:	2800      	cmp	r0, #0
 80044fa:	f000 80e8 	beq.w	80046ce <TIM7_IRQHandler+0x11be>
			  leg2_path[0] = hermite(gp_x+stride_length/2.0, -stride_length/3.0, gp_x+stride_length/2.0-stride_length/3.0, -stride_length/3.0);
 80044fe:	ed9f 3bea 	vldr	d3, [pc, #936]	; 80048a8 <TIM7_IRQHandler+0x1398>
 8004502:	ed9f 2beb 	vldr	d2, [pc, #940]	; 80048b0 <TIM7_IRQHandler+0x13a0>
 8004506:	eeb0 1a43 	vmov.f32	s2, s6
 800450a:	eef0 1a63 	vmov.f32	s3, s7
 800450e:	ed9f 0bea 	vldr	d0, [pc, #936]	; 80048b8 <TIM7_IRQHandler+0x13a8>
 8004512:	f7fe fc05 	bl	8002d20 <hermite>
 8004516:	ed86 0b00 	vstr	d0, [r6]
 800451a:	ed86 1b02 	vstr	d1, [r6, #8]
		  	  leg2_path[1] = hermite(gp_y+59.55-209.1/2.0+ground_width/2.0+runout_width/2.0, 0.0, gp_y+59.55-209.1/2.0+ground_width/2.0, -runout_vel);
 800451e:	ed9f 0be8 	vldr	d0, [pc, #928]	; 80048c0 <TIM7_IRQHandler+0x13b0>
 8004522:	ed9f 1be9 	vldr	d1, [pc, #932]	; 80048c8 <TIM7_IRQHandler+0x13b8>
			  leg2_path[0] = hermite(gp_x+stride_length/2.0, -stride_length/3.0, gp_x+stride_length/2.0-stride_length/3.0, -stride_length/3.0);
 8004526:	ed86 2b04 	vstr	d2, [r6, #16]
 800452a:	ed86 3b06 	vstr	d3, [r6, #24]
		  	  leg2_path[1] = hermite(gp_y+59.55-209.1/2.0+ground_width/2.0+runout_width/2.0, 0.0, gp_y+59.55-209.1/2.0+ground_width/2.0, -runout_vel);
 800452e:	ed9f 2be8 	vldr	d2, [pc, #928]	; 80048d0 <TIM7_IRQHandler+0x13c0>
 8004532:	ed9f 3bdd 	vldr	d3, [pc, #884]	; 80048a8 <TIM7_IRQHandler+0x1398>
 8004536:	f7fe fbf3 	bl	8002d20 <hermite>
 800453a:	ed86 3b0e 	vstr	d3, [r6, #56]	; 0x38
		  	  leg2_path[2] = hermite(-height-up_body, 0.0, -height, 0.0);
 800453e:	ed9f 3be2 	vldr	d3, [pc, #904]	; 80048c8 <TIM7_IRQHandler+0x13b8>
		  	  leg2_path[1] = hermite(gp_y+59.55-209.1/2.0+ground_width/2.0+runout_width/2.0, 0.0, gp_y+59.55-209.1/2.0+ground_width/2.0, -runout_vel);
 8004542:	ed86 0b08 	vstr	d0, [r6, #32]
 8004546:	ed86 1b0a 	vstr	d1, [r6, #40]	; 0x28
		  	  leg2_path[2] = hermite(-height-up_body, 0.0, -height, 0.0);
 800454a:	eeb0 1a43 	vmov.f32	s2, s6
 800454e:	eef0 1a63 	vmov.f32	s3, s7
 8004552:	ed9f 0be1 	vldr	d0, [pc, #900]	; 80048d8 <TIM7_IRQHandler+0x13c8>
		  	  leg2_path[1] = hermite(gp_y+59.55-209.1/2.0+ground_width/2.0+runout_width/2.0, 0.0, gp_y+59.55-209.1/2.0+ground_width/2.0, -runout_vel);
 8004556:	ed86 2b0c 	vstr	d2, [r6, #48]	; 0x30
		  	  leg2_path[2] = hermite(-height-up_body, 0.0, -height, 0.0);
 800455a:	ed9f 2be1 	vldr	d2, [pc, #900]	; 80048e0 <TIM7_IRQHandler+0x13d0>
 800455e:	f7fe fbdf 	bl	8002d20 <hermite>
 8004562:	ed86 3b16 	vstr	d3, [r6, #88]	; 0x58
			  leg4_path[0] = hermite(gp_x+stride_length/2.0-stride_length/3.0, -stride_length/3.0, gp_x+stride_length/2.0-2.0*stride_length/3.0, -stride_length/3.0);
 8004566:	ed9f 3bd0 	vldr	d3, [pc, #832]	; 80048a8 <TIM7_IRQHandler+0x1398>
		  	  leg2_path[2] = hermite(-height-up_body, 0.0, -height, 0.0);
 800456a:	ed86 0b10 	vstr	d0, [r6, #64]	; 0x40
 800456e:	ed86 1b12 	vstr	d1, [r6, #72]	; 0x48
			  leg4_path[0] = hermite(gp_x+stride_length/2.0-stride_length/3.0, -stride_length/3.0, gp_x+stride_length/2.0-2.0*stride_length/3.0, -stride_length/3.0);
 8004572:	eeb0 1a43 	vmov.f32	s2, s6
 8004576:	eef0 1a63 	vmov.f32	s3, s7
 800457a:	ed9f 0bcd 	vldr	d0, [pc, #820]	; 80048b0 <TIM7_IRQHandler+0x13a0>
		  	  leg2_path[2] = hermite(-height-up_body, 0.0, -height, 0.0);
 800457e:	ed86 2b14 	vstr	d2, [r6, #80]	; 0x50
			  leg4_path[0] = hermite(gp_x+stride_length/2.0-stride_length/3.0, -stride_length/3.0, gp_x+stride_length/2.0-2.0*stride_length/3.0, -stride_length/3.0);
 8004582:	ed9f 2bd9 	vldr	d2, [pc, #868]	; 80048e8 <TIM7_IRQHandler+0x13d8>
 8004586:	f7fe fbcb 	bl	8002d20 <hermite>
 800458a:	ed84 0b00 	vstr	d0, [r4]
 800458e:	ed84 1b02 	vstr	d1, [r4, #8]
		  	  leg4_path[1] = hermite(gp_y-(59.55-209.1/2.0+ground_width/2.0)+runout_width/2.0, 0.0, gp_y-(59.55-209.1/2.0+ground_width/2.0), -runout_vel);
 8004592:	ed9f 0bd7 	vldr	d0, [pc, #860]	; 80048f0 <TIM7_IRQHandler+0x13e0>
 8004596:	ed9f 1bcc 	vldr	d1, [pc, #816]	; 80048c8 <TIM7_IRQHandler+0x13b8>
			  leg4_path[0] = hermite(gp_x+stride_length/2.0-stride_length/3.0, -stride_length/3.0, gp_x+stride_length/2.0-2.0*stride_length/3.0, -stride_length/3.0);
 800459a:	ed84 2b04 	vstr	d2, [r4, #16]
 800459e:	ed84 3b06 	vstr	d3, [r4, #24]
		  	  leg4_path[1] = hermite(gp_y-(59.55-209.1/2.0+ground_width/2.0)+runout_width/2.0, 0.0, gp_y-(59.55-209.1/2.0+ground_width/2.0), -runout_vel);
 80045a2:	ed9f 2bd5 	vldr	d2, [pc, #852]	; 80048f8 <TIM7_IRQHandler+0x13e8>
 80045a6:	ed9f 3bc0 	vldr	d3, [pc, #768]	; 80048a8 <TIM7_IRQHandler+0x1398>
 80045aa:	f7fe fbb9 	bl	8002d20 <hermite>
 80045ae:	ed84 2b0c 	vstr	d2, [r4, #48]	; 0x30
 80045b2:	ed84 3b0e 	vstr	d3, [r4, #56]	; 0x38
		  	  leg4_path[2] = hermite(-height, 0.0, -height, 0.0);
 80045b6:	ed9f 2bca 	vldr	d2, [pc, #808]	; 80048e0 <TIM7_IRQHandler+0x13d0>
 80045ba:	ed9f 3bc3 	vldr	d3, [pc, #780]	; 80048c8 <TIM7_IRQHandler+0x13b8>
		  	  leg4_path[1] = hermite(gp_y-(59.55-209.1/2.0+ground_width/2.0)+runout_width/2.0, 0.0, gp_y-(59.55-209.1/2.0+ground_width/2.0), -runout_vel);
 80045be:	ed84 0b08 	vstr	d0, [r4, #32]
		  	  leg4_path[2] = hermite(-height, 0.0, -height, 0.0);
 80045c2:	eeb0 0a42 	vmov.f32	s0, s4
 80045c6:	eef0 0a62 	vmov.f32	s1, s5
		  	  leg4_path[1] = hermite(gp_y-(59.55-209.1/2.0+ground_width/2.0)+runout_width/2.0, 0.0, gp_y-(59.55-209.1/2.0+ground_width/2.0), -runout_vel);
 80045ca:	ed84 1b0a 	vstr	d1, [r4, #40]	; 0x28
		  	  leg4_path[2] = hermite(-height, 0.0, -height, 0.0);
 80045ce:	eeb0 1a43 	vmov.f32	s2, s6
 80045d2:	eef0 1a63 	vmov.f32	s3, s7
 80045d6:	f7fe fba3 	bl	8002d20 <hermite>
 80045da:	ed84 3b16 	vstr	d3, [r4, #88]	; 0x58
		  	  leg3_path[0] = hermite(gp_x+stride_length/2.0-2.0*stride_length/3.0, -stride_length/3.0, gp_x-stride_length/2.0, -stride_length/3.0);
 80045de:	ed9f 3bb2 	vldr	d3, [pc, #712]	; 80048a8 <TIM7_IRQHandler+0x1398>
		  	  leg4_path[2] = hermite(-height, 0.0, -height, 0.0);
 80045e2:	ed84 0b10 	vstr	d0, [r4, #64]	; 0x40
 80045e6:	ed84 1b12 	vstr	d1, [r4, #72]	; 0x48
		  	  leg3_path[0] = hermite(gp_x+stride_length/2.0-2.0*stride_length/3.0, -stride_length/3.0, gp_x-stride_length/2.0, -stride_length/3.0);
 80045ea:	eeb0 1a43 	vmov.f32	s2, s6
 80045ee:	eef0 1a63 	vmov.f32	s3, s7
 80045f2:	ed9f 0bbd 	vldr	d0, [pc, #756]	; 80048e8 <TIM7_IRQHandler+0x13d8>
		  	  leg4_path[2] = hermite(-height, 0.0, -height, 0.0);
 80045f6:	ed84 2b14 	vstr	d2, [r4, #80]	; 0x50
		  	  leg3_path[0] = hermite(gp_x+stride_length/2.0-2.0*stride_length/3.0, -stride_length/3.0, gp_x-stride_length/2.0, -stride_length/3.0);
 80045fa:	ed9f 2bc1 	vldr	d2, [pc, #772]	; 8004900 <TIM7_IRQHandler+0x13f0>
 80045fe:	f7fe fb8f 	bl	8002d20 <hermite>
 8004602:	ed85 0b00 	vstr	d0, [r5]
 8004606:	ed85 1b02 	vstr	d1, [r5, #8]
		  	  leg3_path[1] = hermite(gp_y-(59.55-209.1/2.0+ground_width/2.0)+runout_width/2.0, 0.0, gp_y-(59.55-209.1/2.0+ground_width/2.0), -runout_vel);
 800460a:	ed9f 0bb9 	vldr	d0, [pc, #740]	; 80048f0 <TIM7_IRQHandler+0x13e0>
 800460e:	ed9f 1bae 	vldr	d1, [pc, #696]	; 80048c8 <TIM7_IRQHandler+0x13b8>
		  	  leg3_path[0] = hermite(gp_x+stride_length/2.0-2.0*stride_length/3.0, -stride_length/3.0, gp_x-stride_length/2.0, -stride_length/3.0);
 8004612:	ed85 2b04 	vstr	d2, [r5, #16]
 8004616:	ed85 3b06 	vstr	d3, [r5, #24]
		  	  leg3_path[1] = hermite(gp_y-(59.55-209.1/2.0+ground_width/2.0)+runout_width/2.0, 0.0, gp_y-(59.55-209.1/2.0+ground_width/2.0), -runout_vel);
 800461a:	ed9f 2bb7 	vldr	d2, [pc, #732]	; 80048f8 <TIM7_IRQHandler+0x13e8>
 800461e:	ed9f 3ba2 	vldr	d3, [pc, #648]	; 80048a8 <TIM7_IRQHandler+0x1398>
 8004622:	f7fe fb7d 	bl	8002d20 <hermite>
 8004626:	ed85 2b0c 	vstr	d2, [r5, #48]	; 0x30
 800462a:	ed85 3b0e 	vstr	d3, [r5, #56]	; 0x38
		  	  leg3_path[2] = hermite(-height, 0.0, -height, 0.0);
 800462e:	ed9f 2bac 	vldr	d2, [pc, #688]	; 80048e0 <TIM7_IRQHandler+0x13d0>
 8004632:	ed9f 3ba5 	vldr	d3, [pc, #660]	; 80048c8 <TIM7_IRQHandler+0x13b8>
		  	  leg3_path[1] = hermite(gp_y-(59.55-209.1/2.0+ground_width/2.0)+runout_width/2.0, 0.0, gp_y-(59.55-209.1/2.0+ground_width/2.0), -runout_vel);
 8004636:	ed85 0b08 	vstr	d0, [r5, #32]
		  	  leg3_path[2] = hermite(-height, 0.0, -height, 0.0);
 800463a:	eeb0 0a42 	vmov.f32	s0, s4
 800463e:	eef0 0a62 	vmov.f32	s1, s5
		  	  leg3_path[1] = hermite(gp_y-(59.55-209.1/2.0+ground_width/2.0)+runout_width/2.0, 0.0, gp_y-(59.55-209.1/2.0+ground_width/2.0), -runout_vel);
 8004642:	ed85 1b0a 	vstr	d1, [r5, #40]	; 0x28
		  	  leg3_path[2] = hermite(-height, 0.0, -height, 0.0);
 8004646:	eeb0 1a43 	vmov.f32	s2, s6
 800464a:	eef0 1a63 	vmov.f32	s3, s7
 800464e:	f7fe fb67 	bl	8002d20 <hermite>
 8004652:	ed85 0b10 	vstr	d0, [r5, #64]	; 0x40
 8004656:	ed85 1b12 	vstr	d1, [r5, #72]	; 0x48
			  leg1_path[0] = hermite(gp_x-stride_length/2.0, 0.0, gp_x+stride_length/2.0, -runout_vel);
 800465a:	ed9f 0ba9 	vldr	d0, [pc, #676]	; 8004900 <TIM7_IRQHandler+0x13f0>
 800465e:	ed9f 1b9a 	vldr	d1, [pc, #616]	; 80048c8 <TIM7_IRQHandler+0x13b8>
		  	  leg3_path[2] = hermite(-height, 0.0, -height, 0.0);
 8004662:	ed85 2b14 	vstr	d2, [r5, #80]	; 0x50
 8004666:	ed85 3b16 	vstr	d3, [r5, #88]	; 0x58
			  leg1_path[0] = hermite(gp_x-stride_length/2.0, 0.0, gp_x+stride_length/2.0, -runout_vel);
 800466a:	ed9f 2b93 	vldr	d2, [pc, #588]	; 80048b8 <TIM7_IRQHandler+0x13a8>
 800466e:	ed9f 3b8e 	vldr	d3, [pc, #568]	; 80048a8 <TIM7_IRQHandler+0x1398>
 8004672:	f7fe fb55 	bl	8002d20 <hermite>
 8004676:	ed87 0b00 	vstr	d0, [r7]
 800467a:	ed87 1b02 	vstr	d1, [r7, #8]
			  leg1_path[1] = hermite(gp_y+59.55-209.1/2.0+ground_width/2.0+runout_width/2.0, 0.0, gp_y+59.55-209.1/2.0+ground_width/2.0, -runout_vel);
 800467e:	ed9f 0b90 	vldr	d0, [pc, #576]	; 80048c0 <TIM7_IRQHandler+0x13b0>
 8004682:	ed9f 1b91 	vldr	d1, [pc, #580]	; 80048c8 <TIM7_IRQHandler+0x13b8>
			  leg1_path[0] = hermite(gp_x-stride_length/2.0, 0.0, gp_x+stride_length/2.0, -runout_vel);
 8004686:	ed87 2b04 	vstr	d2, [r7, #16]
 800468a:	ed87 3b06 	vstr	d3, [r7, #24]
			  leg1_path[1] = hermite(gp_y+59.55-209.1/2.0+ground_width/2.0+runout_width/2.0, 0.0, gp_y+59.55-209.1/2.0+ground_width/2.0, -runout_vel);
 800468e:	ed9f 2b90 	vldr	d2, [pc, #576]	; 80048d0 <TIM7_IRQHandler+0x13c0>
 8004692:	ed9f 3b85 	vldr	d3, [pc, #532]	; 80048a8 <TIM7_IRQHandler+0x1398>
 8004696:	f7fe fb43 	bl	8002d20 <hermite>
 800469a:	ed87 0b08 	vstr	d0, [r7, #32]
 800469e:	ed87 1b0a 	vstr	d1, [r7, #40]	; 0x28
 80046a2:	ed87 2b0c 	vstr	d2, [r7, #48]	; 0x30
 80046a6:	ed87 3b0e 	vstr	d3, [r7, #56]	; 0x38
			  leg1_path[2] = hermite(-height, lift_leg_vz, -height-up_body, -lift_leg_vz);
 80046aa:	ed9f 2b8b 	vldr	d2, [pc, #556]	; 80048d8 <TIM7_IRQHandler+0x13c8>
 80046ae:	ed9f 3b96 	vldr	d3, [pc, #600]	; 8004908 <TIM7_IRQHandler+0x13f8>
 80046b2:	ed9f 1b97 	vldr	d1, [pc, #604]	; 8004910 <TIM7_IRQHandler+0x1400>
 80046b6:	ed9f 0b8a 	vldr	d0, [pc, #552]	; 80048e0 <TIM7_IRQHandler+0x13d0>
 80046ba:	f7fe fb31 	bl	8002d20 <hermite>
 80046be:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
 80046c2:	ed87 1b12 	vstr	d1, [r7, #72]	; 0x48
 80046c6:	ed87 2b14 	vstr	d2, [r7, #80]	; 0x50
 80046ca:	ed87 3b16 	vstr	d3, [r7, #88]	; 0x58
		  leg1_setPosition(getVal_cubicCurve(leg1_path[0], (t-walk_period*3.0/4.0)*4.0/walk_period),
 80046ce:	2200      	movs	r2, #0
 80046d0:	4b91      	ldr	r3, [pc, #580]	; (8004918 <TIM7_IRQHandler+0x1408>)
 80046d2:	e9da 0100 	ldrd	r0, r1, [sl]
 80046d6:	f7fb fd9b 	bl	8000210 <__aeabi_dsub>
 80046da:	2200      	movs	r2, #0
 80046dc:	4b8f      	ldr	r3, [pc, #572]	; (800491c <TIM7_IRQHandler+0x140c>)
 80046de:	f7fb ff4b 	bl	8000578 <__aeabi_dmul>
 80046e2:	ed97 1b02 	vldr	d1, [r7, #8]
 80046e6:	ec41 0b14 	vmov	d4, r0, r1
 80046ea:	ed97 2b04 	vldr	d2, [r7, #16]
 80046ee:	ed97 3b06 	vldr	d3, [r7, #24]
 80046f2:	ed97 0b00 	vldr	d0, [r7]
 80046f6:	f7fe facb 	bl	8002c90 <getVal_cubicCurve>
				  	  	   getVal_cubicCurve(leg1_path[1], (t-walk_period*3.0/4.0)*4.0/walk_period),
 80046fa:	2200      	movs	r2, #0
 80046fc:	4b86      	ldr	r3, [pc, #536]	; (8004918 <TIM7_IRQHandler+0x1408>)
		  leg1_setPosition(getVal_cubicCurve(leg1_path[0], (t-walk_period*3.0/4.0)*4.0/walk_period),
 80046fe:	eeb0 8a40 	vmov.f32	s16, s0
 8004702:	eef0 8a60 	vmov.f32	s17, s1
				  	  	   getVal_cubicCurve(leg1_path[1], (t-walk_period*3.0/4.0)*4.0/walk_period),
 8004706:	e9da 0100 	ldrd	r0, r1, [sl]
 800470a:	f7fb fd81 	bl	8000210 <__aeabi_dsub>
 800470e:	2200      	movs	r2, #0
 8004710:	4b82      	ldr	r3, [pc, #520]	; (800491c <TIM7_IRQHandler+0x140c>)
 8004712:	f7fb ff31 	bl	8000578 <__aeabi_dmul>
		  leg1_setPosition(getVal_cubicCurve(leg1_path[0], (t-walk_period*3.0/4.0)*4.0/walk_period),
 8004716:	ed97 1b0a 	vldr	d1, [r7, #40]	; 0x28
 800471a:	ec41 0b14 	vmov	d4, r0, r1
 800471e:	ed97 2b0c 	vldr	d2, [r7, #48]	; 0x30
 8004722:	ed97 3b0e 	vldr	d3, [r7, #56]	; 0x38
 8004726:	ed97 0b08 	vldr	d0, [r7, #32]
 800472a:	f7fe fab1 	bl	8002c90 <getVal_cubicCurve>
						   getVal_cubicCurve(leg1_path[2], (t-walk_period*3.0/4.0)*4.0/walk_period));
 800472e:	2200      	movs	r2, #0
 8004730:	4b79      	ldr	r3, [pc, #484]	; (8004918 <TIM7_IRQHandler+0x1408>)
		  leg1_setPosition(getVal_cubicCurve(leg1_path[0], (t-walk_period*3.0/4.0)*4.0/walk_period),
 8004732:	eeb0 9a40 	vmov.f32	s18, s0
 8004736:	eef0 9a60 	vmov.f32	s19, s1
						   getVal_cubicCurve(leg1_path[2], (t-walk_period*3.0/4.0)*4.0/walk_period));
 800473a:	e9da 0100 	ldrd	r0, r1, [sl]
 800473e:	f7fb fd67 	bl	8000210 <__aeabi_dsub>
 8004742:	2200      	movs	r2, #0
 8004744:	4b75      	ldr	r3, [pc, #468]	; (800491c <TIM7_IRQHandler+0x140c>)
 8004746:	f7fb ff17 	bl	8000578 <__aeabi_dmul>
		  leg1_setPosition(getVal_cubicCurve(leg1_path[0], (t-walk_period*3.0/4.0)*4.0/walk_period),
 800474a:	ed97 3b16 	vldr	d3, [r7, #88]	; 0x58
 800474e:	ec41 0b14 	vmov	d4, r0, r1
 8004752:	ed97 1b12 	vldr	d1, [r7, #72]	; 0x48
 8004756:	ed97 2b14 	vldr	d2, [r7, #80]	; 0x50
 800475a:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 800475e:	f7fe fa97 	bl	8002c90 <getVal_cubicCurve>
 8004762:	eeb0 1a49 	vmov.f32	s2, s18
 8004766:	eef0 1a69 	vmov.f32	s3, s19
 800476a:	eeb0 2a40 	vmov.f32	s4, s0
 800476e:	eef0 2a60 	vmov.f32	s5, s1
 8004772:	eeb0 0a48 	vmov.f32	s0, s16
 8004776:	eef0 0a68 	vmov.f32	s1, s17
 800477a:	f7fd fd69 	bl	8002250 <leg1_setPosition>
		  leg2_setPosition(getVal_cubicCurve(leg2_path[0], (t-walk_period*3.0/4.0)*4.0/walk_period),
 800477e:	2200      	movs	r2, #0
 8004780:	4b65      	ldr	r3, [pc, #404]	; (8004918 <TIM7_IRQHandler+0x1408>)
 8004782:	e9da 0100 	ldrd	r0, r1, [sl]
 8004786:	f7fb fd43 	bl	8000210 <__aeabi_dsub>
 800478a:	2200      	movs	r2, #0
 800478c:	4b63      	ldr	r3, [pc, #396]	; (800491c <TIM7_IRQHandler+0x140c>)
 800478e:	f7fb fef3 	bl	8000578 <__aeabi_dmul>
 8004792:	ed96 1b02 	vldr	d1, [r6, #8]
 8004796:	ec41 0b14 	vmov	d4, r0, r1
 800479a:	ed96 2b04 	vldr	d2, [r6, #16]
 800479e:	ed96 3b06 	vldr	d3, [r6, #24]
 80047a2:	ed96 0b00 	vldr	d0, [r6]
 80047a6:	f7fe fa73 	bl	8002c90 <getVal_cubicCurve>
				  	  	   getVal_cubicCurve(leg2_path[1], (t-walk_period*3.0/4.0)*4.0/walk_period),
 80047aa:	2200      	movs	r2, #0
 80047ac:	4b5a      	ldr	r3, [pc, #360]	; (8004918 <TIM7_IRQHandler+0x1408>)
		  leg2_setPosition(getVal_cubicCurve(leg2_path[0], (t-walk_period*3.0/4.0)*4.0/walk_period),
 80047ae:	eeb0 8a40 	vmov.f32	s16, s0
 80047b2:	eef0 8a60 	vmov.f32	s17, s1
				  	  	   getVal_cubicCurve(leg2_path[1], (t-walk_period*3.0/4.0)*4.0/walk_period),
 80047b6:	e9da 0100 	ldrd	r0, r1, [sl]
 80047ba:	f7fb fd29 	bl	8000210 <__aeabi_dsub>
 80047be:	2200      	movs	r2, #0
 80047c0:	4b56      	ldr	r3, [pc, #344]	; (800491c <TIM7_IRQHandler+0x140c>)
 80047c2:	f7fb fed9 	bl	8000578 <__aeabi_dmul>
		  leg2_setPosition(getVal_cubicCurve(leg2_path[0], (t-walk_period*3.0/4.0)*4.0/walk_period),
 80047c6:	ed96 1b0a 	vldr	d1, [r6, #40]	; 0x28
 80047ca:	ec41 0b14 	vmov	d4, r0, r1
 80047ce:	ed96 2b0c 	vldr	d2, [r6, #48]	; 0x30
 80047d2:	ed96 3b0e 	vldr	d3, [r6, #56]	; 0x38
 80047d6:	ed96 0b08 	vldr	d0, [r6, #32]
 80047da:	f7fe fa59 	bl	8002c90 <getVal_cubicCurve>
						   getVal_cubicCurve(leg2_path[2], (t-walk_period*3.0/4.0)*4.0/walk_period));
 80047de:	2200      	movs	r2, #0
 80047e0:	4b4d      	ldr	r3, [pc, #308]	; (8004918 <TIM7_IRQHandler+0x1408>)
		  leg2_setPosition(getVal_cubicCurve(leg2_path[0], (t-walk_period*3.0/4.0)*4.0/walk_period),
 80047e2:	eeb0 9a40 	vmov.f32	s18, s0
 80047e6:	eef0 9a60 	vmov.f32	s19, s1
						   getVal_cubicCurve(leg2_path[2], (t-walk_period*3.0/4.0)*4.0/walk_period));
 80047ea:	e9da 0100 	ldrd	r0, r1, [sl]
 80047ee:	f7fb fd0f 	bl	8000210 <__aeabi_dsub>
 80047f2:	2200      	movs	r2, #0
 80047f4:	4b49      	ldr	r3, [pc, #292]	; (800491c <TIM7_IRQHandler+0x140c>)
 80047f6:	f7fb febf 	bl	8000578 <__aeabi_dmul>
		  leg2_setPosition(getVal_cubicCurve(leg2_path[0], (t-walk_period*3.0/4.0)*4.0/walk_period),
 80047fa:	ed96 3b16 	vldr	d3, [r6, #88]	; 0x58
 80047fe:	ec41 0b14 	vmov	d4, r0, r1
 8004802:	ed96 1b12 	vldr	d1, [r6, #72]	; 0x48
 8004806:	ed96 2b14 	vldr	d2, [r6, #80]	; 0x50
 800480a:	ed96 0b10 	vldr	d0, [r6, #64]	; 0x40
 800480e:	f7fe fa3f 	bl	8002c90 <getVal_cubicCurve>
 8004812:	eeb0 1a49 	vmov.f32	s2, s18
 8004816:	eef0 1a69 	vmov.f32	s3, s19
 800481a:	eeb0 2a40 	vmov.f32	s4, s0
 800481e:	eef0 2a60 	vmov.f32	s5, s1
 8004822:	eeb0 0a48 	vmov.f32	s0, s16
 8004826:	eef0 0a68 	vmov.f32	s1, s17
 800482a:	f7fd fe5d 	bl	80024e8 <leg2_setPosition>
		  leg3_setPosition(getVal_cubicCurve(leg3_path[0], (t-walk_period*3.0/4.0)*4.0/walk_period),
 800482e:	2200      	movs	r2, #0
 8004830:	4b39      	ldr	r3, [pc, #228]	; (8004918 <TIM7_IRQHandler+0x1408>)
 8004832:	e9da 0100 	ldrd	r0, r1, [sl]
 8004836:	f7fb fceb 	bl	8000210 <__aeabi_dsub>
 800483a:	2200      	movs	r2, #0
 800483c:	4b37      	ldr	r3, [pc, #220]	; (800491c <TIM7_IRQHandler+0x140c>)
 800483e:	f7fb fe9b 	bl	8000578 <__aeabi_dmul>
 8004842:	ed95 1b02 	vldr	d1, [r5, #8]
 8004846:	ec41 0b14 	vmov	d4, r0, r1
 800484a:	ed95 2b04 	vldr	d2, [r5, #16]
 800484e:	ed95 3b06 	vldr	d3, [r5, #24]
 8004852:	ed95 0b00 	vldr	d0, [r5]
 8004856:	f7fe fa1b 	bl	8002c90 <getVal_cubicCurve>
				  	  	   getVal_cubicCurve(leg3_path[1], (t-walk_period*3.0/4.0)*4.0/walk_period),
 800485a:	2200      	movs	r2, #0
 800485c:	4b2e      	ldr	r3, [pc, #184]	; (8004918 <TIM7_IRQHandler+0x1408>)
		  leg3_setPosition(getVal_cubicCurve(leg3_path[0], (t-walk_period*3.0/4.0)*4.0/walk_period),
 800485e:	eeb0 8a40 	vmov.f32	s16, s0
 8004862:	eef0 8a60 	vmov.f32	s17, s1
				  	  	   getVal_cubicCurve(leg3_path[1], (t-walk_period*3.0/4.0)*4.0/walk_period),
 8004866:	e9da 0100 	ldrd	r0, r1, [sl]
 800486a:	f7fb fcd1 	bl	8000210 <__aeabi_dsub>
 800486e:	2200      	movs	r2, #0
 8004870:	4b2a      	ldr	r3, [pc, #168]	; (800491c <TIM7_IRQHandler+0x140c>)
 8004872:	f7fb fe81 	bl	8000578 <__aeabi_dmul>
		  leg3_setPosition(getVal_cubicCurve(leg3_path[0], (t-walk_period*3.0/4.0)*4.0/walk_period),
 8004876:	ed95 1b0a 	vldr	d1, [r5, #40]	; 0x28
 800487a:	ec41 0b14 	vmov	d4, r0, r1
 800487e:	ed95 2b0c 	vldr	d2, [r5, #48]	; 0x30
 8004882:	ed95 3b0e 	vldr	d3, [r5, #56]	; 0x38
 8004886:	ed95 0b08 	vldr	d0, [r5, #32]
 800488a:	f7fe fa01 	bl	8002c90 <getVal_cubicCurve>
						   getVal_cubicCurve(leg3_path[2], (t-walk_period*3.0/4.0)*4.0/walk_period));
 800488e:	2200      	movs	r2, #0
 8004890:	4b21      	ldr	r3, [pc, #132]	; (8004918 <TIM7_IRQHandler+0x1408>)
		  leg3_setPosition(getVal_cubicCurve(leg3_path[0], (t-walk_period*3.0/4.0)*4.0/walk_period),
 8004892:	eeb0 9a40 	vmov.f32	s18, s0
 8004896:	eef0 9a60 	vmov.f32	s19, s1
						   getVal_cubicCurve(leg3_path[2], (t-walk_period*3.0/4.0)*4.0/walk_period));
 800489a:	e9da 0100 	ldrd	r0, r1, [sl]
 800489e:	f7fb fcb7 	bl	8000210 <__aeabi_dsub>
 80048a2:	2200      	movs	r2, #0
 80048a4:	e040      	b.n	8004928 <TIM7_IRQHandler+0x1418>
 80048a6:	bf00      	nop
 80048a8:	00000000 	.word	0x00000000
 80048ac:	c0240000 	.word	0xc0240000
 80048b0:	00000000 	.word	0x00000000
 80048b4:	c0280000 	.word	0xc0280000
 80048b8:	00000000 	.word	0x00000000
 80048bc:	c0000000 	.word	0xc0000000
 80048c0:	99999998 	.word	0x99999998
 80048c4:	40179999 	.word	0x40179999
	...
 80048d0:	66666668 	.word	0x66666668
 80048d4:	c0106666 	.word	0xc0106666
 80048d8:	cccccccd 	.word	0xcccccccd
 80048dc:	c0632ccc 	.word	0xc0632ccc
 80048e0:	cccccccd 	.word	0xcccccccd
 80048e4:	c0628ccc 	.word	0xc0628ccc
 80048e8:	00000000 	.word	0x00000000
 80048ec:	c0360000 	.word	0xc0360000
 80048f0:	66666666 	.word	0x66666666
 80048f4:	c0106666 	.word	0xc0106666
 80048f8:	33333333 	.word	0x33333333
 80048fc:	c02c3333 	.word	0xc02c3333
 8004900:	00000000 	.word	0x00000000
 8004904:	c0400000 	.word	0xc0400000
 8004908:	00000000 	.word	0x00000000
 800490c:	c0490000 	.word	0xc0490000
 8004910:	00000000 	.word	0x00000000
 8004914:	40490000 	.word	0x40490000
 8004918:	3fe80000 	.word	0x3fe80000
 800491c:	40100000 	.word	0x40100000
 8004920:	0a3d70a4 	.word	0x0a3d70a4
 8004924:	3fe8a3d7 	.word	0x3fe8a3d7
 8004928:	4b2d      	ldr	r3, [pc, #180]	; (80049e0 <TIM7_IRQHandler+0x14d0>)
 800492a:	f7fb fe25 	bl	8000578 <__aeabi_dmul>
		  leg3_setPosition(getVal_cubicCurve(leg3_path[0], (t-walk_period*3.0/4.0)*4.0/walk_period),
 800492e:	ed95 3b16 	vldr	d3, [r5, #88]	; 0x58
 8004932:	ec41 0b14 	vmov	d4, r0, r1
 8004936:	ed95 1b12 	vldr	d1, [r5, #72]	; 0x48
 800493a:	ed95 2b14 	vldr	d2, [r5, #80]	; 0x50
 800493e:	ed95 0b10 	vldr	d0, [r5, #64]	; 0x40
 8004942:	f7fe f9a5 	bl	8002c90 <getVal_cubicCurve>
 8004946:	eeb0 1a49 	vmov.f32	s2, s18
 800494a:	eef0 1a69 	vmov.f32	s3, s19
 800494e:	eeb0 2a40 	vmov.f32	s4, s0
 8004952:	eef0 2a60 	vmov.f32	s5, s1
 8004956:	eeb0 0a48 	vmov.f32	s0, s16
 800495a:	eef0 0a68 	vmov.f32	s1, s17
 800495e:	f7fd ff0f 	bl	8002780 <leg3_setPosition>
		  leg4_setPosition(getVal_cubicCurve(leg4_path[0], (t-walk_period*3.0/4.0)*4.0/walk_period),
 8004962:	2200      	movs	r2, #0
 8004964:	4b1f      	ldr	r3, [pc, #124]	; (80049e4 <TIM7_IRQHandler+0x14d4>)
 8004966:	e9da 0100 	ldrd	r0, r1, [sl]
 800496a:	f7fb fc51 	bl	8000210 <__aeabi_dsub>
 800496e:	2200      	movs	r2, #0
 8004970:	4b1b      	ldr	r3, [pc, #108]	; (80049e0 <TIM7_IRQHandler+0x14d0>)
 8004972:	f7fb fe01 	bl	8000578 <__aeabi_dmul>
 8004976:	ed94 1b02 	vldr	d1, [r4, #8]
 800497a:	ec41 0b14 	vmov	d4, r0, r1
 800497e:	ed94 2b04 	vldr	d2, [r4, #16]
 8004982:	ed94 3b06 	vldr	d3, [r4, #24]
 8004986:	ed94 0b00 	vldr	d0, [r4]
 800498a:	f7fe f981 	bl	8002c90 <getVal_cubicCurve>
				  	  	   getVal_cubicCurve(leg4_path[1], (t-walk_period*3.0/4.0)*4.0/walk_period),
 800498e:	2200      	movs	r2, #0
 8004990:	4b14      	ldr	r3, [pc, #80]	; (80049e4 <TIM7_IRQHandler+0x14d4>)
		  leg4_setPosition(getVal_cubicCurve(leg4_path[0], (t-walk_period*3.0/4.0)*4.0/walk_period),
 8004992:	eeb0 8a40 	vmov.f32	s16, s0
 8004996:	eef0 8a60 	vmov.f32	s17, s1
				  	  	   getVal_cubicCurve(leg4_path[1], (t-walk_period*3.0/4.0)*4.0/walk_period),
 800499a:	e9da 0100 	ldrd	r0, r1, [sl]
 800499e:	f7fb fc37 	bl	8000210 <__aeabi_dsub>
 80049a2:	2200      	movs	r2, #0
 80049a4:	4b0e      	ldr	r3, [pc, #56]	; (80049e0 <TIM7_IRQHandler+0x14d0>)
 80049a6:	f7fb fde7 	bl	8000578 <__aeabi_dmul>
		  leg4_setPosition(getVal_cubicCurve(leg4_path[0], (t-walk_period*3.0/4.0)*4.0/walk_period),
 80049aa:	ed94 0b08 	vldr	d0, [r4, #32]
 80049ae:	ec41 0b14 	vmov	d4, r0, r1
 80049b2:	ed94 1b0a 	vldr	d1, [r4, #40]	; 0x28
 80049b6:	ed94 2b0c 	vldr	d2, [r4, #48]	; 0x30
 80049ba:	ed94 3b0e 	vldr	d3, [r4, #56]	; 0x38
 80049be:	f7fe f967 	bl	8002c90 <getVal_cubicCurve>
						   getVal_cubicCurve(leg4_path[2], (t-walk_period*3.0/4.0)*4.0/walk_period));
 80049c2:	2200      	movs	r2, #0
		  leg4_setPosition(getVal_cubicCurve(leg4_path[0], (t-walk_period*3.0/4.0)*4.0/walk_period),
 80049c4:	eeb0 9a40 	vmov.f32	s18, s0
 80049c8:	eef0 9a60 	vmov.f32	s19, s1
						   getVal_cubicCurve(leg4_path[2], (t-walk_period*3.0/4.0)*4.0/walk_period));
 80049cc:	4b05      	ldr	r3, [pc, #20]	; (80049e4 <TIM7_IRQHandler+0x14d4>)
 80049ce:	f7ff baf5 	b.w	8003fbc <TIM7_IRQHandler+0xaac>
		  t = 0.0;
 80049d2:	2200      	movs	r2, #0
 80049d4:	2300      	movs	r3, #0
 80049d6:	e9ca 2300 	strd	r2, r3, [sl]
 80049da:	f7ff b83a 	b.w	8003a52 <TIM7_IRQHandler+0x542>
 80049de:	bf00      	nop
 80049e0:	40100000 	.word	0x40100000
 80049e4:	3fe80000 	.word	0x3fe80000

080049e8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80049e8:	490f      	ldr	r1, [pc, #60]	; (8004a28 <SystemInit+0x40>)
 80049ea:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80049ee:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80049f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80049f6:	4b0d      	ldr	r3, [pc, #52]	; (8004a2c <SystemInit+0x44>)
 80049f8:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80049fa:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 80049fc:	f042 0201 	orr.w	r2, r2, #1
 8004a00:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8004a02:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8004a0a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004a0e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004a10:	4a07      	ldr	r2, [pc, #28]	; (8004a30 <SystemInit+0x48>)
 8004a12:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004a1a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004a1c:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004a1e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004a22:	608b      	str	r3, [r1, #8]
 8004a24:	4770      	bx	lr
 8004a26:	bf00      	nop
 8004a28:	e000ed00 	.word	0xe000ed00
 8004a2c:	40023800 	.word	0x40023800
 8004a30:	24003010 	.word	0x24003010

08004a34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004a34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004a6c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004a38:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004a3a:	e003      	b.n	8004a44 <LoopCopyDataInit>

08004a3c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004a3c:	4b0c      	ldr	r3, [pc, #48]	; (8004a70 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004a3e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004a40:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004a42:	3104      	adds	r1, #4

08004a44 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004a44:	480b      	ldr	r0, [pc, #44]	; (8004a74 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004a46:	4b0c      	ldr	r3, [pc, #48]	; (8004a78 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004a48:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004a4a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004a4c:	d3f6      	bcc.n	8004a3c <CopyDataInit>
  ldr  r2, =_sbss
 8004a4e:	4a0b      	ldr	r2, [pc, #44]	; (8004a7c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004a50:	e002      	b.n	8004a58 <LoopFillZerobss>

08004a52 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004a52:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004a54:	f842 3b04 	str.w	r3, [r2], #4

08004a58 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004a58:	4b09      	ldr	r3, [pc, #36]	; (8004a80 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004a5a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004a5c:	d3f9      	bcc.n	8004a52 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004a5e:	f7ff ffc3 	bl	80049e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004a62:	f000 f811 	bl	8004a88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004a66:	f7fe fa11 	bl	8002e8c <main>
  bx  lr    
 8004a6a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004a6c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004a70:	08006578 	.word	0x08006578
  ldr  r0, =_sdata
 8004a74:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004a78:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 8004a7c:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 8004a80:	20000414 	.word	0x20000414

08004a84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004a84:	e7fe      	b.n	8004a84 <ADC_IRQHandler>
	...

08004a88 <__libc_init_array>:
 8004a88:	b570      	push	{r4, r5, r6, lr}
 8004a8a:	4e0d      	ldr	r6, [pc, #52]	; (8004ac0 <__libc_init_array+0x38>)
 8004a8c:	4c0d      	ldr	r4, [pc, #52]	; (8004ac4 <__libc_init_array+0x3c>)
 8004a8e:	1ba4      	subs	r4, r4, r6
 8004a90:	10a4      	asrs	r4, r4, #2
 8004a92:	2500      	movs	r5, #0
 8004a94:	42a5      	cmp	r5, r4
 8004a96:	d109      	bne.n	8004aac <__libc_init_array+0x24>
 8004a98:	4e0b      	ldr	r6, [pc, #44]	; (8004ac8 <__libc_init_array+0x40>)
 8004a9a:	4c0c      	ldr	r4, [pc, #48]	; (8004acc <__libc_init_array+0x44>)
 8004a9c:	f001 fc3a 	bl	8006314 <_init>
 8004aa0:	1ba4      	subs	r4, r4, r6
 8004aa2:	10a4      	asrs	r4, r4, #2
 8004aa4:	2500      	movs	r5, #0
 8004aa6:	42a5      	cmp	r5, r4
 8004aa8:	d105      	bne.n	8004ab6 <__libc_init_array+0x2e>
 8004aaa:	bd70      	pop	{r4, r5, r6, pc}
 8004aac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004ab0:	4798      	blx	r3
 8004ab2:	3501      	adds	r5, #1
 8004ab4:	e7ee      	b.n	8004a94 <__libc_init_array+0xc>
 8004ab6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004aba:	4798      	blx	r3
 8004abc:	3501      	adds	r5, #1
 8004abe:	e7f2      	b.n	8004aa6 <__libc_init_array+0x1e>
 8004ac0:	08006570 	.word	0x08006570
 8004ac4:	08006570 	.word	0x08006570
 8004ac8:	08006570 	.word	0x08006570
 8004acc:	08006574 	.word	0x08006574

08004ad0 <cos>:
 8004ad0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004ad2:	ec51 0b10 	vmov	r0, r1, d0
 8004ad6:	4a1e      	ldr	r2, [pc, #120]	; (8004b50 <cos+0x80>)
 8004ad8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004adc:	4293      	cmp	r3, r2
 8004ade:	dc06      	bgt.n	8004aee <cos+0x1e>
 8004ae0:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8004b48 <cos+0x78>
 8004ae4:	f000 fc5c 	bl	80053a0 <__kernel_cos>
 8004ae8:	ec51 0b10 	vmov	r0, r1, d0
 8004aec:	e007      	b.n	8004afe <cos+0x2e>
 8004aee:	4a19      	ldr	r2, [pc, #100]	; (8004b54 <cos+0x84>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	dd09      	ble.n	8004b08 <cos+0x38>
 8004af4:	ee10 2a10 	vmov	r2, s0
 8004af8:	460b      	mov	r3, r1
 8004afa:	f7fb fb89 	bl	8000210 <__aeabi_dsub>
 8004afe:	ec41 0b10 	vmov	d0, r0, r1
 8004b02:	b005      	add	sp, #20
 8004b04:	f85d fb04 	ldr.w	pc, [sp], #4
 8004b08:	4668      	mov	r0, sp
 8004b0a:	f000 f9a5 	bl	8004e58 <__ieee754_rem_pio2>
 8004b0e:	f000 0003 	and.w	r0, r0, #3
 8004b12:	2801      	cmp	r0, #1
 8004b14:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004b18:	ed9d 0b00 	vldr	d0, [sp]
 8004b1c:	d007      	beq.n	8004b2e <cos+0x5e>
 8004b1e:	2802      	cmp	r0, #2
 8004b20:	d00e      	beq.n	8004b40 <cos+0x70>
 8004b22:	2800      	cmp	r0, #0
 8004b24:	d0de      	beq.n	8004ae4 <cos+0x14>
 8004b26:	2001      	movs	r0, #1
 8004b28:	f001 f872 	bl	8005c10 <__kernel_sin>
 8004b2c:	e7dc      	b.n	8004ae8 <cos+0x18>
 8004b2e:	f001 f86f 	bl	8005c10 <__kernel_sin>
 8004b32:	ec53 2b10 	vmov	r2, r3, d0
 8004b36:	ee10 0a10 	vmov	r0, s0
 8004b3a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8004b3e:	e7de      	b.n	8004afe <cos+0x2e>
 8004b40:	f000 fc2e 	bl	80053a0 <__kernel_cos>
 8004b44:	e7f5      	b.n	8004b32 <cos+0x62>
 8004b46:	bf00      	nop
	...
 8004b50:	3fe921fb 	.word	0x3fe921fb
 8004b54:	7fefffff 	.word	0x7fefffff

08004b58 <sin>:
 8004b58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004b5a:	ec51 0b10 	vmov	r0, r1, d0
 8004b5e:	4a20      	ldr	r2, [pc, #128]	; (8004be0 <sin+0x88>)
 8004b60:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004b64:	4293      	cmp	r3, r2
 8004b66:	dc07      	bgt.n	8004b78 <sin+0x20>
 8004b68:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8004bd8 <sin+0x80>
 8004b6c:	2000      	movs	r0, #0
 8004b6e:	f001 f84f 	bl	8005c10 <__kernel_sin>
 8004b72:	ec51 0b10 	vmov	r0, r1, d0
 8004b76:	e007      	b.n	8004b88 <sin+0x30>
 8004b78:	4a1a      	ldr	r2, [pc, #104]	; (8004be4 <sin+0x8c>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	dd09      	ble.n	8004b92 <sin+0x3a>
 8004b7e:	ee10 2a10 	vmov	r2, s0
 8004b82:	460b      	mov	r3, r1
 8004b84:	f7fb fb44 	bl	8000210 <__aeabi_dsub>
 8004b88:	ec41 0b10 	vmov	d0, r0, r1
 8004b8c:	b005      	add	sp, #20
 8004b8e:	f85d fb04 	ldr.w	pc, [sp], #4
 8004b92:	4668      	mov	r0, sp
 8004b94:	f000 f960 	bl	8004e58 <__ieee754_rem_pio2>
 8004b98:	f000 0003 	and.w	r0, r0, #3
 8004b9c:	2801      	cmp	r0, #1
 8004b9e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004ba2:	ed9d 0b00 	vldr	d0, [sp]
 8004ba6:	d004      	beq.n	8004bb2 <sin+0x5a>
 8004ba8:	2802      	cmp	r0, #2
 8004baa:	d005      	beq.n	8004bb8 <sin+0x60>
 8004bac:	b970      	cbnz	r0, 8004bcc <sin+0x74>
 8004bae:	2001      	movs	r0, #1
 8004bb0:	e7dd      	b.n	8004b6e <sin+0x16>
 8004bb2:	f000 fbf5 	bl	80053a0 <__kernel_cos>
 8004bb6:	e7dc      	b.n	8004b72 <sin+0x1a>
 8004bb8:	2001      	movs	r0, #1
 8004bba:	f001 f829 	bl	8005c10 <__kernel_sin>
 8004bbe:	ec53 2b10 	vmov	r2, r3, d0
 8004bc2:	ee10 0a10 	vmov	r0, s0
 8004bc6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8004bca:	e7dd      	b.n	8004b88 <sin+0x30>
 8004bcc:	f000 fbe8 	bl	80053a0 <__kernel_cos>
 8004bd0:	e7f5      	b.n	8004bbe <sin+0x66>
 8004bd2:	bf00      	nop
 8004bd4:	f3af 8000 	nop.w
	...
 8004be0:	3fe921fb 	.word	0x3fe921fb
 8004be4:	7fefffff 	.word	0x7fefffff

08004be8 <atan2>:
 8004be8:	f000 b85a 	b.w	8004ca0 <__ieee754_atan2>

08004bec <sqrt>:
 8004bec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004bf0:	ed2d 8b02 	vpush	{d8}
 8004bf4:	b08b      	sub	sp, #44	; 0x2c
 8004bf6:	ec55 4b10 	vmov	r4, r5, d0
 8004bfa:	f000 fb1f 	bl	800523c <__ieee754_sqrt>
 8004bfe:	4b26      	ldr	r3, [pc, #152]	; (8004c98 <sqrt+0xac>)
 8004c00:	eeb0 8a40 	vmov.f32	s16, s0
 8004c04:	eef0 8a60 	vmov.f32	s17, s1
 8004c08:	f993 6000 	ldrsb.w	r6, [r3]
 8004c0c:	1c73      	adds	r3, r6, #1
 8004c0e:	d02a      	beq.n	8004c66 <sqrt+0x7a>
 8004c10:	4622      	mov	r2, r4
 8004c12:	462b      	mov	r3, r5
 8004c14:	4620      	mov	r0, r4
 8004c16:	4629      	mov	r1, r5
 8004c18:	f7fb ff48 	bl	8000aac <__aeabi_dcmpun>
 8004c1c:	4607      	mov	r7, r0
 8004c1e:	bb10      	cbnz	r0, 8004c66 <sqrt+0x7a>
 8004c20:	f04f 0800 	mov.w	r8, #0
 8004c24:	f04f 0900 	mov.w	r9, #0
 8004c28:	4642      	mov	r2, r8
 8004c2a:	464b      	mov	r3, r9
 8004c2c:	4620      	mov	r0, r4
 8004c2e:	4629      	mov	r1, r5
 8004c30:	f7fb ff14 	bl	8000a5c <__aeabi_dcmplt>
 8004c34:	b1b8      	cbz	r0, 8004c66 <sqrt+0x7a>
 8004c36:	2301      	movs	r3, #1
 8004c38:	9300      	str	r3, [sp, #0]
 8004c3a:	4b18      	ldr	r3, [pc, #96]	; (8004c9c <sqrt+0xb0>)
 8004c3c:	9301      	str	r3, [sp, #4]
 8004c3e:	9708      	str	r7, [sp, #32]
 8004c40:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8004c44:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004c48:	b9b6      	cbnz	r6, 8004c78 <sqrt+0x8c>
 8004c4a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8004c4e:	4668      	mov	r0, sp
 8004c50:	f001 face 	bl	80061f0 <matherr>
 8004c54:	b1d0      	cbz	r0, 8004c8c <sqrt+0xa0>
 8004c56:	9b08      	ldr	r3, [sp, #32]
 8004c58:	b11b      	cbz	r3, 8004c62 <sqrt+0x76>
 8004c5a:	f001 fb55 	bl	8006308 <__errno>
 8004c5e:	9b08      	ldr	r3, [sp, #32]
 8004c60:	6003      	str	r3, [r0, #0]
 8004c62:	ed9d 8b06 	vldr	d8, [sp, #24]
 8004c66:	eeb0 0a48 	vmov.f32	s0, s16
 8004c6a:	eef0 0a68 	vmov.f32	s1, s17
 8004c6e:	b00b      	add	sp, #44	; 0x2c
 8004c70:	ecbd 8b02 	vpop	{d8}
 8004c74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004c78:	4642      	mov	r2, r8
 8004c7a:	464b      	mov	r3, r9
 8004c7c:	4640      	mov	r0, r8
 8004c7e:	4649      	mov	r1, r9
 8004c80:	f7fb fda4 	bl	80007cc <__aeabi_ddiv>
 8004c84:	2e02      	cmp	r6, #2
 8004c86:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004c8a:	d1e0      	bne.n	8004c4e <sqrt+0x62>
 8004c8c:	f001 fb3c 	bl	8006308 <__errno>
 8004c90:	2321      	movs	r3, #33	; 0x21
 8004c92:	6003      	str	r3, [r0, #0]
 8004c94:	e7df      	b.n	8004c56 <sqrt+0x6a>
 8004c96:	bf00      	nop
 8004c98:	20000014 	.word	0x20000014
 8004c9c:	08006348 	.word	0x08006348

08004ca0 <__ieee754_atan2>:
 8004ca0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ca4:	ec57 6b11 	vmov	r6, r7, d1
 8004ca8:	4273      	negs	r3, r6
 8004caa:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8004cae:	4333      	orrs	r3, r6
 8004cb0:	f8df c19c 	ldr.w	ip, [pc, #412]	; 8004e50 <__ieee754_atan2+0x1b0>
 8004cb4:	ec51 0b10 	vmov	r0, r1, d0
 8004cb8:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8004cbc:	4563      	cmp	r3, ip
 8004cbe:	ee11 8a10 	vmov	r8, s2
 8004cc2:	ee10 9a10 	vmov	r9, s0
 8004cc6:	468e      	mov	lr, r1
 8004cc8:	d807      	bhi.n	8004cda <__ieee754_atan2+0x3a>
 8004cca:	4244      	negs	r4, r0
 8004ccc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004cd0:	4304      	orrs	r4, r0
 8004cd2:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8004cd6:	4564      	cmp	r4, ip
 8004cd8:	d907      	bls.n	8004cea <__ieee754_atan2+0x4a>
 8004cda:	4632      	mov	r2, r6
 8004cdc:	463b      	mov	r3, r7
 8004cde:	f7fb fa99 	bl	8000214 <__adddf3>
 8004ce2:	ec41 0b10 	vmov	d0, r0, r1
 8004ce6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004cea:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8004cee:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8004cf2:	4334      	orrs	r4, r6
 8004cf4:	d103      	bne.n	8004cfe <__ieee754_atan2+0x5e>
 8004cf6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004cfa:	f001 b845 	b.w	8005d88 <atan>
 8004cfe:	17bc      	asrs	r4, r7, #30
 8004d00:	f004 0402 	and.w	r4, r4, #2
 8004d04:	ea59 0903 	orrs.w	r9, r9, r3
 8004d08:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8004d0c:	d107      	bne.n	8004d1e <__ieee754_atan2+0x7e>
 8004d0e:	2c02      	cmp	r4, #2
 8004d10:	d030      	beq.n	8004d74 <__ieee754_atan2+0xd4>
 8004d12:	2c03      	cmp	r4, #3
 8004d14:	d1e5      	bne.n	8004ce2 <__ieee754_atan2+0x42>
 8004d16:	a13c      	add	r1, pc, #240	; (adr r1, 8004e08 <__ieee754_atan2+0x168>)
 8004d18:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004d1c:	e7e1      	b.n	8004ce2 <__ieee754_atan2+0x42>
 8004d1e:	ea58 0802 	orrs.w	r8, r8, r2
 8004d22:	d106      	bne.n	8004d32 <__ieee754_atan2+0x92>
 8004d24:	f1be 0f00 	cmp.w	lr, #0
 8004d28:	da6a      	bge.n	8004e00 <__ieee754_atan2+0x160>
 8004d2a:	a139      	add	r1, pc, #228	; (adr r1, 8004e10 <__ieee754_atan2+0x170>)
 8004d2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004d30:	e7d7      	b.n	8004ce2 <__ieee754_atan2+0x42>
 8004d32:	4562      	cmp	r2, ip
 8004d34:	d122      	bne.n	8004d7c <__ieee754_atan2+0xdc>
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d111      	bne.n	8004d5e <__ieee754_atan2+0xbe>
 8004d3a:	2c02      	cmp	r4, #2
 8004d3c:	d007      	beq.n	8004d4e <__ieee754_atan2+0xae>
 8004d3e:	2c03      	cmp	r4, #3
 8004d40:	d009      	beq.n	8004d56 <__ieee754_atan2+0xb6>
 8004d42:	2c01      	cmp	r4, #1
 8004d44:	d156      	bne.n	8004df4 <__ieee754_atan2+0x154>
 8004d46:	a134      	add	r1, pc, #208	; (adr r1, 8004e18 <__ieee754_atan2+0x178>)
 8004d48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004d4c:	e7c9      	b.n	8004ce2 <__ieee754_atan2+0x42>
 8004d4e:	a134      	add	r1, pc, #208	; (adr r1, 8004e20 <__ieee754_atan2+0x180>)
 8004d50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004d54:	e7c5      	b.n	8004ce2 <__ieee754_atan2+0x42>
 8004d56:	a134      	add	r1, pc, #208	; (adr r1, 8004e28 <__ieee754_atan2+0x188>)
 8004d58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004d5c:	e7c1      	b.n	8004ce2 <__ieee754_atan2+0x42>
 8004d5e:	2c02      	cmp	r4, #2
 8004d60:	d008      	beq.n	8004d74 <__ieee754_atan2+0xd4>
 8004d62:	2c03      	cmp	r4, #3
 8004d64:	d0d7      	beq.n	8004d16 <__ieee754_atan2+0x76>
 8004d66:	2c01      	cmp	r4, #1
 8004d68:	f04f 0000 	mov.w	r0, #0
 8004d6c:	d146      	bne.n	8004dfc <__ieee754_atan2+0x15c>
 8004d6e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8004d72:	e7b6      	b.n	8004ce2 <__ieee754_atan2+0x42>
 8004d74:	a12e      	add	r1, pc, #184	; (adr r1, 8004e30 <__ieee754_atan2+0x190>)
 8004d76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004d7a:	e7b2      	b.n	8004ce2 <__ieee754_atan2+0x42>
 8004d7c:	4563      	cmp	r3, ip
 8004d7e:	d0d1      	beq.n	8004d24 <__ieee754_atan2+0x84>
 8004d80:	1a9b      	subs	r3, r3, r2
 8004d82:	151b      	asrs	r3, r3, #20
 8004d84:	2b3c      	cmp	r3, #60	; 0x3c
 8004d86:	dc1e      	bgt.n	8004dc6 <__ieee754_atan2+0x126>
 8004d88:	2f00      	cmp	r7, #0
 8004d8a:	da01      	bge.n	8004d90 <__ieee754_atan2+0xf0>
 8004d8c:	333c      	adds	r3, #60	; 0x3c
 8004d8e:	db1e      	blt.n	8004dce <__ieee754_atan2+0x12e>
 8004d90:	4632      	mov	r2, r6
 8004d92:	463b      	mov	r3, r7
 8004d94:	f7fb fd1a 	bl	80007cc <__aeabi_ddiv>
 8004d98:	ec41 0b10 	vmov	d0, r0, r1
 8004d9c:	f001 f99c 	bl	80060d8 <fabs>
 8004da0:	f000 fff2 	bl	8005d88 <atan>
 8004da4:	ec51 0b10 	vmov	r0, r1, d0
 8004da8:	2c01      	cmp	r4, #1
 8004daa:	d013      	beq.n	8004dd4 <__ieee754_atan2+0x134>
 8004dac:	2c02      	cmp	r4, #2
 8004dae:	d014      	beq.n	8004dda <__ieee754_atan2+0x13a>
 8004db0:	2c00      	cmp	r4, #0
 8004db2:	d096      	beq.n	8004ce2 <__ieee754_atan2+0x42>
 8004db4:	a320      	add	r3, pc, #128	; (adr r3, 8004e38 <__ieee754_atan2+0x198>)
 8004db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dba:	f7fb fa29 	bl	8000210 <__aeabi_dsub>
 8004dbe:	a31c      	add	r3, pc, #112	; (adr r3, 8004e30 <__ieee754_atan2+0x190>)
 8004dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc4:	e013      	b.n	8004dee <__ieee754_atan2+0x14e>
 8004dc6:	a11e      	add	r1, pc, #120	; (adr r1, 8004e40 <__ieee754_atan2+0x1a0>)
 8004dc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004dcc:	e7ec      	b.n	8004da8 <__ieee754_atan2+0x108>
 8004dce:	2000      	movs	r0, #0
 8004dd0:	2100      	movs	r1, #0
 8004dd2:	e7e9      	b.n	8004da8 <__ieee754_atan2+0x108>
 8004dd4:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8004dd8:	e783      	b.n	8004ce2 <__ieee754_atan2+0x42>
 8004dda:	a317      	add	r3, pc, #92	; (adr r3, 8004e38 <__ieee754_atan2+0x198>)
 8004ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de0:	f7fb fa16 	bl	8000210 <__aeabi_dsub>
 8004de4:	4602      	mov	r2, r0
 8004de6:	460b      	mov	r3, r1
 8004de8:	a111      	add	r1, pc, #68	; (adr r1, 8004e30 <__ieee754_atan2+0x190>)
 8004dea:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004dee:	f7fb fa0f 	bl	8000210 <__aeabi_dsub>
 8004df2:	e776      	b.n	8004ce2 <__ieee754_atan2+0x42>
 8004df4:	a114      	add	r1, pc, #80	; (adr r1, 8004e48 <__ieee754_atan2+0x1a8>)
 8004df6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004dfa:	e772      	b.n	8004ce2 <__ieee754_atan2+0x42>
 8004dfc:	2100      	movs	r1, #0
 8004dfe:	e770      	b.n	8004ce2 <__ieee754_atan2+0x42>
 8004e00:	a10f      	add	r1, pc, #60	; (adr r1, 8004e40 <__ieee754_atan2+0x1a0>)
 8004e02:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004e06:	e76c      	b.n	8004ce2 <__ieee754_atan2+0x42>
 8004e08:	54442d18 	.word	0x54442d18
 8004e0c:	c00921fb 	.word	0xc00921fb
 8004e10:	54442d18 	.word	0x54442d18
 8004e14:	bff921fb 	.word	0xbff921fb
 8004e18:	54442d18 	.word	0x54442d18
 8004e1c:	bfe921fb 	.word	0xbfe921fb
 8004e20:	7f3321d2 	.word	0x7f3321d2
 8004e24:	4002d97c 	.word	0x4002d97c
 8004e28:	7f3321d2 	.word	0x7f3321d2
 8004e2c:	c002d97c 	.word	0xc002d97c
 8004e30:	54442d18 	.word	0x54442d18
 8004e34:	400921fb 	.word	0x400921fb
 8004e38:	33145c07 	.word	0x33145c07
 8004e3c:	3ca1a626 	.word	0x3ca1a626
 8004e40:	54442d18 	.word	0x54442d18
 8004e44:	3ff921fb 	.word	0x3ff921fb
 8004e48:	54442d18 	.word	0x54442d18
 8004e4c:	3fe921fb 	.word	0x3fe921fb
 8004e50:	7ff00000 	.word	0x7ff00000
 8004e54:	00000000 	.word	0x00000000

08004e58 <__ieee754_rem_pio2>:
 8004e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e5c:	ec57 6b10 	vmov	r6, r7, d0
 8004e60:	4bc3      	ldr	r3, [pc, #780]	; (8005170 <__ieee754_rem_pio2+0x318>)
 8004e62:	b08d      	sub	sp, #52	; 0x34
 8004e64:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8004e68:	4598      	cmp	r8, r3
 8004e6a:	4604      	mov	r4, r0
 8004e6c:	9704      	str	r7, [sp, #16]
 8004e6e:	dc07      	bgt.n	8004e80 <__ieee754_rem_pio2+0x28>
 8004e70:	2200      	movs	r2, #0
 8004e72:	2300      	movs	r3, #0
 8004e74:	ed84 0b00 	vstr	d0, [r4]
 8004e78:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8004e7c:	2500      	movs	r5, #0
 8004e7e:	e027      	b.n	8004ed0 <__ieee754_rem_pio2+0x78>
 8004e80:	4bbc      	ldr	r3, [pc, #752]	; (8005174 <__ieee754_rem_pio2+0x31c>)
 8004e82:	4598      	cmp	r8, r3
 8004e84:	dc75      	bgt.n	8004f72 <__ieee754_rem_pio2+0x11a>
 8004e86:	9b04      	ldr	r3, [sp, #16]
 8004e88:	4dbb      	ldr	r5, [pc, #748]	; (8005178 <__ieee754_rem_pio2+0x320>)
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	ee10 0a10 	vmov	r0, s0
 8004e90:	a3a9      	add	r3, pc, #676	; (adr r3, 8005138 <__ieee754_rem_pio2+0x2e0>)
 8004e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e96:	4639      	mov	r1, r7
 8004e98:	dd36      	ble.n	8004f08 <__ieee754_rem_pio2+0xb0>
 8004e9a:	f7fb f9b9 	bl	8000210 <__aeabi_dsub>
 8004e9e:	45a8      	cmp	r8, r5
 8004ea0:	4606      	mov	r6, r0
 8004ea2:	460f      	mov	r7, r1
 8004ea4:	d018      	beq.n	8004ed8 <__ieee754_rem_pio2+0x80>
 8004ea6:	a3a6      	add	r3, pc, #664	; (adr r3, 8005140 <__ieee754_rem_pio2+0x2e8>)
 8004ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eac:	f7fb f9b0 	bl	8000210 <__aeabi_dsub>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	460b      	mov	r3, r1
 8004eb4:	e9c4 2300 	strd	r2, r3, [r4]
 8004eb8:	4630      	mov	r0, r6
 8004eba:	4639      	mov	r1, r7
 8004ebc:	f7fb f9a8 	bl	8000210 <__aeabi_dsub>
 8004ec0:	a39f      	add	r3, pc, #636	; (adr r3, 8005140 <__ieee754_rem_pio2+0x2e8>)
 8004ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ec6:	f7fb f9a3 	bl	8000210 <__aeabi_dsub>
 8004eca:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004ece:	2501      	movs	r5, #1
 8004ed0:	4628      	mov	r0, r5
 8004ed2:	b00d      	add	sp, #52	; 0x34
 8004ed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ed8:	a39b      	add	r3, pc, #620	; (adr r3, 8005148 <__ieee754_rem_pio2+0x2f0>)
 8004eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ede:	f7fb f997 	bl	8000210 <__aeabi_dsub>
 8004ee2:	a39b      	add	r3, pc, #620	; (adr r3, 8005150 <__ieee754_rem_pio2+0x2f8>)
 8004ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ee8:	4606      	mov	r6, r0
 8004eea:	460f      	mov	r7, r1
 8004eec:	f7fb f990 	bl	8000210 <__aeabi_dsub>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	460b      	mov	r3, r1
 8004ef4:	e9c4 2300 	strd	r2, r3, [r4]
 8004ef8:	4630      	mov	r0, r6
 8004efa:	4639      	mov	r1, r7
 8004efc:	f7fb f988 	bl	8000210 <__aeabi_dsub>
 8004f00:	a393      	add	r3, pc, #588	; (adr r3, 8005150 <__ieee754_rem_pio2+0x2f8>)
 8004f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f06:	e7de      	b.n	8004ec6 <__ieee754_rem_pio2+0x6e>
 8004f08:	f7fb f984 	bl	8000214 <__adddf3>
 8004f0c:	45a8      	cmp	r8, r5
 8004f0e:	4606      	mov	r6, r0
 8004f10:	460f      	mov	r7, r1
 8004f12:	d016      	beq.n	8004f42 <__ieee754_rem_pio2+0xea>
 8004f14:	a38a      	add	r3, pc, #552	; (adr r3, 8005140 <__ieee754_rem_pio2+0x2e8>)
 8004f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f1a:	f7fb f97b 	bl	8000214 <__adddf3>
 8004f1e:	4602      	mov	r2, r0
 8004f20:	460b      	mov	r3, r1
 8004f22:	e9c4 2300 	strd	r2, r3, [r4]
 8004f26:	4630      	mov	r0, r6
 8004f28:	4639      	mov	r1, r7
 8004f2a:	f7fb f971 	bl	8000210 <__aeabi_dsub>
 8004f2e:	a384      	add	r3, pc, #528	; (adr r3, 8005140 <__ieee754_rem_pio2+0x2e8>)
 8004f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f34:	f7fb f96e 	bl	8000214 <__adddf3>
 8004f38:	f04f 35ff 	mov.w	r5, #4294967295
 8004f3c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004f40:	e7c6      	b.n	8004ed0 <__ieee754_rem_pio2+0x78>
 8004f42:	a381      	add	r3, pc, #516	; (adr r3, 8005148 <__ieee754_rem_pio2+0x2f0>)
 8004f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f48:	f7fb f964 	bl	8000214 <__adddf3>
 8004f4c:	a380      	add	r3, pc, #512	; (adr r3, 8005150 <__ieee754_rem_pio2+0x2f8>)
 8004f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f52:	4606      	mov	r6, r0
 8004f54:	460f      	mov	r7, r1
 8004f56:	f7fb f95d 	bl	8000214 <__adddf3>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	460b      	mov	r3, r1
 8004f5e:	e9c4 2300 	strd	r2, r3, [r4]
 8004f62:	4630      	mov	r0, r6
 8004f64:	4639      	mov	r1, r7
 8004f66:	f7fb f953 	bl	8000210 <__aeabi_dsub>
 8004f6a:	a379      	add	r3, pc, #484	; (adr r3, 8005150 <__ieee754_rem_pio2+0x2f8>)
 8004f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f70:	e7e0      	b.n	8004f34 <__ieee754_rem_pio2+0xdc>
 8004f72:	4b82      	ldr	r3, [pc, #520]	; (800517c <__ieee754_rem_pio2+0x324>)
 8004f74:	4598      	cmp	r8, r3
 8004f76:	f300 80d0 	bgt.w	800511a <__ieee754_rem_pio2+0x2c2>
 8004f7a:	f001 f8ad 	bl	80060d8 <fabs>
 8004f7e:	ec57 6b10 	vmov	r6, r7, d0
 8004f82:	ee10 0a10 	vmov	r0, s0
 8004f86:	a374      	add	r3, pc, #464	; (adr r3, 8005158 <__ieee754_rem_pio2+0x300>)
 8004f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f8c:	4639      	mov	r1, r7
 8004f8e:	f7fb faf3 	bl	8000578 <__aeabi_dmul>
 8004f92:	2200      	movs	r2, #0
 8004f94:	4b7a      	ldr	r3, [pc, #488]	; (8005180 <__ieee754_rem_pio2+0x328>)
 8004f96:	f7fb f93d 	bl	8000214 <__adddf3>
 8004f9a:	f7fb fd9d 	bl	8000ad8 <__aeabi_d2iz>
 8004f9e:	4605      	mov	r5, r0
 8004fa0:	f7fb fa84 	bl	80004ac <__aeabi_i2d>
 8004fa4:	a364      	add	r3, pc, #400	; (adr r3, 8005138 <__ieee754_rem_pio2+0x2e0>)
 8004fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004faa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004fae:	f7fb fae3 	bl	8000578 <__aeabi_dmul>
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	460b      	mov	r3, r1
 8004fb6:	4630      	mov	r0, r6
 8004fb8:	4639      	mov	r1, r7
 8004fba:	f7fb f929 	bl	8000210 <__aeabi_dsub>
 8004fbe:	a360      	add	r3, pc, #384	; (adr r3, 8005140 <__ieee754_rem_pio2+0x2e8>)
 8004fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fc4:	4682      	mov	sl, r0
 8004fc6:	468b      	mov	fp, r1
 8004fc8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004fcc:	f7fb fad4 	bl	8000578 <__aeabi_dmul>
 8004fd0:	2d1f      	cmp	r5, #31
 8004fd2:	4606      	mov	r6, r0
 8004fd4:	460f      	mov	r7, r1
 8004fd6:	dc2a      	bgt.n	800502e <__ieee754_rem_pio2+0x1d6>
 8004fd8:	1e6a      	subs	r2, r5, #1
 8004fda:	4b6a      	ldr	r3, [pc, #424]	; (8005184 <__ieee754_rem_pio2+0x32c>)
 8004fdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fe0:	4598      	cmp	r8, r3
 8004fe2:	d024      	beq.n	800502e <__ieee754_rem_pio2+0x1d6>
 8004fe4:	4632      	mov	r2, r6
 8004fe6:	463b      	mov	r3, r7
 8004fe8:	4650      	mov	r0, sl
 8004fea:	4659      	mov	r1, fp
 8004fec:	f7fb f910 	bl	8000210 <__aeabi_dsub>
 8004ff0:	e9c4 0100 	strd	r0, r1, [r4]
 8004ff4:	e9d4 8900 	ldrd	r8, r9, [r4]
 8004ff8:	4650      	mov	r0, sl
 8004ffa:	4642      	mov	r2, r8
 8004ffc:	464b      	mov	r3, r9
 8004ffe:	4659      	mov	r1, fp
 8005000:	f7fb f906 	bl	8000210 <__aeabi_dsub>
 8005004:	463b      	mov	r3, r7
 8005006:	4632      	mov	r2, r6
 8005008:	f7fb f902 	bl	8000210 <__aeabi_dsub>
 800500c:	9b04      	ldr	r3, [sp, #16]
 800500e:	2b00      	cmp	r3, #0
 8005010:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005014:	f6bf af5c 	bge.w	8004ed0 <__ieee754_rem_pio2+0x78>
 8005018:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800501c:	6063      	str	r3, [r4, #4]
 800501e:	f8c4 8000 	str.w	r8, [r4]
 8005022:	60a0      	str	r0, [r4, #8]
 8005024:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005028:	60e3      	str	r3, [r4, #12]
 800502a:	426d      	negs	r5, r5
 800502c:	e750      	b.n	8004ed0 <__ieee754_rem_pio2+0x78>
 800502e:	4632      	mov	r2, r6
 8005030:	463b      	mov	r3, r7
 8005032:	4650      	mov	r0, sl
 8005034:	4659      	mov	r1, fp
 8005036:	f7fb f8eb 	bl	8000210 <__aeabi_dsub>
 800503a:	ea4f 5228 	mov.w	r2, r8, asr #20
 800503e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005042:	1ad3      	subs	r3, r2, r3
 8005044:	2b10      	cmp	r3, #16
 8005046:	e9c4 0100 	strd	r0, r1, [r4]
 800504a:	9205      	str	r2, [sp, #20]
 800504c:	ddd2      	ble.n	8004ff4 <__ieee754_rem_pio2+0x19c>
 800504e:	a33e      	add	r3, pc, #248	; (adr r3, 8005148 <__ieee754_rem_pio2+0x2f0>)
 8005050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005054:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005058:	f7fb fa8e 	bl	8000578 <__aeabi_dmul>
 800505c:	4606      	mov	r6, r0
 800505e:	460f      	mov	r7, r1
 8005060:	4602      	mov	r2, r0
 8005062:	460b      	mov	r3, r1
 8005064:	4650      	mov	r0, sl
 8005066:	4659      	mov	r1, fp
 8005068:	f7fb f8d2 	bl	8000210 <__aeabi_dsub>
 800506c:	4602      	mov	r2, r0
 800506e:	460b      	mov	r3, r1
 8005070:	4680      	mov	r8, r0
 8005072:	4689      	mov	r9, r1
 8005074:	4650      	mov	r0, sl
 8005076:	4659      	mov	r1, fp
 8005078:	f7fb f8ca 	bl	8000210 <__aeabi_dsub>
 800507c:	4632      	mov	r2, r6
 800507e:	463b      	mov	r3, r7
 8005080:	f7fb f8c6 	bl	8000210 <__aeabi_dsub>
 8005084:	a332      	add	r3, pc, #200	; (adr r3, 8005150 <__ieee754_rem_pio2+0x2f8>)
 8005086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800508a:	4606      	mov	r6, r0
 800508c:	460f      	mov	r7, r1
 800508e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005092:	f7fb fa71 	bl	8000578 <__aeabi_dmul>
 8005096:	4632      	mov	r2, r6
 8005098:	463b      	mov	r3, r7
 800509a:	f7fb f8b9 	bl	8000210 <__aeabi_dsub>
 800509e:	4602      	mov	r2, r0
 80050a0:	460b      	mov	r3, r1
 80050a2:	4606      	mov	r6, r0
 80050a4:	460f      	mov	r7, r1
 80050a6:	4640      	mov	r0, r8
 80050a8:	4649      	mov	r1, r9
 80050aa:	f7fb f8b1 	bl	8000210 <__aeabi_dsub>
 80050ae:	9a05      	ldr	r2, [sp, #20]
 80050b0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80050b4:	1ad3      	subs	r3, r2, r3
 80050b6:	2b31      	cmp	r3, #49	; 0x31
 80050b8:	e9c4 0100 	strd	r0, r1, [r4]
 80050bc:	dd2a      	ble.n	8005114 <__ieee754_rem_pio2+0x2bc>
 80050be:	a328      	add	r3, pc, #160	; (adr r3, 8005160 <__ieee754_rem_pio2+0x308>)
 80050c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050c8:	f7fb fa56 	bl	8000578 <__aeabi_dmul>
 80050cc:	4606      	mov	r6, r0
 80050ce:	460f      	mov	r7, r1
 80050d0:	4602      	mov	r2, r0
 80050d2:	460b      	mov	r3, r1
 80050d4:	4640      	mov	r0, r8
 80050d6:	4649      	mov	r1, r9
 80050d8:	f7fb f89a 	bl	8000210 <__aeabi_dsub>
 80050dc:	4602      	mov	r2, r0
 80050de:	460b      	mov	r3, r1
 80050e0:	4682      	mov	sl, r0
 80050e2:	468b      	mov	fp, r1
 80050e4:	4640      	mov	r0, r8
 80050e6:	4649      	mov	r1, r9
 80050e8:	f7fb f892 	bl	8000210 <__aeabi_dsub>
 80050ec:	4632      	mov	r2, r6
 80050ee:	463b      	mov	r3, r7
 80050f0:	f7fb f88e 	bl	8000210 <__aeabi_dsub>
 80050f4:	a31c      	add	r3, pc, #112	; (adr r3, 8005168 <__ieee754_rem_pio2+0x310>)
 80050f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050fa:	4606      	mov	r6, r0
 80050fc:	460f      	mov	r7, r1
 80050fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005102:	f7fb fa39 	bl	8000578 <__aeabi_dmul>
 8005106:	4632      	mov	r2, r6
 8005108:	463b      	mov	r3, r7
 800510a:	f7fb f881 	bl	8000210 <__aeabi_dsub>
 800510e:	4606      	mov	r6, r0
 8005110:	460f      	mov	r7, r1
 8005112:	e767      	b.n	8004fe4 <__ieee754_rem_pio2+0x18c>
 8005114:	46c2      	mov	sl, r8
 8005116:	46cb      	mov	fp, r9
 8005118:	e76c      	b.n	8004ff4 <__ieee754_rem_pio2+0x19c>
 800511a:	4b1b      	ldr	r3, [pc, #108]	; (8005188 <__ieee754_rem_pio2+0x330>)
 800511c:	4598      	cmp	r8, r3
 800511e:	dd35      	ble.n	800518c <__ieee754_rem_pio2+0x334>
 8005120:	ee10 2a10 	vmov	r2, s0
 8005124:	463b      	mov	r3, r7
 8005126:	4630      	mov	r0, r6
 8005128:	4639      	mov	r1, r7
 800512a:	f7fb f871 	bl	8000210 <__aeabi_dsub>
 800512e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005132:	e9c4 0100 	strd	r0, r1, [r4]
 8005136:	e6a1      	b.n	8004e7c <__ieee754_rem_pio2+0x24>
 8005138:	54400000 	.word	0x54400000
 800513c:	3ff921fb 	.word	0x3ff921fb
 8005140:	1a626331 	.word	0x1a626331
 8005144:	3dd0b461 	.word	0x3dd0b461
 8005148:	1a600000 	.word	0x1a600000
 800514c:	3dd0b461 	.word	0x3dd0b461
 8005150:	2e037073 	.word	0x2e037073
 8005154:	3ba3198a 	.word	0x3ba3198a
 8005158:	6dc9c883 	.word	0x6dc9c883
 800515c:	3fe45f30 	.word	0x3fe45f30
 8005160:	2e000000 	.word	0x2e000000
 8005164:	3ba3198a 	.word	0x3ba3198a
 8005168:	252049c1 	.word	0x252049c1
 800516c:	397b839a 	.word	0x397b839a
 8005170:	3fe921fb 	.word	0x3fe921fb
 8005174:	4002d97b 	.word	0x4002d97b
 8005178:	3ff921fb 	.word	0x3ff921fb
 800517c:	413921fb 	.word	0x413921fb
 8005180:	3fe00000 	.word	0x3fe00000
 8005184:	08006350 	.word	0x08006350
 8005188:	7fefffff 	.word	0x7fefffff
 800518c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8005190:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8005194:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8005198:	4630      	mov	r0, r6
 800519a:	460f      	mov	r7, r1
 800519c:	f7fb fc9c 	bl	8000ad8 <__aeabi_d2iz>
 80051a0:	f7fb f984 	bl	80004ac <__aeabi_i2d>
 80051a4:	4602      	mov	r2, r0
 80051a6:	460b      	mov	r3, r1
 80051a8:	4630      	mov	r0, r6
 80051aa:	4639      	mov	r1, r7
 80051ac:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80051b0:	f7fb f82e 	bl	8000210 <__aeabi_dsub>
 80051b4:	2200      	movs	r2, #0
 80051b6:	4b1f      	ldr	r3, [pc, #124]	; (8005234 <__ieee754_rem_pio2+0x3dc>)
 80051b8:	f7fb f9de 	bl	8000578 <__aeabi_dmul>
 80051bc:	460f      	mov	r7, r1
 80051be:	4606      	mov	r6, r0
 80051c0:	f7fb fc8a 	bl	8000ad8 <__aeabi_d2iz>
 80051c4:	f7fb f972 	bl	80004ac <__aeabi_i2d>
 80051c8:	4602      	mov	r2, r0
 80051ca:	460b      	mov	r3, r1
 80051cc:	4630      	mov	r0, r6
 80051ce:	4639      	mov	r1, r7
 80051d0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80051d4:	f7fb f81c 	bl	8000210 <__aeabi_dsub>
 80051d8:	2200      	movs	r2, #0
 80051da:	4b16      	ldr	r3, [pc, #88]	; (8005234 <__ieee754_rem_pio2+0x3dc>)
 80051dc:	f7fb f9cc 	bl	8000578 <__aeabi_dmul>
 80051e0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80051e4:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 80051e8:	f04f 0803 	mov.w	r8, #3
 80051ec:	2600      	movs	r6, #0
 80051ee:	2700      	movs	r7, #0
 80051f0:	4632      	mov	r2, r6
 80051f2:	463b      	mov	r3, r7
 80051f4:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80051f8:	f108 3aff 	add.w	sl, r8, #4294967295
 80051fc:	f7fb fc24 	bl	8000a48 <__aeabi_dcmpeq>
 8005200:	b9b0      	cbnz	r0, 8005230 <__ieee754_rem_pio2+0x3d8>
 8005202:	4b0d      	ldr	r3, [pc, #52]	; (8005238 <__ieee754_rem_pio2+0x3e0>)
 8005204:	9301      	str	r3, [sp, #4]
 8005206:	2302      	movs	r3, #2
 8005208:	9300      	str	r3, [sp, #0]
 800520a:	462a      	mov	r2, r5
 800520c:	4643      	mov	r3, r8
 800520e:	4621      	mov	r1, r4
 8005210:	a806      	add	r0, sp, #24
 8005212:	f000 f9ad 	bl	8005570 <__kernel_rem_pio2>
 8005216:	9b04      	ldr	r3, [sp, #16]
 8005218:	2b00      	cmp	r3, #0
 800521a:	4605      	mov	r5, r0
 800521c:	f6bf ae58 	bge.w	8004ed0 <__ieee754_rem_pio2+0x78>
 8005220:	6863      	ldr	r3, [r4, #4]
 8005222:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005226:	6063      	str	r3, [r4, #4]
 8005228:	68e3      	ldr	r3, [r4, #12]
 800522a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800522e:	e6fb      	b.n	8005028 <__ieee754_rem_pio2+0x1d0>
 8005230:	46d0      	mov	r8, sl
 8005232:	e7dd      	b.n	80051f0 <__ieee754_rem_pio2+0x398>
 8005234:	41700000 	.word	0x41700000
 8005238:	080063d0 	.word	0x080063d0

0800523c <__ieee754_sqrt>:
 800523c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005240:	ec55 4b10 	vmov	r4, r5, d0
 8005244:	4e54      	ldr	r6, [pc, #336]	; (8005398 <__ieee754_sqrt+0x15c>)
 8005246:	43ae      	bics	r6, r5
 8005248:	ee10 0a10 	vmov	r0, s0
 800524c:	462b      	mov	r3, r5
 800524e:	462a      	mov	r2, r5
 8005250:	4621      	mov	r1, r4
 8005252:	d113      	bne.n	800527c <__ieee754_sqrt+0x40>
 8005254:	ee10 2a10 	vmov	r2, s0
 8005258:	462b      	mov	r3, r5
 800525a:	ee10 0a10 	vmov	r0, s0
 800525e:	4629      	mov	r1, r5
 8005260:	f7fb f98a 	bl	8000578 <__aeabi_dmul>
 8005264:	4602      	mov	r2, r0
 8005266:	460b      	mov	r3, r1
 8005268:	4620      	mov	r0, r4
 800526a:	4629      	mov	r1, r5
 800526c:	f7fa ffd2 	bl	8000214 <__adddf3>
 8005270:	4604      	mov	r4, r0
 8005272:	460d      	mov	r5, r1
 8005274:	ec45 4b10 	vmov	d0, r4, r5
 8005278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800527c:	2d00      	cmp	r5, #0
 800527e:	dc10      	bgt.n	80052a2 <__ieee754_sqrt+0x66>
 8005280:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8005284:	4330      	orrs	r0, r6
 8005286:	d0f5      	beq.n	8005274 <__ieee754_sqrt+0x38>
 8005288:	b15d      	cbz	r5, 80052a2 <__ieee754_sqrt+0x66>
 800528a:	ee10 2a10 	vmov	r2, s0
 800528e:	462b      	mov	r3, r5
 8005290:	4620      	mov	r0, r4
 8005292:	4629      	mov	r1, r5
 8005294:	f7fa ffbc 	bl	8000210 <__aeabi_dsub>
 8005298:	4602      	mov	r2, r0
 800529a:	460b      	mov	r3, r1
 800529c:	f7fb fa96 	bl	80007cc <__aeabi_ddiv>
 80052a0:	e7e6      	b.n	8005270 <__ieee754_sqrt+0x34>
 80052a2:	151b      	asrs	r3, r3, #20
 80052a4:	d10c      	bne.n	80052c0 <__ieee754_sqrt+0x84>
 80052a6:	2a00      	cmp	r2, #0
 80052a8:	d06d      	beq.n	8005386 <__ieee754_sqrt+0x14a>
 80052aa:	2000      	movs	r0, #0
 80052ac:	02d6      	lsls	r6, r2, #11
 80052ae:	d56e      	bpl.n	800538e <__ieee754_sqrt+0x152>
 80052b0:	1e44      	subs	r4, r0, #1
 80052b2:	1b1b      	subs	r3, r3, r4
 80052b4:	f1c0 0420 	rsb	r4, r0, #32
 80052b8:	fa21 f404 	lsr.w	r4, r1, r4
 80052bc:	4322      	orrs	r2, r4
 80052be:	4081      	lsls	r1, r0
 80052c0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80052c4:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80052c8:	07dd      	lsls	r5, r3, #31
 80052ca:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80052ce:	bf42      	ittt	mi
 80052d0:	0052      	lslmi	r2, r2, #1
 80052d2:	eb02 72d1 	addmi.w	r2, r2, r1, lsr #31
 80052d6:	0049      	lslmi	r1, r1, #1
 80052d8:	1058      	asrs	r0, r3, #1
 80052da:	2500      	movs	r5, #0
 80052dc:	eb02 73d1 	add.w	r3, r2, r1, lsr #31
 80052e0:	441a      	add	r2, r3
 80052e2:	0049      	lsls	r1, r1, #1
 80052e4:	2316      	movs	r3, #22
 80052e6:	462c      	mov	r4, r5
 80052e8:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80052ec:	19a7      	adds	r7, r4, r6
 80052ee:	4297      	cmp	r7, r2
 80052f0:	bfde      	ittt	le
 80052f2:	1bd2      	suble	r2, r2, r7
 80052f4:	19bc      	addle	r4, r7, r6
 80052f6:	19ad      	addle	r5, r5, r6
 80052f8:	0052      	lsls	r2, r2, #1
 80052fa:	3b01      	subs	r3, #1
 80052fc:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8005300:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8005304:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8005308:	d1f0      	bne.n	80052ec <__ieee754_sqrt+0xb0>
 800530a:	f04f 0e20 	mov.w	lr, #32
 800530e:	469c      	mov	ip, r3
 8005310:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8005314:	42a2      	cmp	r2, r4
 8005316:	eb06 070c 	add.w	r7, r6, ip
 800531a:	dc02      	bgt.n	8005322 <__ieee754_sqrt+0xe6>
 800531c:	d112      	bne.n	8005344 <__ieee754_sqrt+0x108>
 800531e:	428f      	cmp	r7, r1
 8005320:	d810      	bhi.n	8005344 <__ieee754_sqrt+0x108>
 8005322:	2f00      	cmp	r7, #0
 8005324:	eb07 0c06 	add.w	ip, r7, r6
 8005328:	da34      	bge.n	8005394 <__ieee754_sqrt+0x158>
 800532a:	f1bc 0f00 	cmp.w	ip, #0
 800532e:	db31      	blt.n	8005394 <__ieee754_sqrt+0x158>
 8005330:	f104 0801 	add.w	r8, r4, #1
 8005334:	1b12      	subs	r2, r2, r4
 8005336:	428f      	cmp	r7, r1
 8005338:	bf88      	it	hi
 800533a:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800533e:	1bc9      	subs	r1, r1, r7
 8005340:	4433      	add	r3, r6
 8005342:	4644      	mov	r4, r8
 8005344:	eb02 77d1 	add.w	r7, r2, r1, lsr #31
 8005348:	f1be 0e01 	subs.w	lr, lr, #1
 800534c:	443a      	add	r2, r7
 800534e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8005352:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8005356:	d1dd      	bne.n	8005314 <__ieee754_sqrt+0xd8>
 8005358:	430a      	orrs	r2, r1
 800535a:	d006      	beq.n	800536a <__ieee754_sqrt+0x12e>
 800535c:	1c5c      	adds	r4, r3, #1
 800535e:	bf13      	iteet	ne
 8005360:	3301      	addne	r3, #1
 8005362:	3501      	addeq	r5, #1
 8005364:	4673      	moveq	r3, lr
 8005366:	f023 0301 	bicne.w	r3, r3, #1
 800536a:	106a      	asrs	r2, r5, #1
 800536c:	085b      	lsrs	r3, r3, #1
 800536e:	07e9      	lsls	r1, r5, #31
 8005370:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8005374:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8005378:	bf48      	it	mi
 800537a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800537e:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8005382:	461c      	mov	r4, r3
 8005384:	e776      	b.n	8005274 <__ieee754_sqrt+0x38>
 8005386:	0aca      	lsrs	r2, r1, #11
 8005388:	3b15      	subs	r3, #21
 800538a:	0549      	lsls	r1, r1, #21
 800538c:	e78b      	b.n	80052a6 <__ieee754_sqrt+0x6a>
 800538e:	0052      	lsls	r2, r2, #1
 8005390:	3001      	adds	r0, #1
 8005392:	e78b      	b.n	80052ac <__ieee754_sqrt+0x70>
 8005394:	46a0      	mov	r8, r4
 8005396:	e7cd      	b.n	8005334 <__ieee754_sqrt+0xf8>
 8005398:	7ff00000 	.word	0x7ff00000
 800539c:	00000000 	.word	0x00000000

080053a0 <__kernel_cos>:
 80053a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053a4:	ec59 8b10 	vmov	r8, r9, d0
 80053a8:	f029 4700 	bic.w	r7, r9, #2147483648	; 0x80000000
 80053ac:	b085      	sub	sp, #20
 80053ae:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 80053b2:	ed8d 1b00 	vstr	d1, [sp]
 80053b6:	da07      	bge.n	80053c8 <__kernel_cos+0x28>
 80053b8:	ee10 0a10 	vmov	r0, s0
 80053bc:	4649      	mov	r1, r9
 80053be:	f7fb fb8b 	bl	8000ad8 <__aeabi_d2iz>
 80053c2:	2800      	cmp	r0, #0
 80053c4:	f000 80aa 	beq.w	800551c <__kernel_cos+0x17c>
 80053c8:	4642      	mov	r2, r8
 80053ca:	464b      	mov	r3, r9
 80053cc:	4640      	mov	r0, r8
 80053ce:	4649      	mov	r1, r9
 80053d0:	f7fb f8d2 	bl	8000578 <__aeabi_dmul>
 80053d4:	a359      	add	r3, pc, #356	; (adr r3, 800553c <__kernel_cos+0x19c>)
 80053d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053da:	4604      	mov	r4, r0
 80053dc:	460d      	mov	r5, r1
 80053de:	f7fb f8cb 	bl	8000578 <__aeabi_dmul>
 80053e2:	a358      	add	r3, pc, #352	; (adr r3, 8005544 <__kernel_cos+0x1a4>)
 80053e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053e8:	f7fa ff14 	bl	8000214 <__adddf3>
 80053ec:	4622      	mov	r2, r4
 80053ee:	462b      	mov	r3, r5
 80053f0:	f7fb f8c2 	bl	8000578 <__aeabi_dmul>
 80053f4:	a355      	add	r3, pc, #340	; (adr r3, 800554c <__kernel_cos+0x1ac>)
 80053f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053fa:	f7fa ff09 	bl	8000210 <__aeabi_dsub>
 80053fe:	4622      	mov	r2, r4
 8005400:	462b      	mov	r3, r5
 8005402:	f7fb f8b9 	bl	8000578 <__aeabi_dmul>
 8005406:	a353      	add	r3, pc, #332	; (adr r3, 8005554 <__kernel_cos+0x1b4>)
 8005408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800540c:	f7fa ff02 	bl	8000214 <__adddf3>
 8005410:	4622      	mov	r2, r4
 8005412:	462b      	mov	r3, r5
 8005414:	f7fb f8b0 	bl	8000578 <__aeabi_dmul>
 8005418:	a350      	add	r3, pc, #320	; (adr r3, 800555c <__kernel_cos+0x1bc>)
 800541a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800541e:	f7fa fef7 	bl	8000210 <__aeabi_dsub>
 8005422:	4622      	mov	r2, r4
 8005424:	462b      	mov	r3, r5
 8005426:	f7fb f8a7 	bl	8000578 <__aeabi_dmul>
 800542a:	a34e      	add	r3, pc, #312	; (adr r3, 8005564 <__kernel_cos+0x1c4>)
 800542c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005430:	f7fa fef0 	bl	8000214 <__adddf3>
 8005434:	462b      	mov	r3, r5
 8005436:	4622      	mov	r2, r4
 8005438:	f7fb f89e 	bl	8000578 <__aeabi_dmul>
 800543c:	4b3a      	ldr	r3, [pc, #232]	; (8005528 <__kernel_cos+0x188>)
 800543e:	429f      	cmp	r7, r3
 8005440:	4682      	mov	sl, r0
 8005442:	468b      	mov	fp, r1
 8005444:	dc2c      	bgt.n	80054a0 <__kernel_cos+0x100>
 8005446:	2200      	movs	r2, #0
 8005448:	4b38      	ldr	r3, [pc, #224]	; (800552c <__kernel_cos+0x18c>)
 800544a:	4620      	mov	r0, r4
 800544c:	4629      	mov	r1, r5
 800544e:	f7fb f893 	bl	8000578 <__aeabi_dmul>
 8005452:	4652      	mov	r2, sl
 8005454:	4606      	mov	r6, r0
 8005456:	460f      	mov	r7, r1
 8005458:	465b      	mov	r3, fp
 800545a:	4620      	mov	r0, r4
 800545c:	4629      	mov	r1, r5
 800545e:	f7fb f88b 	bl	8000578 <__aeabi_dmul>
 8005462:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005466:	4604      	mov	r4, r0
 8005468:	460d      	mov	r5, r1
 800546a:	4640      	mov	r0, r8
 800546c:	4649      	mov	r1, r9
 800546e:	f7fb f883 	bl	8000578 <__aeabi_dmul>
 8005472:	4602      	mov	r2, r0
 8005474:	460b      	mov	r3, r1
 8005476:	4620      	mov	r0, r4
 8005478:	4629      	mov	r1, r5
 800547a:	f7fa fec9 	bl	8000210 <__aeabi_dsub>
 800547e:	4602      	mov	r2, r0
 8005480:	460b      	mov	r3, r1
 8005482:	4630      	mov	r0, r6
 8005484:	4639      	mov	r1, r7
 8005486:	f7fa fec3 	bl	8000210 <__aeabi_dsub>
 800548a:	460b      	mov	r3, r1
 800548c:	4928      	ldr	r1, [pc, #160]	; (8005530 <__kernel_cos+0x190>)
 800548e:	4602      	mov	r2, r0
 8005490:	2000      	movs	r0, #0
 8005492:	f7fa febd 	bl	8000210 <__aeabi_dsub>
 8005496:	ec41 0b10 	vmov	d0, r0, r1
 800549a:	b005      	add	sp, #20
 800549c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054a0:	4b24      	ldr	r3, [pc, #144]	; (8005534 <__kernel_cos+0x194>)
 80054a2:	4923      	ldr	r1, [pc, #140]	; (8005530 <__kernel_cos+0x190>)
 80054a4:	429f      	cmp	r7, r3
 80054a6:	bfd7      	itett	le
 80054a8:	f5a7 1300 	suble.w	r3, r7, #2097152	; 0x200000
 80054ac:	4f22      	ldrgt	r7, [pc, #136]	; (8005538 <__kernel_cos+0x198>)
 80054ae:	2200      	movle	r2, #0
 80054b0:	4616      	movle	r6, r2
 80054b2:	bfd4      	ite	le
 80054b4:	461f      	movle	r7, r3
 80054b6:	2600      	movgt	r6, #0
 80054b8:	4632      	mov	r2, r6
 80054ba:	463b      	mov	r3, r7
 80054bc:	2000      	movs	r0, #0
 80054be:	f7fa fea7 	bl	8000210 <__aeabi_dsub>
 80054c2:	2200      	movs	r2, #0
 80054c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80054c8:	4b18      	ldr	r3, [pc, #96]	; (800552c <__kernel_cos+0x18c>)
 80054ca:	4620      	mov	r0, r4
 80054cc:	4629      	mov	r1, r5
 80054ce:	f7fb f853 	bl	8000578 <__aeabi_dmul>
 80054d2:	4632      	mov	r2, r6
 80054d4:	463b      	mov	r3, r7
 80054d6:	f7fa fe9b 	bl	8000210 <__aeabi_dsub>
 80054da:	4652      	mov	r2, sl
 80054dc:	4606      	mov	r6, r0
 80054de:	460f      	mov	r7, r1
 80054e0:	465b      	mov	r3, fp
 80054e2:	4620      	mov	r0, r4
 80054e4:	4629      	mov	r1, r5
 80054e6:	f7fb f847 	bl	8000578 <__aeabi_dmul>
 80054ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 80054ee:	4604      	mov	r4, r0
 80054f0:	460d      	mov	r5, r1
 80054f2:	4640      	mov	r0, r8
 80054f4:	4649      	mov	r1, r9
 80054f6:	f7fb f83f 	bl	8000578 <__aeabi_dmul>
 80054fa:	4602      	mov	r2, r0
 80054fc:	460b      	mov	r3, r1
 80054fe:	4620      	mov	r0, r4
 8005500:	4629      	mov	r1, r5
 8005502:	f7fa fe85 	bl	8000210 <__aeabi_dsub>
 8005506:	4602      	mov	r2, r0
 8005508:	460b      	mov	r3, r1
 800550a:	4630      	mov	r0, r6
 800550c:	4639      	mov	r1, r7
 800550e:	f7fa fe7f 	bl	8000210 <__aeabi_dsub>
 8005512:	4602      	mov	r2, r0
 8005514:	460b      	mov	r3, r1
 8005516:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800551a:	e7ba      	b.n	8005492 <__kernel_cos+0xf2>
 800551c:	2000      	movs	r0, #0
 800551e:	4904      	ldr	r1, [pc, #16]	; (8005530 <__kernel_cos+0x190>)
 8005520:	e7b9      	b.n	8005496 <__kernel_cos+0xf6>
 8005522:	bf00      	nop
 8005524:	f3af 8000 	nop.w
 8005528:	3fd33332 	.word	0x3fd33332
 800552c:	3fe00000 	.word	0x3fe00000
 8005530:	3ff00000 	.word	0x3ff00000
 8005534:	3fe90000 	.word	0x3fe90000
 8005538:	3fd20000 	.word	0x3fd20000
 800553c:	be8838d4 	.word	0xbe8838d4
 8005540:	bda8fae9 	.word	0xbda8fae9
 8005544:	bdb4b1c4 	.word	0xbdb4b1c4
 8005548:	3e21ee9e 	.word	0x3e21ee9e
 800554c:	809c52ad 	.word	0x809c52ad
 8005550:	3e927e4f 	.word	0x3e927e4f
 8005554:	19cb1590 	.word	0x19cb1590
 8005558:	3efa01a0 	.word	0x3efa01a0
 800555c:	16c15177 	.word	0x16c15177
 8005560:	3f56c16c 	.word	0x3f56c16c
 8005564:	5555554c 	.word	0x5555554c
 8005568:	3fa55555 	.word	0x3fa55555
 800556c:	00000000 	.word	0x00000000

08005570 <__kernel_rem_pio2>:
 8005570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005574:	ed2d 8b02 	vpush	{d8}
 8005578:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800557c:	1ed4      	subs	r4, r2, #3
 800557e:	9306      	str	r3, [sp, #24]
 8005580:	9102      	str	r1, [sp, #8]
 8005582:	4bc3      	ldr	r3, [pc, #780]	; (8005890 <__kernel_rem_pio2+0x320>)
 8005584:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8005586:	9009      	str	r0, [sp, #36]	; 0x24
 8005588:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800558c:	9300      	str	r3, [sp, #0]
 800558e:	9b06      	ldr	r3, [sp, #24]
 8005590:	3b01      	subs	r3, #1
 8005592:	9304      	str	r3, [sp, #16]
 8005594:	2318      	movs	r3, #24
 8005596:	fb94 f4f3 	sdiv	r4, r4, r3
 800559a:	f06f 0317 	mvn.w	r3, #23
 800559e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80055a2:	fb04 3303 	mla	r3, r4, r3, r3
 80055a6:	eb03 0a02 	add.w	sl, r3, r2
 80055aa:	9b00      	ldr	r3, [sp, #0]
 80055ac:	9a04      	ldr	r2, [sp, #16]
 80055ae:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8005880 <__kernel_rem_pio2+0x310>
 80055b2:	eb03 0802 	add.w	r8, r3, r2
 80055b6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80055b8:	1aa7      	subs	r7, r4, r2
 80055ba:	ae20      	add	r6, sp, #128	; 0x80
 80055bc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80055c0:	2500      	movs	r5, #0
 80055c2:	4545      	cmp	r5, r8
 80055c4:	dd13      	ble.n	80055ee <__kernel_rem_pio2+0x7e>
 80055c6:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8005880 <__kernel_rem_pio2+0x310>
 80055ca:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80055ce:	2600      	movs	r6, #0
 80055d0:	9b00      	ldr	r3, [sp, #0]
 80055d2:	429e      	cmp	r6, r3
 80055d4:	dc32      	bgt.n	800563c <__kernel_rem_pio2+0xcc>
 80055d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055d8:	9303      	str	r3, [sp, #12]
 80055da:	9b06      	ldr	r3, [sp, #24]
 80055dc:	199d      	adds	r5, r3, r6
 80055de:	ab20      	add	r3, sp, #128	; 0x80
 80055e0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80055e4:	9308      	str	r3, [sp, #32]
 80055e6:	ec59 8b18 	vmov	r8, r9, d8
 80055ea:	2700      	movs	r7, #0
 80055ec:	e01f      	b.n	800562e <__kernel_rem_pio2+0xbe>
 80055ee:	42ef      	cmn	r7, r5
 80055f0:	d407      	bmi.n	8005602 <__kernel_rem_pio2+0x92>
 80055f2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80055f6:	f7fa ff59 	bl	80004ac <__aeabi_i2d>
 80055fa:	e8e6 0102 	strd	r0, r1, [r6], #8
 80055fe:	3501      	adds	r5, #1
 8005600:	e7df      	b.n	80055c2 <__kernel_rem_pio2+0x52>
 8005602:	ec51 0b18 	vmov	r0, r1, d8
 8005606:	e7f8      	b.n	80055fa <__kernel_rem_pio2+0x8a>
 8005608:	9908      	ldr	r1, [sp, #32]
 800560a:	9d03      	ldr	r5, [sp, #12]
 800560c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8005610:	9108      	str	r1, [sp, #32]
 8005612:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8005616:	9503      	str	r5, [sp, #12]
 8005618:	f7fa ffae 	bl	8000578 <__aeabi_dmul>
 800561c:	4602      	mov	r2, r0
 800561e:	460b      	mov	r3, r1
 8005620:	4640      	mov	r0, r8
 8005622:	4649      	mov	r1, r9
 8005624:	f7fa fdf6 	bl	8000214 <__adddf3>
 8005628:	3701      	adds	r7, #1
 800562a:	4680      	mov	r8, r0
 800562c:	4689      	mov	r9, r1
 800562e:	9b04      	ldr	r3, [sp, #16]
 8005630:	429f      	cmp	r7, r3
 8005632:	dde9      	ble.n	8005608 <__kernel_rem_pio2+0x98>
 8005634:	e8eb 8902 	strd	r8, r9, [fp], #8
 8005638:	3601      	adds	r6, #1
 800563a:	e7c9      	b.n	80055d0 <__kernel_rem_pio2+0x60>
 800563c:	9b00      	ldr	r3, [sp, #0]
 800563e:	9f00      	ldr	r7, [sp, #0]
 8005640:	aa0c      	add	r2, sp, #48	; 0x30
 8005642:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005646:	930b      	str	r3, [sp, #44]	; 0x2c
 8005648:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800564a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800564e:	930a      	str	r3, [sp, #40]	; 0x28
 8005650:	ab98      	add	r3, sp, #608	; 0x260
 8005652:	f107 5b00 	add.w	fp, r7, #536870912	; 0x20000000
 8005656:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800565a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800565e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8005662:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005666:	9308      	str	r3, [sp, #32]
 8005668:	9a08      	ldr	r2, [sp, #32]
 800566a:	ab98      	add	r3, sp, #608	; 0x260
 800566c:	4413      	add	r3, r2
 800566e:	f1a3 0b98 	sub.w	fp, r3, #152	; 0x98
 8005672:	2600      	movs	r6, #0
 8005674:	1bbb      	subs	r3, r7, r6
 8005676:	2b00      	cmp	r3, #0
 8005678:	dc77      	bgt.n	800576a <__kernel_rem_pio2+0x1fa>
 800567a:	ec49 8b10 	vmov	d0, r8, r9
 800567e:	4650      	mov	r0, sl
 8005680:	f000 fdba 	bl	80061f8 <scalbn>
 8005684:	ec55 4b10 	vmov	r4, r5, d0
 8005688:	2200      	movs	r2, #0
 800568a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800568e:	ee10 0a10 	vmov	r0, s0
 8005692:	4629      	mov	r1, r5
 8005694:	f7fa ff70 	bl	8000578 <__aeabi_dmul>
 8005698:	ec41 0b10 	vmov	d0, r0, r1
 800569c:	f000 fd24 	bl	80060e8 <floor>
 80056a0:	2200      	movs	r2, #0
 80056a2:	ec51 0b10 	vmov	r0, r1, d0
 80056a6:	4b7b      	ldr	r3, [pc, #492]	; (8005894 <__kernel_rem_pio2+0x324>)
 80056a8:	f7fa ff66 	bl	8000578 <__aeabi_dmul>
 80056ac:	4602      	mov	r2, r0
 80056ae:	460b      	mov	r3, r1
 80056b0:	4620      	mov	r0, r4
 80056b2:	4629      	mov	r1, r5
 80056b4:	f7fa fdac 	bl	8000210 <__aeabi_dsub>
 80056b8:	460d      	mov	r5, r1
 80056ba:	4604      	mov	r4, r0
 80056bc:	f7fb fa0c 	bl	8000ad8 <__aeabi_d2iz>
 80056c0:	9003      	str	r0, [sp, #12]
 80056c2:	f7fa fef3 	bl	80004ac <__aeabi_i2d>
 80056c6:	4602      	mov	r2, r0
 80056c8:	460b      	mov	r3, r1
 80056ca:	4620      	mov	r0, r4
 80056cc:	4629      	mov	r1, r5
 80056ce:	f7fa fd9f 	bl	8000210 <__aeabi_dsub>
 80056d2:	f1ba 0f00 	cmp.w	sl, #0
 80056d6:	4680      	mov	r8, r0
 80056d8:	4689      	mov	r9, r1
 80056da:	dd6b      	ble.n	80057b4 <__kernel_rem_pio2+0x244>
 80056dc:	1e7a      	subs	r2, r7, #1
 80056de:	ab0c      	add	r3, sp, #48	; 0x30
 80056e0:	f1ca 0118 	rsb	r1, sl, #24
 80056e4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80056e8:	9c03      	ldr	r4, [sp, #12]
 80056ea:	fa40 f301 	asr.w	r3, r0, r1
 80056ee:	441c      	add	r4, r3
 80056f0:	408b      	lsls	r3, r1
 80056f2:	1ac0      	subs	r0, r0, r3
 80056f4:	ab0c      	add	r3, sp, #48	; 0x30
 80056f6:	9403      	str	r4, [sp, #12]
 80056f8:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80056fc:	f1ca 0317 	rsb	r3, sl, #23
 8005700:	fa40 fb03 	asr.w	fp, r0, r3
 8005704:	f1bb 0f00 	cmp.w	fp, #0
 8005708:	dd62      	ble.n	80057d0 <__kernel_rem_pio2+0x260>
 800570a:	9b03      	ldr	r3, [sp, #12]
 800570c:	2200      	movs	r2, #0
 800570e:	3301      	adds	r3, #1
 8005710:	9303      	str	r3, [sp, #12]
 8005712:	4614      	mov	r4, r2
 8005714:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8005718:	4297      	cmp	r7, r2
 800571a:	f300 8089 	bgt.w	8005830 <__kernel_rem_pio2+0x2c0>
 800571e:	f1ba 0f00 	cmp.w	sl, #0
 8005722:	dd07      	ble.n	8005734 <__kernel_rem_pio2+0x1c4>
 8005724:	f1ba 0f01 	cmp.w	sl, #1
 8005728:	f000 8096 	beq.w	8005858 <__kernel_rem_pio2+0x2e8>
 800572c:	f1ba 0f02 	cmp.w	sl, #2
 8005730:	f000 809c 	beq.w	800586c <__kernel_rem_pio2+0x2fc>
 8005734:	f1bb 0f02 	cmp.w	fp, #2
 8005738:	d14a      	bne.n	80057d0 <__kernel_rem_pio2+0x260>
 800573a:	4642      	mov	r2, r8
 800573c:	464b      	mov	r3, r9
 800573e:	2000      	movs	r0, #0
 8005740:	4955      	ldr	r1, [pc, #340]	; (8005898 <__kernel_rem_pio2+0x328>)
 8005742:	f7fa fd65 	bl	8000210 <__aeabi_dsub>
 8005746:	4680      	mov	r8, r0
 8005748:	4689      	mov	r9, r1
 800574a:	2c00      	cmp	r4, #0
 800574c:	d040      	beq.n	80057d0 <__kernel_rem_pio2+0x260>
 800574e:	4650      	mov	r0, sl
 8005750:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8005888 <__kernel_rem_pio2+0x318>
 8005754:	f000 fd50 	bl	80061f8 <scalbn>
 8005758:	4640      	mov	r0, r8
 800575a:	4649      	mov	r1, r9
 800575c:	ec53 2b10 	vmov	r2, r3, d0
 8005760:	f7fa fd56 	bl	8000210 <__aeabi_dsub>
 8005764:	4680      	mov	r8, r0
 8005766:	4689      	mov	r9, r1
 8005768:	e032      	b.n	80057d0 <__kernel_rem_pio2+0x260>
 800576a:	2200      	movs	r2, #0
 800576c:	4b4b      	ldr	r3, [pc, #300]	; (800589c <__kernel_rem_pio2+0x32c>)
 800576e:	4640      	mov	r0, r8
 8005770:	4649      	mov	r1, r9
 8005772:	f7fa ff01 	bl	8000578 <__aeabi_dmul>
 8005776:	f7fb f9af 	bl	8000ad8 <__aeabi_d2iz>
 800577a:	f7fa fe97 	bl	80004ac <__aeabi_i2d>
 800577e:	2200      	movs	r2, #0
 8005780:	4b47      	ldr	r3, [pc, #284]	; (80058a0 <__kernel_rem_pio2+0x330>)
 8005782:	4604      	mov	r4, r0
 8005784:	460d      	mov	r5, r1
 8005786:	f7fa fef7 	bl	8000578 <__aeabi_dmul>
 800578a:	4602      	mov	r2, r0
 800578c:	460b      	mov	r3, r1
 800578e:	4640      	mov	r0, r8
 8005790:	4649      	mov	r1, r9
 8005792:	f7fa fd3d 	bl	8000210 <__aeabi_dsub>
 8005796:	f7fb f99f 	bl	8000ad8 <__aeabi_d2iz>
 800579a:	ab0c      	add	r3, sp, #48	; 0x30
 800579c:	4629      	mov	r1, r5
 800579e:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 80057a2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80057a6:	4620      	mov	r0, r4
 80057a8:	f7fa fd34 	bl	8000214 <__adddf3>
 80057ac:	3601      	adds	r6, #1
 80057ae:	4680      	mov	r8, r0
 80057b0:	4689      	mov	r9, r1
 80057b2:	e75f      	b.n	8005674 <__kernel_rem_pio2+0x104>
 80057b4:	d106      	bne.n	80057c4 <__kernel_rem_pio2+0x254>
 80057b6:	1e7b      	subs	r3, r7, #1
 80057b8:	aa0c      	add	r2, sp, #48	; 0x30
 80057ba:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80057be:	ea4f 5be0 	mov.w	fp, r0, asr #23
 80057c2:	e79f      	b.n	8005704 <__kernel_rem_pio2+0x194>
 80057c4:	2200      	movs	r2, #0
 80057c6:	4b37      	ldr	r3, [pc, #220]	; (80058a4 <__kernel_rem_pio2+0x334>)
 80057c8:	f7fb f95c 	bl	8000a84 <__aeabi_dcmpge>
 80057cc:	bb68      	cbnz	r0, 800582a <__kernel_rem_pio2+0x2ba>
 80057ce:	4683      	mov	fp, r0
 80057d0:	2200      	movs	r2, #0
 80057d2:	2300      	movs	r3, #0
 80057d4:	4640      	mov	r0, r8
 80057d6:	4649      	mov	r1, r9
 80057d8:	f7fb f936 	bl	8000a48 <__aeabi_dcmpeq>
 80057dc:	2800      	cmp	r0, #0
 80057de:	f000 80c1 	beq.w	8005964 <__kernel_rem_pio2+0x3f4>
 80057e2:	1e7c      	subs	r4, r7, #1
 80057e4:	4623      	mov	r3, r4
 80057e6:	2200      	movs	r2, #0
 80057e8:	9900      	ldr	r1, [sp, #0]
 80057ea:	428b      	cmp	r3, r1
 80057ec:	da5c      	bge.n	80058a8 <__kernel_rem_pio2+0x338>
 80057ee:	2a00      	cmp	r2, #0
 80057f0:	f040 808b 	bne.w	800590a <__kernel_rem_pio2+0x39a>
 80057f4:	2401      	movs	r4, #1
 80057f6:	f06f 0203 	mvn.w	r2, #3
 80057fa:	fb02 f304 	mul.w	r3, r2, r4
 80057fe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005800:	58cb      	ldr	r3, [r1, r3]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d056      	beq.n	80058b4 <__kernel_rem_pio2+0x344>
 8005806:	9b08      	ldr	r3, [sp, #32]
 8005808:	aa98      	add	r2, sp, #608	; 0x260
 800580a:	4413      	add	r3, r2
 800580c:	f1a3 0b90 	sub.w	fp, r3, #144	; 0x90
 8005810:	9b06      	ldr	r3, [sp, #24]
 8005812:	19dd      	adds	r5, r3, r7
 8005814:	ab20      	add	r3, sp, #128	; 0x80
 8005816:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800581a:	19e3      	adds	r3, r4, r7
 800581c:	1c7e      	adds	r6, r7, #1
 800581e:	9303      	str	r3, [sp, #12]
 8005820:	9b03      	ldr	r3, [sp, #12]
 8005822:	429e      	cmp	r6, r3
 8005824:	dd48      	ble.n	80058b8 <__kernel_rem_pio2+0x348>
 8005826:	461f      	mov	r7, r3
 8005828:	e712      	b.n	8005650 <__kernel_rem_pio2+0xe0>
 800582a:	f04f 0b02 	mov.w	fp, #2
 800582e:	e76c      	b.n	800570a <__kernel_rem_pio2+0x19a>
 8005830:	ab0c      	add	r3, sp, #48	; 0x30
 8005832:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005836:	b94c      	cbnz	r4, 800584c <__kernel_rem_pio2+0x2dc>
 8005838:	b12b      	cbz	r3, 8005846 <__kernel_rem_pio2+0x2d6>
 800583a:	a80c      	add	r0, sp, #48	; 0x30
 800583c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8005840:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8005844:	2301      	movs	r3, #1
 8005846:	3201      	adds	r2, #1
 8005848:	461c      	mov	r4, r3
 800584a:	e765      	b.n	8005718 <__kernel_rem_pio2+0x1a8>
 800584c:	a80c      	add	r0, sp, #48	; 0x30
 800584e:	1acb      	subs	r3, r1, r3
 8005850:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8005854:	4623      	mov	r3, r4
 8005856:	e7f6      	b.n	8005846 <__kernel_rem_pio2+0x2d6>
 8005858:	1e7a      	subs	r2, r7, #1
 800585a:	ab0c      	add	r3, sp, #48	; 0x30
 800585c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005860:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8005864:	a90c      	add	r1, sp, #48	; 0x30
 8005866:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800586a:	e763      	b.n	8005734 <__kernel_rem_pio2+0x1c4>
 800586c:	1e7a      	subs	r2, r7, #1
 800586e:	ab0c      	add	r3, sp, #48	; 0x30
 8005870:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005874:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005878:	e7f4      	b.n	8005864 <__kernel_rem_pio2+0x2f4>
 800587a:	bf00      	nop
 800587c:	f3af 8000 	nop.w
	...
 800588c:	3ff00000 	.word	0x3ff00000
 8005890:	08006518 	.word	0x08006518
 8005894:	40200000 	.word	0x40200000
 8005898:	3ff00000 	.word	0x3ff00000
 800589c:	3e700000 	.word	0x3e700000
 80058a0:	41700000 	.word	0x41700000
 80058a4:	3fe00000 	.word	0x3fe00000
 80058a8:	a90c      	add	r1, sp, #48	; 0x30
 80058aa:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80058ae:	3b01      	subs	r3, #1
 80058b0:	430a      	orrs	r2, r1
 80058b2:	e799      	b.n	80057e8 <__kernel_rem_pio2+0x278>
 80058b4:	3401      	adds	r4, #1
 80058b6:	e7a0      	b.n	80057fa <__kernel_rem_pio2+0x28a>
 80058b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058ba:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80058be:	f7fa fdf5 	bl	80004ac <__aeabi_i2d>
 80058c2:	e8e5 0102 	strd	r0, r1, [r5], #8
 80058c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058c8:	9508      	str	r5, [sp, #32]
 80058ca:	461c      	mov	r4, r3
 80058cc:	2700      	movs	r7, #0
 80058ce:	f04f 0800 	mov.w	r8, #0
 80058d2:	f04f 0900 	mov.w	r9, #0
 80058d6:	9b04      	ldr	r3, [sp, #16]
 80058d8:	429f      	cmp	r7, r3
 80058da:	dd03      	ble.n	80058e4 <__kernel_rem_pio2+0x374>
 80058dc:	e8eb 8902 	strd	r8, r9, [fp], #8
 80058e0:	3601      	adds	r6, #1
 80058e2:	e79d      	b.n	8005820 <__kernel_rem_pio2+0x2b0>
 80058e4:	9908      	ldr	r1, [sp, #32]
 80058e6:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 80058ea:	9108      	str	r1, [sp, #32]
 80058ec:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80058f0:	f7fa fe42 	bl	8000578 <__aeabi_dmul>
 80058f4:	4602      	mov	r2, r0
 80058f6:	460b      	mov	r3, r1
 80058f8:	4640      	mov	r0, r8
 80058fa:	4649      	mov	r1, r9
 80058fc:	f7fa fc8a 	bl	8000214 <__adddf3>
 8005900:	3701      	adds	r7, #1
 8005902:	4680      	mov	r8, r0
 8005904:	4689      	mov	r9, r1
 8005906:	e7e6      	b.n	80058d6 <__kernel_rem_pio2+0x366>
 8005908:	3c01      	subs	r4, #1
 800590a:	ab0c      	add	r3, sp, #48	; 0x30
 800590c:	f1aa 0a18 	sub.w	sl, sl, #24
 8005910:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d0f7      	beq.n	8005908 <__kernel_rem_pio2+0x398>
 8005918:	4650      	mov	r0, sl
 800591a:	ed9f 0bb5 	vldr	d0, [pc, #724]	; 8005bf0 <__kernel_rem_pio2+0x680>
 800591e:	f000 fc6b 	bl	80061f8 <scalbn>
 8005922:	00e5      	lsls	r5, r4, #3
 8005924:	ab98      	add	r3, sp, #608	; 0x260
 8005926:	eb03 0905 	add.w	r9, r3, r5
 800592a:	ec57 6b10 	vmov	r6, r7, d0
 800592e:	f1a9 0998 	sub.w	r9, r9, #152	; 0x98
 8005932:	46a0      	mov	r8, r4
 8005934:	f1b8 0f00 	cmp.w	r8, #0
 8005938:	da4d      	bge.n	80059d6 <__kernel_rem_pio2+0x466>
 800593a:	ed9f 8baf 	vldr	d8, [pc, #700]	; 8005bf8 <__kernel_rem_pio2+0x688>
 800593e:	f50d 7a90 	add.w	sl, sp, #288	; 0x120
 8005942:	2300      	movs	r3, #0
 8005944:	9304      	str	r3, [sp, #16]
 8005946:	4657      	mov	r7, sl
 8005948:	9b04      	ldr	r3, [sp, #16]
 800594a:	ebb4 0903 	subs.w	r9, r4, r3
 800594e:	d476      	bmi.n	8005a3e <__kernel_rem_pio2+0x4ce>
 8005950:	4bab      	ldr	r3, [pc, #684]	; (8005c00 <__kernel_rem_pio2+0x690>)
 8005952:	461e      	mov	r6, r3
 8005954:	ab70      	add	r3, sp, #448	; 0x1c0
 8005956:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800595a:	ed8d 8b06 	vstr	d8, [sp, #24]
 800595e:	f04f 0800 	mov.w	r8, #0
 8005962:	e05e      	b.n	8005a22 <__kernel_rem_pio2+0x4b2>
 8005964:	f1ca 0000 	rsb	r0, sl, #0
 8005968:	ec49 8b10 	vmov	d0, r8, r9
 800596c:	f000 fc44 	bl	80061f8 <scalbn>
 8005970:	ec55 4b10 	vmov	r4, r5, d0
 8005974:	2200      	movs	r2, #0
 8005976:	4ba3      	ldr	r3, [pc, #652]	; (8005c04 <__kernel_rem_pio2+0x694>)
 8005978:	ee10 0a10 	vmov	r0, s0
 800597c:	4629      	mov	r1, r5
 800597e:	f7fb f881 	bl	8000a84 <__aeabi_dcmpge>
 8005982:	b1f8      	cbz	r0, 80059c4 <__kernel_rem_pio2+0x454>
 8005984:	2200      	movs	r2, #0
 8005986:	4ba0      	ldr	r3, [pc, #640]	; (8005c08 <__kernel_rem_pio2+0x698>)
 8005988:	4620      	mov	r0, r4
 800598a:	4629      	mov	r1, r5
 800598c:	f7fa fdf4 	bl	8000578 <__aeabi_dmul>
 8005990:	f7fb f8a2 	bl	8000ad8 <__aeabi_d2iz>
 8005994:	4606      	mov	r6, r0
 8005996:	f7fa fd89 	bl	80004ac <__aeabi_i2d>
 800599a:	2200      	movs	r2, #0
 800599c:	4b99      	ldr	r3, [pc, #612]	; (8005c04 <__kernel_rem_pio2+0x694>)
 800599e:	f7fa fdeb 	bl	8000578 <__aeabi_dmul>
 80059a2:	460b      	mov	r3, r1
 80059a4:	4602      	mov	r2, r0
 80059a6:	4629      	mov	r1, r5
 80059a8:	4620      	mov	r0, r4
 80059aa:	f7fa fc31 	bl	8000210 <__aeabi_dsub>
 80059ae:	f7fb f893 	bl	8000ad8 <__aeabi_d2iz>
 80059b2:	1c7c      	adds	r4, r7, #1
 80059b4:	ab0c      	add	r3, sp, #48	; 0x30
 80059b6:	f10a 0a18 	add.w	sl, sl, #24
 80059ba:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 80059be:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 80059c2:	e7a9      	b.n	8005918 <__kernel_rem_pio2+0x3a8>
 80059c4:	4620      	mov	r0, r4
 80059c6:	4629      	mov	r1, r5
 80059c8:	f7fb f886 	bl	8000ad8 <__aeabi_d2iz>
 80059cc:	ab0c      	add	r3, sp, #48	; 0x30
 80059ce:	463c      	mov	r4, r7
 80059d0:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 80059d4:	e7a0      	b.n	8005918 <__kernel_rem_pio2+0x3a8>
 80059d6:	ab0c      	add	r3, sp, #48	; 0x30
 80059d8:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80059dc:	f7fa fd66 	bl	80004ac <__aeabi_i2d>
 80059e0:	4632      	mov	r2, r6
 80059e2:	463b      	mov	r3, r7
 80059e4:	f7fa fdc8 	bl	8000578 <__aeabi_dmul>
 80059e8:	2200      	movs	r2, #0
 80059ea:	e969 0102 	strd	r0, r1, [r9, #-8]!
 80059ee:	4b86      	ldr	r3, [pc, #536]	; (8005c08 <__kernel_rem_pio2+0x698>)
 80059f0:	4630      	mov	r0, r6
 80059f2:	4639      	mov	r1, r7
 80059f4:	f7fa fdc0 	bl	8000578 <__aeabi_dmul>
 80059f8:	f108 38ff 	add.w	r8, r8, #4294967295
 80059fc:	4606      	mov	r6, r0
 80059fe:	460f      	mov	r7, r1
 8005a00:	e798      	b.n	8005934 <__kernel_rem_pio2+0x3c4>
 8005a02:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8005a06:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8005a0a:	f7fa fdb5 	bl	8000578 <__aeabi_dmul>
 8005a0e:	4602      	mov	r2, r0
 8005a10:	460b      	mov	r3, r1
 8005a12:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005a16:	f7fa fbfd 	bl	8000214 <__adddf3>
 8005a1a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005a1e:	f108 0801 	add.w	r8, r8, #1
 8005a22:	9b00      	ldr	r3, [sp, #0]
 8005a24:	4598      	cmp	r8, r3
 8005a26:	dc02      	bgt.n	8005a2e <__kernel_rem_pio2+0x4be>
 8005a28:	9b04      	ldr	r3, [sp, #16]
 8005a2a:	4598      	cmp	r8, r3
 8005a2c:	dde9      	ble.n	8005a02 <__kernel_rem_pio2+0x492>
 8005a2e:	9b04      	ldr	r3, [sp, #16]
 8005a30:	ed9d 7b06 	vldr	d7, [sp, #24]
 8005a34:	3301      	adds	r3, #1
 8005a36:	ecaa 7b02 	vstmia	sl!, {d7}
 8005a3a:	9304      	str	r3, [sp, #16]
 8005a3c:	e784      	b.n	8005948 <__kernel_rem_pio2+0x3d8>
 8005a3e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8005a40:	2b03      	cmp	r3, #3
 8005a42:	d85d      	bhi.n	8005b00 <__kernel_rem_pio2+0x590>
 8005a44:	e8df f003 	tbb	[pc, r3]
 8005a48:	0226264b 	.word	0x0226264b
 8005a4c:	ab98      	add	r3, sp, #608	; 0x260
 8005a4e:	441d      	add	r5, r3
 8005a50:	f5a5 759c 	sub.w	r5, r5, #312	; 0x138
 8005a54:	462e      	mov	r6, r5
 8005a56:	46a2      	mov	sl, r4
 8005a58:	f1ba 0f00 	cmp.w	sl, #0
 8005a5c:	dc6e      	bgt.n	8005b3c <__kernel_rem_pio2+0x5cc>
 8005a5e:	462e      	mov	r6, r5
 8005a60:	46a2      	mov	sl, r4
 8005a62:	f1ba 0f01 	cmp.w	sl, #1
 8005a66:	f300 808a 	bgt.w	8005b7e <__kernel_rem_pio2+0x60e>
 8005a6a:	2000      	movs	r0, #0
 8005a6c:	2100      	movs	r1, #0
 8005a6e:	2c01      	cmp	r4, #1
 8005a70:	f300 80a6 	bgt.w	8005bc0 <__kernel_rem_pio2+0x650>
 8005a74:	f1bb 0f00 	cmp.w	fp, #0
 8005a78:	f040 80a8 	bne.w	8005bcc <__kernel_rem_pio2+0x65c>
 8005a7c:	e9dd 2348 	ldrd	r2, r3, [sp, #288]	; 0x120
 8005a80:	9c02      	ldr	r4, [sp, #8]
 8005a82:	e9c4 2300 	strd	r2, r3, [r4]
 8005a86:	e9dd 234a 	ldrd	r2, r3, [sp, #296]	; 0x128
 8005a8a:	e9c4 0104 	strd	r0, r1, [r4, #16]
 8005a8e:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8005a92:	e035      	b.n	8005b00 <__kernel_rem_pio2+0x590>
 8005a94:	3508      	adds	r5, #8
 8005a96:	ab48      	add	r3, sp, #288	; 0x120
 8005a98:	441d      	add	r5, r3
 8005a9a:	4626      	mov	r6, r4
 8005a9c:	2000      	movs	r0, #0
 8005a9e:	2100      	movs	r1, #0
 8005aa0:	2e00      	cmp	r6, #0
 8005aa2:	da3c      	bge.n	8005b1e <__kernel_rem_pio2+0x5ae>
 8005aa4:	f1bb 0f00 	cmp.w	fp, #0
 8005aa8:	d03f      	beq.n	8005b2a <__kernel_rem_pio2+0x5ba>
 8005aaa:	4602      	mov	r2, r0
 8005aac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005ab0:	9d02      	ldr	r5, [sp, #8]
 8005ab2:	e9c5 2300 	strd	r2, r3, [r5]
 8005ab6:	4602      	mov	r2, r0
 8005ab8:	460b      	mov	r3, r1
 8005aba:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8005abe:	f7fa fba7 	bl	8000210 <__aeabi_dsub>
 8005ac2:	ae4a      	add	r6, sp, #296	; 0x128
 8005ac4:	2501      	movs	r5, #1
 8005ac6:	42ac      	cmp	r4, r5
 8005ac8:	da32      	bge.n	8005b30 <__kernel_rem_pio2+0x5c0>
 8005aca:	f1bb 0f00 	cmp.w	fp, #0
 8005ace:	d002      	beq.n	8005ad6 <__kernel_rem_pio2+0x566>
 8005ad0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005ad4:	4619      	mov	r1, r3
 8005ad6:	9b02      	ldr	r3, [sp, #8]
 8005ad8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8005adc:	e010      	b.n	8005b00 <__kernel_rem_pio2+0x590>
 8005ade:	ab98      	add	r3, sp, #608	; 0x260
 8005ae0:	441d      	add	r5, r3
 8005ae2:	f5a5 759c 	sub.w	r5, r5, #312	; 0x138
 8005ae6:	2000      	movs	r0, #0
 8005ae8:	2100      	movs	r1, #0
 8005aea:	2c00      	cmp	r4, #0
 8005aec:	da11      	bge.n	8005b12 <__kernel_rem_pio2+0x5a2>
 8005aee:	f1bb 0f00 	cmp.w	fp, #0
 8005af2:	d002      	beq.n	8005afa <__kernel_rem_pio2+0x58a>
 8005af4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005af8:	4619      	mov	r1, r3
 8005afa:	9b02      	ldr	r3, [sp, #8]
 8005afc:	e9c3 0100 	strd	r0, r1, [r3]
 8005b00:	9b03      	ldr	r3, [sp, #12]
 8005b02:	f003 0007 	and.w	r0, r3, #7
 8005b06:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8005b0a:	ecbd 8b02 	vpop	{d8}
 8005b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b12:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8005b16:	f7fa fb7d 	bl	8000214 <__adddf3>
 8005b1a:	3c01      	subs	r4, #1
 8005b1c:	e7e5      	b.n	8005aea <__kernel_rem_pio2+0x57a>
 8005b1e:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8005b22:	f7fa fb77 	bl	8000214 <__adddf3>
 8005b26:	3e01      	subs	r6, #1
 8005b28:	e7ba      	b.n	8005aa0 <__kernel_rem_pio2+0x530>
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	460b      	mov	r3, r1
 8005b2e:	e7bf      	b.n	8005ab0 <__kernel_rem_pio2+0x540>
 8005b30:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8005b34:	f7fa fb6e 	bl	8000214 <__adddf3>
 8005b38:	3501      	adds	r5, #1
 8005b3a:	e7c4      	b.n	8005ac6 <__kernel_rem_pio2+0x556>
 8005b3c:	ed16 7b02 	vldr	d7, [r6, #-8]
 8005b40:	e956 8904 	ldrd	r8, r9, [r6, #-16]
 8005b44:	ec53 2b17 	vmov	r2, r3, d7
 8005b48:	4640      	mov	r0, r8
 8005b4a:	4649      	mov	r1, r9
 8005b4c:	ed8d 7b00 	vstr	d7, [sp]
 8005b50:	f7fa fb60 	bl	8000214 <__adddf3>
 8005b54:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005b58:	4602      	mov	r2, r0
 8005b5a:	460b      	mov	r3, r1
 8005b5c:	4640      	mov	r0, r8
 8005b5e:	4649      	mov	r1, r9
 8005b60:	f7fa fb56 	bl	8000210 <__aeabi_dsub>
 8005b64:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b68:	f7fa fb54 	bl	8000214 <__adddf3>
 8005b6c:	ed9d 7b04 	vldr	d7, [sp, #16]
 8005b70:	e966 0102 	strd	r0, r1, [r6, #-8]!
 8005b74:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005b78:	ed06 7b02 	vstr	d7, [r6, #-8]
 8005b7c:	e76c      	b.n	8005a58 <__kernel_rem_pio2+0x4e8>
 8005b7e:	ed16 7b02 	vldr	d7, [r6, #-8]
 8005b82:	e956 8904 	ldrd	r8, r9, [r6, #-16]
 8005b86:	ec53 2b17 	vmov	r2, r3, d7
 8005b8a:	4640      	mov	r0, r8
 8005b8c:	4649      	mov	r1, r9
 8005b8e:	ed8d 7b00 	vstr	d7, [sp]
 8005b92:	f7fa fb3f 	bl	8000214 <__adddf3>
 8005b96:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005b9a:	4602      	mov	r2, r0
 8005b9c:	460b      	mov	r3, r1
 8005b9e:	4640      	mov	r0, r8
 8005ba0:	4649      	mov	r1, r9
 8005ba2:	f7fa fb35 	bl	8000210 <__aeabi_dsub>
 8005ba6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005baa:	f7fa fb33 	bl	8000214 <__adddf3>
 8005bae:	ed9d 7b04 	vldr	d7, [sp, #16]
 8005bb2:	e966 0102 	strd	r0, r1, [r6, #-8]!
 8005bb6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005bba:	ed06 7b02 	vstr	d7, [r6, #-8]
 8005bbe:	e750      	b.n	8005a62 <__kernel_rem_pio2+0x4f2>
 8005bc0:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8005bc4:	f7fa fb26 	bl	8000214 <__adddf3>
 8005bc8:	3c01      	subs	r4, #1
 8005bca:	e750      	b.n	8005a6e <__kernel_rem_pio2+0x4fe>
 8005bcc:	9a02      	ldr	r2, [sp, #8]
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	6013      	str	r3, [r2, #0]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6110      	str	r0, [r2, #16]
 8005bd6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005bda:	6053      	str	r3, [r2, #4]
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	6093      	str	r3, [r2, #8]
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005be6:	60d3      	str	r3, [r2, #12]
 8005be8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005bec:	6153      	str	r3, [r2, #20]
 8005bee:	e787      	b.n	8005b00 <__kernel_rem_pio2+0x590>
 8005bf0:	00000000 	.word	0x00000000
 8005bf4:	3ff00000 	.word	0x3ff00000
	...
 8005c00:	080064d8 	.word	0x080064d8
 8005c04:	41700000 	.word	0x41700000
 8005c08:	3e700000 	.word	0x3e700000
 8005c0c:	00000000 	.word	0x00000000

08005c10 <__kernel_sin>:
 8005c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c14:	ec55 4b10 	vmov	r4, r5, d0
 8005c18:	b085      	sub	sp, #20
 8005c1a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005c1e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8005c22:	ed8d 1b00 	vstr	d1, [sp]
 8005c26:	9002      	str	r0, [sp, #8]
 8005c28:	da06      	bge.n	8005c38 <__kernel_sin+0x28>
 8005c2a:	ee10 0a10 	vmov	r0, s0
 8005c2e:	4629      	mov	r1, r5
 8005c30:	f7fa ff52 	bl	8000ad8 <__aeabi_d2iz>
 8005c34:	2800      	cmp	r0, #0
 8005c36:	d051      	beq.n	8005cdc <__kernel_sin+0xcc>
 8005c38:	4622      	mov	r2, r4
 8005c3a:	462b      	mov	r3, r5
 8005c3c:	4620      	mov	r0, r4
 8005c3e:	4629      	mov	r1, r5
 8005c40:	f7fa fc9a 	bl	8000578 <__aeabi_dmul>
 8005c44:	4682      	mov	sl, r0
 8005c46:	468b      	mov	fp, r1
 8005c48:	4602      	mov	r2, r0
 8005c4a:	460b      	mov	r3, r1
 8005c4c:	4620      	mov	r0, r4
 8005c4e:	4629      	mov	r1, r5
 8005c50:	f7fa fc92 	bl	8000578 <__aeabi_dmul>
 8005c54:	a341      	add	r3, pc, #260	; (adr r3, 8005d5c <__kernel_sin+0x14c>)
 8005c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c5a:	4680      	mov	r8, r0
 8005c5c:	4689      	mov	r9, r1
 8005c5e:	4650      	mov	r0, sl
 8005c60:	4659      	mov	r1, fp
 8005c62:	f7fa fc89 	bl	8000578 <__aeabi_dmul>
 8005c66:	a33f      	add	r3, pc, #252	; (adr r3, 8005d64 <__kernel_sin+0x154>)
 8005c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c6c:	f7fa fad0 	bl	8000210 <__aeabi_dsub>
 8005c70:	4652      	mov	r2, sl
 8005c72:	465b      	mov	r3, fp
 8005c74:	f7fa fc80 	bl	8000578 <__aeabi_dmul>
 8005c78:	a33c      	add	r3, pc, #240	; (adr r3, 8005d6c <__kernel_sin+0x15c>)
 8005c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c7e:	f7fa fac9 	bl	8000214 <__adddf3>
 8005c82:	4652      	mov	r2, sl
 8005c84:	465b      	mov	r3, fp
 8005c86:	f7fa fc77 	bl	8000578 <__aeabi_dmul>
 8005c8a:	a33a      	add	r3, pc, #232	; (adr r3, 8005d74 <__kernel_sin+0x164>)
 8005c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c90:	f7fa fabe 	bl	8000210 <__aeabi_dsub>
 8005c94:	4652      	mov	r2, sl
 8005c96:	465b      	mov	r3, fp
 8005c98:	f7fa fc6e 	bl	8000578 <__aeabi_dmul>
 8005c9c:	a337      	add	r3, pc, #220	; (adr r3, 8005d7c <__kernel_sin+0x16c>)
 8005c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ca2:	f7fa fab7 	bl	8000214 <__adddf3>
 8005ca6:	9b02      	ldr	r3, [sp, #8]
 8005ca8:	4606      	mov	r6, r0
 8005caa:	460f      	mov	r7, r1
 8005cac:	b9db      	cbnz	r3, 8005ce6 <__kernel_sin+0xd6>
 8005cae:	4602      	mov	r2, r0
 8005cb0:	460b      	mov	r3, r1
 8005cb2:	4650      	mov	r0, sl
 8005cb4:	4659      	mov	r1, fp
 8005cb6:	f7fa fc5f 	bl	8000578 <__aeabi_dmul>
 8005cba:	a325      	add	r3, pc, #148	; (adr r3, 8005d50 <__kernel_sin+0x140>)
 8005cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cc0:	f7fa faa6 	bl	8000210 <__aeabi_dsub>
 8005cc4:	4642      	mov	r2, r8
 8005cc6:	464b      	mov	r3, r9
 8005cc8:	f7fa fc56 	bl	8000578 <__aeabi_dmul>
 8005ccc:	4602      	mov	r2, r0
 8005cce:	460b      	mov	r3, r1
 8005cd0:	4620      	mov	r0, r4
 8005cd2:	4629      	mov	r1, r5
 8005cd4:	f7fa fa9e 	bl	8000214 <__adddf3>
 8005cd8:	4604      	mov	r4, r0
 8005cda:	460d      	mov	r5, r1
 8005cdc:	ec45 4b10 	vmov	d0, r4, r5
 8005ce0:	b005      	add	sp, #20
 8005ce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	4b1b      	ldr	r3, [pc, #108]	; (8005d58 <__kernel_sin+0x148>)
 8005cea:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005cee:	f7fa fc43 	bl	8000578 <__aeabi_dmul>
 8005cf2:	4632      	mov	r2, r6
 8005cf4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005cf8:	463b      	mov	r3, r7
 8005cfa:	4640      	mov	r0, r8
 8005cfc:	4649      	mov	r1, r9
 8005cfe:	f7fa fc3b 	bl	8000578 <__aeabi_dmul>
 8005d02:	4602      	mov	r2, r0
 8005d04:	460b      	mov	r3, r1
 8005d06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d0a:	f7fa fa81 	bl	8000210 <__aeabi_dsub>
 8005d0e:	4652      	mov	r2, sl
 8005d10:	465b      	mov	r3, fp
 8005d12:	f7fa fc31 	bl	8000578 <__aeabi_dmul>
 8005d16:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005d1a:	f7fa fa79 	bl	8000210 <__aeabi_dsub>
 8005d1e:	a30c      	add	r3, pc, #48	; (adr r3, 8005d50 <__kernel_sin+0x140>)
 8005d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d24:	4606      	mov	r6, r0
 8005d26:	460f      	mov	r7, r1
 8005d28:	4640      	mov	r0, r8
 8005d2a:	4649      	mov	r1, r9
 8005d2c:	f7fa fc24 	bl	8000578 <__aeabi_dmul>
 8005d30:	4602      	mov	r2, r0
 8005d32:	460b      	mov	r3, r1
 8005d34:	4630      	mov	r0, r6
 8005d36:	4639      	mov	r1, r7
 8005d38:	f7fa fa6c 	bl	8000214 <__adddf3>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	460b      	mov	r3, r1
 8005d40:	4620      	mov	r0, r4
 8005d42:	4629      	mov	r1, r5
 8005d44:	f7fa fa64 	bl	8000210 <__aeabi_dsub>
 8005d48:	e7c6      	b.n	8005cd8 <__kernel_sin+0xc8>
 8005d4a:	bf00      	nop
 8005d4c:	f3af 8000 	nop.w
 8005d50:	55555549 	.word	0x55555549
 8005d54:	3fc55555 	.word	0x3fc55555
 8005d58:	3fe00000 	.word	0x3fe00000
 8005d5c:	5acfd57c 	.word	0x5acfd57c
 8005d60:	3de5d93a 	.word	0x3de5d93a
 8005d64:	8a2b9ceb 	.word	0x8a2b9ceb
 8005d68:	3e5ae5e6 	.word	0x3e5ae5e6
 8005d6c:	57b1fe7d 	.word	0x57b1fe7d
 8005d70:	3ec71de3 	.word	0x3ec71de3
 8005d74:	19c161d5 	.word	0x19c161d5
 8005d78:	3f2a01a0 	.word	0x3f2a01a0
 8005d7c:	1110f8a6 	.word	0x1110f8a6
 8005d80:	3f811111 	.word	0x3f811111
 8005d84:	00000000 	.word	0x00000000

08005d88 <atan>:
 8005d88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d8c:	ec55 4b10 	vmov	r4, r5, d0
 8005d90:	4bc7      	ldr	r3, [pc, #796]	; (80060b0 <atan+0x328>)
 8005d92:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8005d96:	429e      	cmp	r6, r3
 8005d98:	46ab      	mov	fp, r5
 8005d9a:	dd18      	ble.n	8005dce <atan+0x46>
 8005d9c:	4ac5      	ldr	r2, [pc, #788]	; (80060b4 <atan+0x32c>)
 8005d9e:	4296      	cmp	r6, r2
 8005da0:	dc01      	bgt.n	8005da6 <atan+0x1e>
 8005da2:	d109      	bne.n	8005db8 <atan+0x30>
 8005da4:	b144      	cbz	r4, 8005db8 <atan+0x30>
 8005da6:	4622      	mov	r2, r4
 8005da8:	462b      	mov	r3, r5
 8005daa:	4620      	mov	r0, r4
 8005dac:	4629      	mov	r1, r5
 8005dae:	f7fa fa31 	bl	8000214 <__adddf3>
 8005db2:	4604      	mov	r4, r0
 8005db4:	460d      	mov	r5, r1
 8005db6:	e006      	b.n	8005dc6 <atan+0x3e>
 8005db8:	f1bb 0f00 	cmp.w	fp, #0
 8005dbc:	f300 813a 	bgt.w	8006034 <atan+0x2ac>
 8005dc0:	a59f      	add	r5, pc, #636	; (adr r5, 8006040 <atan+0x2b8>)
 8005dc2:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005dc6:	ec45 4b10 	vmov	d0, r4, r5
 8005dca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dce:	4bba      	ldr	r3, [pc, #744]	; (80060b8 <atan+0x330>)
 8005dd0:	429e      	cmp	r6, r3
 8005dd2:	dc14      	bgt.n	8005dfe <atan+0x76>
 8005dd4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8005dd8:	429e      	cmp	r6, r3
 8005dda:	dc0d      	bgt.n	8005df8 <atan+0x70>
 8005ddc:	a39a      	add	r3, pc, #616	; (adr r3, 8006048 <atan+0x2c0>)
 8005dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de2:	ee10 0a10 	vmov	r0, s0
 8005de6:	4629      	mov	r1, r5
 8005de8:	f7fa fa14 	bl	8000214 <__adddf3>
 8005dec:	2200      	movs	r2, #0
 8005dee:	4bb3      	ldr	r3, [pc, #716]	; (80060bc <atan+0x334>)
 8005df0:	f7fa fe52 	bl	8000a98 <__aeabi_dcmpgt>
 8005df4:	2800      	cmp	r0, #0
 8005df6:	d1e6      	bne.n	8005dc6 <atan+0x3e>
 8005df8:	f04f 3aff 	mov.w	sl, #4294967295
 8005dfc:	e02b      	b.n	8005e56 <atan+0xce>
 8005dfe:	f000 f96b 	bl	80060d8 <fabs>
 8005e02:	4baf      	ldr	r3, [pc, #700]	; (80060c0 <atan+0x338>)
 8005e04:	429e      	cmp	r6, r3
 8005e06:	ec55 4b10 	vmov	r4, r5, d0
 8005e0a:	f300 80bf 	bgt.w	8005f8c <atan+0x204>
 8005e0e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8005e12:	429e      	cmp	r6, r3
 8005e14:	f300 80a0 	bgt.w	8005f58 <atan+0x1d0>
 8005e18:	ee10 2a10 	vmov	r2, s0
 8005e1c:	ee10 0a10 	vmov	r0, s0
 8005e20:	462b      	mov	r3, r5
 8005e22:	4629      	mov	r1, r5
 8005e24:	f7fa f9f6 	bl	8000214 <__adddf3>
 8005e28:	2200      	movs	r2, #0
 8005e2a:	4ba4      	ldr	r3, [pc, #656]	; (80060bc <atan+0x334>)
 8005e2c:	f7fa f9f0 	bl	8000210 <__aeabi_dsub>
 8005e30:	2200      	movs	r2, #0
 8005e32:	4606      	mov	r6, r0
 8005e34:	460f      	mov	r7, r1
 8005e36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005e3a:	4620      	mov	r0, r4
 8005e3c:	4629      	mov	r1, r5
 8005e3e:	f7fa f9e9 	bl	8000214 <__adddf3>
 8005e42:	4602      	mov	r2, r0
 8005e44:	460b      	mov	r3, r1
 8005e46:	4630      	mov	r0, r6
 8005e48:	4639      	mov	r1, r7
 8005e4a:	f7fa fcbf 	bl	80007cc <__aeabi_ddiv>
 8005e4e:	f04f 0a00 	mov.w	sl, #0
 8005e52:	4604      	mov	r4, r0
 8005e54:	460d      	mov	r5, r1
 8005e56:	4622      	mov	r2, r4
 8005e58:	462b      	mov	r3, r5
 8005e5a:	4620      	mov	r0, r4
 8005e5c:	4629      	mov	r1, r5
 8005e5e:	f7fa fb8b 	bl	8000578 <__aeabi_dmul>
 8005e62:	4602      	mov	r2, r0
 8005e64:	460b      	mov	r3, r1
 8005e66:	4680      	mov	r8, r0
 8005e68:	4689      	mov	r9, r1
 8005e6a:	f7fa fb85 	bl	8000578 <__aeabi_dmul>
 8005e6e:	a378      	add	r3, pc, #480	; (adr r3, 8006050 <atan+0x2c8>)
 8005e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e74:	4606      	mov	r6, r0
 8005e76:	460f      	mov	r7, r1
 8005e78:	f7fa fb7e 	bl	8000578 <__aeabi_dmul>
 8005e7c:	a376      	add	r3, pc, #472	; (adr r3, 8006058 <atan+0x2d0>)
 8005e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e82:	f7fa f9c7 	bl	8000214 <__adddf3>
 8005e86:	4632      	mov	r2, r6
 8005e88:	463b      	mov	r3, r7
 8005e8a:	f7fa fb75 	bl	8000578 <__aeabi_dmul>
 8005e8e:	a374      	add	r3, pc, #464	; (adr r3, 8006060 <atan+0x2d8>)
 8005e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e94:	f7fa f9be 	bl	8000214 <__adddf3>
 8005e98:	4632      	mov	r2, r6
 8005e9a:	463b      	mov	r3, r7
 8005e9c:	f7fa fb6c 	bl	8000578 <__aeabi_dmul>
 8005ea0:	a371      	add	r3, pc, #452	; (adr r3, 8006068 <atan+0x2e0>)
 8005ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ea6:	f7fa f9b5 	bl	8000214 <__adddf3>
 8005eaa:	4632      	mov	r2, r6
 8005eac:	463b      	mov	r3, r7
 8005eae:	f7fa fb63 	bl	8000578 <__aeabi_dmul>
 8005eb2:	a36f      	add	r3, pc, #444	; (adr r3, 8006070 <atan+0x2e8>)
 8005eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb8:	f7fa f9ac 	bl	8000214 <__adddf3>
 8005ebc:	4632      	mov	r2, r6
 8005ebe:	463b      	mov	r3, r7
 8005ec0:	f7fa fb5a 	bl	8000578 <__aeabi_dmul>
 8005ec4:	a36c      	add	r3, pc, #432	; (adr r3, 8006078 <atan+0x2f0>)
 8005ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eca:	f7fa f9a3 	bl	8000214 <__adddf3>
 8005ece:	4642      	mov	r2, r8
 8005ed0:	464b      	mov	r3, r9
 8005ed2:	f7fa fb51 	bl	8000578 <__aeabi_dmul>
 8005ed6:	a36a      	add	r3, pc, #424	; (adr r3, 8006080 <atan+0x2f8>)
 8005ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005edc:	4680      	mov	r8, r0
 8005ede:	4689      	mov	r9, r1
 8005ee0:	4630      	mov	r0, r6
 8005ee2:	4639      	mov	r1, r7
 8005ee4:	f7fa fb48 	bl	8000578 <__aeabi_dmul>
 8005ee8:	a367      	add	r3, pc, #412	; (adr r3, 8006088 <atan+0x300>)
 8005eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eee:	f7fa f98f 	bl	8000210 <__aeabi_dsub>
 8005ef2:	4632      	mov	r2, r6
 8005ef4:	463b      	mov	r3, r7
 8005ef6:	f7fa fb3f 	bl	8000578 <__aeabi_dmul>
 8005efa:	a365      	add	r3, pc, #404	; (adr r3, 8006090 <atan+0x308>)
 8005efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f00:	f7fa f986 	bl	8000210 <__aeabi_dsub>
 8005f04:	4632      	mov	r2, r6
 8005f06:	463b      	mov	r3, r7
 8005f08:	f7fa fb36 	bl	8000578 <__aeabi_dmul>
 8005f0c:	a362      	add	r3, pc, #392	; (adr r3, 8006098 <atan+0x310>)
 8005f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f12:	f7fa f97d 	bl	8000210 <__aeabi_dsub>
 8005f16:	4632      	mov	r2, r6
 8005f18:	463b      	mov	r3, r7
 8005f1a:	f7fa fb2d 	bl	8000578 <__aeabi_dmul>
 8005f1e:	a360      	add	r3, pc, #384	; (adr r3, 80060a0 <atan+0x318>)
 8005f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f24:	f7fa f974 	bl	8000210 <__aeabi_dsub>
 8005f28:	4632      	mov	r2, r6
 8005f2a:	463b      	mov	r3, r7
 8005f2c:	f7fa fb24 	bl	8000578 <__aeabi_dmul>
 8005f30:	f1ba 3fff 	cmp.w	sl, #4294967295
 8005f34:	4602      	mov	r2, r0
 8005f36:	460b      	mov	r3, r1
 8005f38:	d155      	bne.n	8005fe6 <atan+0x25e>
 8005f3a:	4640      	mov	r0, r8
 8005f3c:	4649      	mov	r1, r9
 8005f3e:	f7fa f969 	bl	8000214 <__adddf3>
 8005f42:	4622      	mov	r2, r4
 8005f44:	462b      	mov	r3, r5
 8005f46:	f7fa fb17 	bl	8000578 <__aeabi_dmul>
 8005f4a:	4602      	mov	r2, r0
 8005f4c:	460b      	mov	r3, r1
 8005f4e:	4620      	mov	r0, r4
 8005f50:	4629      	mov	r1, r5
 8005f52:	f7fa f95d 	bl	8000210 <__aeabi_dsub>
 8005f56:	e72c      	b.n	8005db2 <atan+0x2a>
 8005f58:	ee10 0a10 	vmov	r0, s0
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	4b57      	ldr	r3, [pc, #348]	; (80060bc <atan+0x334>)
 8005f60:	4629      	mov	r1, r5
 8005f62:	f7fa f955 	bl	8000210 <__aeabi_dsub>
 8005f66:	2200      	movs	r2, #0
 8005f68:	4606      	mov	r6, r0
 8005f6a:	460f      	mov	r7, r1
 8005f6c:	4b53      	ldr	r3, [pc, #332]	; (80060bc <atan+0x334>)
 8005f6e:	4620      	mov	r0, r4
 8005f70:	4629      	mov	r1, r5
 8005f72:	f7fa f94f 	bl	8000214 <__adddf3>
 8005f76:	4602      	mov	r2, r0
 8005f78:	460b      	mov	r3, r1
 8005f7a:	4630      	mov	r0, r6
 8005f7c:	4639      	mov	r1, r7
 8005f7e:	f7fa fc25 	bl	80007cc <__aeabi_ddiv>
 8005f82:	f04f 0a01 	mov.w	sl, #1
 8005f86:	4604      	mov	r4, r0
 8005f88:	460d      	mov	r5, r1
 8005f8a:	e764      	b.n	8005e56 <atan+0xce>
 8005f8c:	4b4d      	ldr	r3, [pc, #308]	; (80060c4 <atan+0x33c>)
 8005f8e:	429e      	cmp	r6, r3
 8005f90:	dc1d      	bgt.n	8005fce <atan+0x246>
 8005f92:	ee10 0a10 	vmov	r0, s0
 8005f96:	2200      	movs	r2, #0
 8005f98:	4b4b      	ldr	r3, [pc, #300]	; (80060c8 <atan+0x340>)
 8005f9a:	4629      	mov	r1, r5
 8005f9c:	f7fa f938 	bl	8000210 <__aeabi_dsub>
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	4606      	mov	r6, r0
 8005fa4:	460f      	mov	r7, r1
 8005fa6:	4b48      	ldr	r3, [pc, #288]	; (80060c8 <atan+0x340>)
 8005fa8:	4620      	mov	r0, r4
 8005faa:	4629      	mov	r1, r5
 8005fac:	f7fa fae4 	bl	8000578 <__aeabi_dmul>
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	4b42      	ldr	r3, [pc, #264]	; (80060bc <atan+0x334>)
 8005fb4:	f7fa f92e 	bl	8000214 <__adddf3>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	460b      	mov	r3, r1
 8005fbc:	4630      	mov	r0, r6
 8005fbe:	4639      	mov	r1, r7
 8005fc0:	f7fa fc04 	bl	80007cc <__aeabi_ddiv>
 8005fc4:	f04f 0a02 	mov.w	sl, #2
 8005fc8:	4604      	mov	r4, r0
 8005fca:	460d      	mov	r5, r1
 8005fcc:	e743      	b.n	8005e56 <atan+0xce>
 8005fce:	462b      	mov	r3, r5
 8005fd0:	ee10 2a10 	vmov	r2, s0
 8005fd4:	2000      	movs	r0, #0
 8005fd6:	493d      	ldr	r1, [pc, #244]	; (80060cc <atan+0x344>)
 8005fd8:	f7fa fbf8 	bl	80007cc <__aeabi_ddiv>
 8005fdc:	f04f 0a03 	mov.w	sl, #3
 8005fe0:	4604      	mov	r4, r0
 8005fe2:	460d      	mov	r5, r1
 8005fe4:	e737      	b.n	8005e56 <atan+0xce>
 8005fe6:	4640      	mov	r0, r8
 8005fe8:	4649      	mov	r1, r9
 8005fea:	f7fa f913 	bl	8000214 <__adddf3>
 8005fee:	4622      	mov	r2, r4
 8005ff0:	462b      	mov	r3, r5
 8005ff2:	f7fa fac1 	bl	8000578 <__aeabi_dmul>
 8005ff6:	4e36      	ldr	r6, [pc, #216]	; (80060d0 <atan+0x348>)
 8005ff8:	4b36      	ldr	r3, [pc, #216]	; (80060d4 <atan+0x34c>)
 8005ffa:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8005ffe:	4456      	add	r6, sl
 8006000:	449a      	add	sl, r3
 8006002:	e9da 2300 	ldrd	r2, r3, [sl]
 8006006:	f7fa f903 	bl	8000210 <__aeabi_dsub>
 800600a:	4622      	mov	r2, r4
 800600c:	462b      	mov	r3, r5
 800600e:	f7fa f8ff 	bl	8000210 <__aeabi_dsub>
 8006012:	4602      	mov	r2, r0
 8006014:	460b      	mov	r3, r1
 8006016:	e9d6 0100 	ldrd	r0, r1, [r6]
 800601a:	f7fa f8f9 	bl	8000210 <__aeabi_dsub>
 800601e:	f1bb 0f00 	cmp.w	fp, #0
 8006022:	4604      	mov	r4, r0
 8006024:	460d      	mov	r5, r1
 8006026:	f6bf aece 	bge.w	8005dc6 <atan+0x3e>
 800602a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800602e:	4604      	mov	r4, r0
 8006030:	461d      	mov	r5, r3
 8006032:	e6c8      	b.n	8005dc6 <atan+0x3e>
 8006034:	a51c      	add	r5, pc, #112	; (adr r5, 80060a8 <atan+0x320>)
 8006036:	e9d5 4500 	ldrd	r4, r5, [r5]
 800603a:	e6c4      	b.n	8005dc6 <atan+0x3e>
 800603c:	f3af 8000 	nop.w
 8006040:	54442d18 	.word	0x54442d18
 8006044:	bff921fb 	.word	0xbff921fb
 8006048:	8800759c 	.word	0x8800759c
 800604c:	7e37e43c 	.word	0x7e37e43c
 8006050:	e322da11 	.word	0xe322da11
 8006054:	3f90ad3a 	.word	0x3f90ad3a
 8006058:	24760deb 	.word	0x24760deb
 800605c:	3fa97b4b 	.word	0x3fa97b4b
 8006060:	a0d03d51 	.word	0xa0d03d51
 8006064:	3fb10d66 	.word	0x3fb10d66
 8006068:	c54c206e 	.word	0xc54c206e
 800606c:	3fb745cd 	.word	0x3fb745cd
 8006070:	920083ff 	.word	0x920083ff
 8006074:	3fc24924 	.word	0x3fc24924
 8006078:	5555550d 	.word	0x5555550d
 800607c:	3fd55555 	.word	0x3fd55555
 8006080:	2c6a6c2f 	.word	0x2c6a6c2f
 8006084:	bfa2b444 	.word	0xbfa2b444
 8006088:	52defd9a 	.word	0x52defd9a
 800608c:	3fadde2d 	.word	0x3fadde2d
 8006090:	af749a6d 	.word	0xaf749a6d
 8006094:	3fb3b0f2 	.word	0x3fb3b0f2
 8006098:	fe231671 	.word	0xfe231671
 800609c:	3fbc71c6 	.word	0x3fbc71c6
 80060a0:	9998ebc4 	.word	0x9998ebc4
 80060a4:	3fc99999 	.word	0x3fc99999
 80060a8:	54442d18 	.word	0x54442d18
 80060ac:	3ff921fb 	.word	0x3ff921fb
 80060b0:	440fffff 	.word	0x440fffff
 80060b4:	7ff00000 	.word	0x7ff00000
 80060b8:	3fdbffff 	.word	0x3fdbffff
 80060bc:	3ff00000 	.word	0x3ff00000
 80060c0:	3ff2ffff 	.word	0x3ff2ffff
 80060c4:	40037fff 	.word	0x40037fff
 80060c8:	3ff80000 	.word	0x3ff80000
 80060cc:	bff00000 	.word	0xbff00000
 80060d0:	08006528 	.word	0x08006528
 80060d4:	08006548 	.word	0x08006548

080060d8 <fabs>:
 80060d8:	ec53 2b10 	vmov	r2, r3, d0
 80060dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80060e0:	ec43 2b10 	vmov	d0, r2, r3
 80060e4:	4770      	bx	lr
	...

080060e8 <floor>:
 80060e8:	ec51 0b10 	vmov	r0, r1, d0
 80060ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060f0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80060f4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80060f8:	2e13      	cmp	r6, #19
 80060fa:	ee10 8a10 	vmov	r8, s0
 80060fe:	460c      	mov	r4, r1
 8006100:	ee10 5a10 	vmov	r5, s0
 8006104:	dc35      	bgt.n	8006172 <floor+0x8a>
 8006106:	2e00      	cmp	r6, #0
 8006108:	da17      	bge.n	800613a <floor+0x52>
 800610a:	a335      	add	r3, pc, #212	; (adr r3, 80061e0 <floor+0xf8>)
 800610c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006110:	f7fa f880 	bl	8000214 <__adddf3>
 8006114:	2200      	movs	r2, #0
 8006116:	2300      	movs	r3, #0
 8006118:	f7fa fcbe 	bl	8000a98 <__aeabi_dcmpgt>
 800611c:	b150      	cbz	r0, 8006134 <floor+0x4c>
 800611e:	2c00      	cmp	r4, #0
 8006120:	da5a      	bge.n	80061d8 <floor+0xf0>
 8006122:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8006126:	ea53 0308 	orrs.w	r3, r3, r8
 800612a:	4b2f      	ldr	r3, [pc, #188]	; (80061e8 <floor+0x100>)
 800612c:	f04f 0500 	mov.w	r5, #0
 8006130:	bf18      	it	ne
 8006132:	461c      	movne	r4, r3
 8006134:	4621      	mov	r1, r4
 8006136:	4628      	mov	r0, r5
 8006138:	e025      	b.n	8006186 <floor+0x9e>
 800613a:	4f2c      	ldr	r7, [pc, #176]	; (80061ec <floor+0x104>)
 800613c:	4137      	asrs	r7, r6
 800613e:	ea01 0307 	and.w	r3, r1, r7
 8006142:	4303      	orrs	r3, r0
 8006144:	d01f      	beq.n	8006186 <floor+0x9e>
 8006146:	a326      	add	r3, pc, #152	; (adr r3, 80061e0 <floor+0xf8>)
 8006148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800614c:	f7fa f862 	bl	8000214 <__adddf3>
 8006150:	2200      	movs	r2, #0
 8006152:	2300      	movs	r3, #0
 8006154:	f7fa fca0 	bl	8000a98 <__aeabi_dcmpgt>
 8006158:	2800      	cmp	r0, #0
 800615a:	d0eb      	beq.n	8006134 <floor+0x4c>
 800615c:	2c00      	cmp	r4, #0
 800615e:	bfbe      	ittt	lt
 8006160:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8006164:	fa43 f606 	asrlt.w	r6, r3, r6
 8006168:	19a4      	addlt	r4, r4, r6
 800616a:	ea24 0407 	bic.w	r4, r4, r7
 800616e:	2500      	movs	r5, #0
 8006170:	e7e0      	b.n	8006134 <floor+0x4c>
 8006172:	2e33      	cmp	r6, #51	; 0x33
 8006174:	dd0b      	ble.n	800618e <floor+0xa6>
 8006176:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800617a:	d104      	bne.n	8006186 <floor+0x9e>
 800617c:	ee10 2a10 	vmov	r2, s0
 8006180:	460b      	mov	r3, r1
 8006182:	f7fa f847 	bl	8000214 <__adddf3>
 8006186:	ec41 0b10 	vmov	d0, r0, r1
 800618a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800618e:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8006192:	f04f 33ff 	mov.w	r3, #4294967295
 8006196:	fa23 f707 	lsr.w	r7, r3, r7
 800619a:	4238      	tst	r0, r7
 800619c:	d0f3      	beq.n	8006186 <floor+0x9e>
 800619e:	a310      	add	r3, pc, #64	; (adr r3, 80061e0 <floor+0xf8>)
 80061a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a4:	f7fa f836 	bl	8000214 <__adddf3>
 80061a8:	2200      	movs	r2, #0
 80061aa:	2300      	movs	r3, #0
 80061ac:	f7fa fc74 	bl	8000a98 <__aeabi_dcmpgt>
 80061b0:	2800      	cmp	r0, #0
 80061b2:	d0bf      	beq.n	8006134 <floor+0x4c>
 80061b4:	2c00      	cmp	r4, #0
 80061b6:	da02      	bge.n	80061be <floor+0xd6>
 80061b8:	2e14      	cmp	r6, #20
 80061ba:	d103      	bne.n	80061c4 <floor+0xdc>
 80061bc:	3401      	adds	r4, #1
 80061be:	ea25 0507 	bic.w	r5, r5, r7
 80061c2:	e7b7      	b.n	8006134 <floor+0x4c>
 80061c4:	2301      	movs	r3, #1
 80061c6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80061ca:	fa03 f606 	lsl.w	r6, r3, r6
 80061ce:	4435      	add	r5, r6
 80061d0:	45a8      	cmp	r8, r5
 80061d2:	bf88      	it	hi
 80061d4:	18e4      	addhi	r4, r4, r3
 80061d6:	e7f2      	b.n	80061be <floor+0xd6>
 80061d8:	2500      	movs	r5, #0
 80061da:	462c      	mov	r4, r5
 80061dc:	e7aa      	b.n	8006134 <floor+0x4c>
 80061de:	bf00      	nop
 80061e0:	8800759c 	.word	0x8800759c
 80061e4:	7e37e43c 	.word	0x7e37e43c
 80061e8:	bff00000 	.word	0xbff00000
 80061ec:	000fffff 	.word	0x000fffff

080061f0 <matherr>:
 80061f0:	2000      	movs	r0, #0
 80061f2:	4770      	bx	lr
 80061f4:	0000      	movs	r0, r0
	...

080061f8 <scalbn>:
 80061f8:	b570      	push	{r4, r5, r6, lr}
 80061fa:	ec55 4b10 	vmov	r4, r5, d0
 80061fe:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8006202:	4606      	mov	r6, r0
 8006204:	462b      	mov	r3, r5
 8006206:	b9b2      	cbnz	r2, 8006236 <scalbn+0x3e>
 8006208:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800620c:	4323      	orrs	r3, r4
 800620e:	d03c      	beq.n	800628a <scalbn+0x92>
 8006210:	2200      	movs	r2, #0
 8006212:	4b33      	ldr	r3, [pc, #204]	; (80062e0 <scalbn+0xe8>)
 8006214:	4629      	mov	r1, r5
 8006216:	ee10 0a10 	vmov	r0, s0
 800621a:	f7fa f9ad 	bl	8000578 <__aeabi_dmul>
 800621e:	4a31      	ldr	r2, [pc, #196]	; (80062e4 <scalbn+0xec>)
 8006220:	4296      	cmp	r6, r2
 8006222:	4604      	mov	r4, r0
 8006224:	460d      	mov	r5, r1
 8006226:	460b      	mov	r3, r1
 8006228:	da13      	bge.n	8006252 <scalbn+0x5a>
 800622a:	a329      	add	r3, pc, #164	; (adr r3, 80062d0 <scalbn+0xd8>)
 800622c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006230:	f7fa f9a2 	bl	8000578 <__aeabi_dmul>
 8006234:	e00a      	b.n	800624c <scalbn+0x54>
 8006236:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800623a:	428a      	cmp	r2, r1
 800623c:	d10c      	bne.n	8006258 <scalbn+0x60>
 800623e:	ee10 2a10 	vmov	r2, s0
 8006242:	462b      	mov	r3, r5
 8006244:	4620      	mov	r0, r4
 8006246:	4629      	mov	r1, r5
 8006248:	f7f9 ffe4 	bl	8000214 <__adddf3>
 800624c:	4604      	mov	r4, r0
 800624e:	460d      	mov	r5, r1
 8006250:	e01b      	b.n	800628a <scalbn+0x92>
 8006252:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006256:	3a36      	subs	r2, #54	; 0x36
 8006258:	4432      	add	r2, r6
 800625a:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800625e:	428a      	cmp	r2, r1
 8006260:	dd0b      	ble.n	800627a <scalbn+0x82>
 8006262:	ec45 4b11 	vmov	d1, r4, r5
 8006266:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 80062d8 <scalbn+0xe0>
 800626a:	f000 f83f 	bl	80062ec <copysign>
 800626e:	a31a      	add	r3, pc, #104	; (adr r3, 80062d8 <scalbn+0xe0>)
 8006270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006274:	ec51 0b10 	vmov	r0, r1, d0
 8006278:	e7da      	b.n	8006230 <scalbn+0x38>
 800627a:	2a00      	cmp	r2, #0
 800627c:	dd08      	ble.n	8006290 <scalbn+0x98>
 800627e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006282:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006286:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800628a:	ec45 4b10 	vmov	d0, r4, r5
 800628e:	bd70      	pop	{r4, r5, r6, pc}
 8006290:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006294:	da0d      	bge.n	80062b2 <scalbn+0xba>
 8006296:	f24c 3350 	movw	r3, #50000	; 0xc350
 800629a:	429e      	cmp	r6, r3
 800629c:	ec45 4b11 	vmov	d1, r4, r5
 80062a0:	dce1      	bgt.n	8006266 <scalbn+0x6e>
 80062a2:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 80062d0 <scalbn+0xd8>
 80062a6:	f000 f821 	bl	80062ec <copysign>
 80062aa:	a309      	add	r3, pc, #36	; (adr r3, 80062d0 <scalbn+0xd8>)
 80062ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b0:	e7e0      	b.n	8006274 <scalbn+0x7c>
 80062b2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80062b6:	3236      	adds	r2, #54	; 0x36
 80062b8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80062bc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80062c0:	4620      	mov	r0, r4
 80062c2:	4629      	mov	r1, r5
 80062c4:	2200      	movs	r2, #0
 80062c6:	4b08      	ldr	r3, [pc, #32]	; (80062e8 <scalbn+0xf0>)
 80062c8:	e7b2      	b.n	8006230 <scalbn+0x38>
 80062ca:	bf00      	nop
 80062cc:	f3af 8000 	nop.w
 80062d0:	c2f8f359 	.word	0xc2f8f359
 80062d4:	01a56e1f 	.word	0x01a56e1f
 80062d8:	8800759c 	.word	0x8800759c
 80062dc:	7e37e43c 	.word	0x7e37e43c
 80062e0:	43500000 	.word	0x43500000
 80062e4:	ffff3cb0 	.word	0xffff3cb0
 80062e8:	3c900000 	.word	0x3c900000

080062ec <copysign>:
 80062ec:	ec53 2b10 	vmov	r2, r3, d0
 80062f0:	ee11 0a90 	vmov	r0, s3
 80062f4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80062f8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80062fc:	ea41 0300 	orr.w	r3, r1, r0
 8006300:	ec43 2b10 	vmov	d0, r2, r3
 8006304:	4770      	bx	lr
	...

08006308 <__errno>:
 8006308:	4b01      	ldr	r3, [pc, #4]	; (8006310 <__errno+0x8>)
 800630a:	6818      	ldr	r0, [r3, #0]
 800630c:	4770      	bx	lr
 800630e:	bf00      	nop
 8006310:	20000018 	.word	0x20000018

08006314 <_init>:
 8006314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006316:	bf00      	nop
 8006318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800631a:	bc08      	pop	{r3}
 800631c:	469e      	mov	lr, r3
 800631e:	4770      	bx	lr

08006320 <_fini>:
 8006320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006322:	bf00      	nop
 8006324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006326:	bc08      	pop	{r3}
 8006328:	469e      	mov	lr, r3
 800632a:	4770      	bx	lr
